[["Statement","package"],["Type"," Data::Printer"],["",";\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","Term::ANSIColor "],["String","qw(color colored)"],["",";\n"],["Statement","use "],["","Scalar::Util;\n"],["Statement","use "],["","Sort::Naturally;\n"],["Statement","use "],["","Carp "],["String","qw(croak)"],["",";\n"],["Statement","use "],["","Clone::PP "],["String","qw(clone)"],["",";\n"],["Statement","use if"],[""," "],["Identifier","$]"],[""," >= "],["Float","5.010"],["",", "],["String","'Hash::Util::FieldHash'"],[""," => "],["String","qw(fieldhash)"],["",";\n"],["Statement","use if"],[""," "],["Identifier","$]"],[""," < "],["Float","5.010"],["",", "],["String","'Hash::Util::FieldHash::Compat'"],[""," => "],["String","qw(fieldhash)"],["",";\n"],["Statement","use "],["","File::Spec;\n"],["Statement","use "],["","File::HomeDir ();\n"],["Statement","use "],["","Fcntl;\n"],["Statement","use version"],[""," "],["Float","0.77"],[""," ();\n\n"],["Statement","our"],[""," "],["Identifier","$VERSION"],[""," = "],["String","'0.35'"],["",";\n\n"],["PreProc","BEGIN "],["","{\n    "],["Conditional","if"],[""," ("],["Identifier","$^O"],[""," =~ "],["Statement","/"],["String","Win32"],["Statement","/i"],["",") {\n        "],["Statement","require"],[""," Win32::Console::ANSI;\n        Win32::Console::ANSI->"],["Statement","import"],["",";\n    }\n}\n\n\n"],["Comment","# defaults"],["","\n"],["Statement","my"],[""," "],["Identifier","$BREAK"],[""," = "],["String","\""],["Special","\\n"],["String","\""],["",";\n"],["Statement","my"],[""," "],["Identifier","$properties"],[""," = {\n    "],["String","'name'"],["","           => "],["String","'var'"],["",",\n    "],["String","'indent'"],["","         => "],["Number","4"],["",",\n    "],["String","'index'"],["","          => "],["Number","1"],["",",\n    "],["String","'max_depth'"],["","      => "],["Number","0"],["",",\n    "],["String","'multiline'"],["","      => "],["Number","1"],["",",\n    "],["String","'sort_keys'"],["","      => "],["Number","1"],["",",\n    "],["String","'deparse'"],["","        => "],["Number","0"],["",",\n    "],["String","'hash_separator'"],[""," => "],["String","'   '"],["",",\n    "],["String","'separator'"],["","      => "],["String","','"],["",",\n    "],["String","'end_separator'"],["","  => "],["Number","0"],["",",\n    "],["String","'show_tied'"],["","      => "],["Number","1"],["",",\n    "],["String","'show_tainted'"],["","   => "],["Number","1"],["",",\n    "],["String","'show_weak'"],["","      => "],["Number","1"],["",",\n    "],["String","'show_readonly'"],["","  => "],["Number","0"],["",",\n    "],["String","'show_lvalue'"],["","    => "],["Number","1"],["",",\n    "],["String","'print_escapes'"],["","  => "],["Number","0"],["",",\n    "],["String","'quote_keys'"],["","     => "],["String","'auto'"],["",",\n    "],["String","'use_prototypes'"],[""," => "],["Number","1"],["",",\n    "],["String","'output'"],["","         => "],["String","'stderr'"],["",",\n    "],["String","'return_value'"],["","   => "],["String","'dump'"],["",",       "],["Comment","# also 'void' or 'pass'"],["","\n    "],["String","'colored'"],["","        => "],["String","'auto'"],["",",       "],["Comment","# also 0 or 1"],["","\n    "],["String","'caller_info'"],["","    => "],["Number","0"],["",",\n    "],["String","'caller_message'"],[""," => "],["String","'Printing in line __LINE__ of __FILENAME__:'"],["",",\n    "],["String","'class_method'"],["","   => "],["String","'_data_printer'"],["",", "],["Comment","# use a specific dump method, if available"],["","\n    "],["String","'color'"],["","          => {\n        "],["String","'array'"],["","       => "],["String","'bright_white'"],["",",\n        "],["String","'number'"],["","      => "],["String","'bright_blue'"],["",",\n        "],["String","'string'"],["","      => "],["String","'bright_yellow'"],["",",\n        "],["String","'class'"],["","       => "],["String","'bright_green'"],["",",\n        "],["String","'method'"],["","      => "],["String","'bright_green'"],["",",\n        "],["String","'undef'"],["","       => "],["String","'bright_red'"],["",",\n        "],["String","'hash'"],["","        => "],["String","'magenta'"],["",",\n        "],["String","'regex'"],["","       => "],["String","'yellow'"],["",",\n        "],["String","'code'"],["","        => "],["String","'green'"],["",",\n        "],["String","'glob'"],["","        => "],["String","'bright_cyan'"],["",",\n        "],["String","'vstring'"],["","     => "],["String","'bright_blue'"],["",",\n        "],["String","'lvalue'"],["","      => "],["String","'bright_white'"],["",",\n        "],["String","'format'"],["","      => "],["String","'bright_cyan'"],["",",\n        "],["String","'repeated'"],["","    => "],["String","'white on_red'"],["",",\n        "],["String","'caller_info'"],[""," => "],["String","'bright_cyan'"],["",",\n        "],["String","'weak'"],["","        => "],["String","'cyan'"],["",",\n        "],["String","'tainted'"],["","     => "],["String","'red'"],["",",\n        "],["String","'escaped'"],["","     => "],["String","'bright_red'"],["",",\n        "],["String","'unknown'"],["","     => "],["String","'bright_yellow on_blue'"],["",",\n    },\n    "],["String","'class'"],[""," => {\n        "],["String","inherited"],["","    => "],["String","'none'"],["",",   "],["Comment","# also 'all', 'public' or 'private'"],["","\n        "],["String","universal"],["","    => "],["Number","1"],["",",\n        "],["String","parents"],["","      => "],["Number","1"],["",",\n        "],["String","linear_isa"],["","   => "],["String","'auto'"],["",",\n        "],["String","expand"],["","       => "],["Number","1"],["",",        "],["Comment","# how many levels to expand. 0 for none, 'all' for all"],["","\n        "],["String","internals"],["","    => "],["Number","1"],["",",\n        "],["String","export"],["","       => "],["Number","1"],["",",\n        "],["String","sort_methods"],[""," => "],["Number","1"],["",",\n        "],["String","show_methods"],[""," => "],["String","'all'"],["",",    "],["Comment","# also 'none', 'public', 'private'"],["","\n        "],["String","show_reftype"],[""," => "],["Number","0"],["",",\n        "],["String","_depth"],["","       => "],["Number","0"],["",",        "],["Comment","# used internally"],["","\n    },\n    "],["String","'filters'"],[""," => {\n        "],["Comment","# The IO ref type isn't supported as you can't actually create one,"],["","\n        "],["Comment","# any handle you make is automatically blessed into an IO::* object,"],["","\n        "],["Comment","# and those are separately handled."],["","\n        "],["String","SCALAR"],["","  => [ \\"],["Identifier","&SCALAR"],["","   ],\n        "],["String","ARRAY"],["","   => [ \\"],["Identifier","&ARRAY"],["","    ],\n        "],["String","HASH"],["","    => [ \\"],["Identifier","&HASH"],["","     ],\n        "],["String","REF"],["","     => [ \\"],["Identifier","&REF"],["","      ],\n        "],["String","CODE"],["","    => [ \\"],["Identifier","&CODE"],["","     ],\n        "],["String","GLOB"],["","    => [ \\"],["Identifier","&GLOB"],["","     ],\n        "],["String","VSTRING"],[""," => [ \\"],["Identifier","&VSTRING"],["","  ],\n        "],["String","LVALUE"],["","  => [ \\"],["Identifier","&LVALUE"],[""," ],\n        "],["String","FORMAT"],["","  => [ \\"],["Identifier","&FORMAT"],[""," ],\n        "],["String","Regexp"],["","  => [ \\"],["Identifier","&Regexp"],["","   ],\n        "],["String","-unknown"],["","=> [ \\"],["Identifier","&_unknown"],[""," ],\n        "],["String","-class"],["","  => [ \\"],["Identifier","&_class"],["","   ],\n    },\n\n    "],["String","_output"],["","          => *STDERR,     "],["Comment","# used internally"],["","\n    "],["String","_current_indent"],["","  => "],["Number","0"],["",",           "],["Comment","# used internally"],["","\n    "],["String","_linebreak"],["","       => \\"],["Identifier","$BREAK"],["",",     "],["Comment","# used internally"],["","\n    "],["String","_seen"],["","            => {},          "],["Comment","# used internally"],["","\n    "],["String","_seen_override"],["","   => {},          "],["Comment","# used internally"],["","\n    "],["String","_depth"],["","           => "],["Number","0"],["",",           "],["Comment","# used internally"],["","\n    "],["String","_tie"],["","             => "],["Number","0"],["",",           "],["Comment","# used internally"],["","\n};\n\n\n"],["Keyword","sub "],["Function","import "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$args"],["",";\n    "],["Conditional","if"],[""," ("],["Statement","scalar"],[""," "],["Identifier","@_"],["",") {\n        "],["Identifier","$args"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Statement","shift"],[""," : {"],["Identifier","@_"],["","};\n        croak "],["String","'Data::Printer can receive either a hash or a hash reference.'"],["","\n            "],["Conditional","unless"],[""," "],["Operator","ref"],[""," "],["Identifier","$args"],[""," "],["Operator","and"],[""," "],["Operator","ref"],[""," "],["Identifier","$args"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",";\n    }\n\n    "],["Comment","# the RC file overrides the defaults,"],["","\n    "],["Comment","# (and we load it only once)"],["","\n    "],["Conditional","unless"],["","( "],["Statement","exists"],[""," "],["Identifier","$properties->{"],["String","_initialized"],["Identifier","}"],[""," ) {\n        _load_rc_file("],["Identifier","$args"],["",");\n        "],["Identifier","$properties->{"],["String","_initialized"],["Identifier","}"],[""," = "],["Number","1"],["",";\n    }\n\n    "],["Comment","# and 'use' arguments override the RC file"],["","\n    "],["Conditional","if"],[""," ("],["Identifier","$args"],["",") {\n        "],["Identifier","$properties"],[""," = _merge( "],["Identifier","$args"],[""," );\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$exported"],[""," = ("],["Identifier","$properties->{"],["String","use_prototypes"],["Identifier","}"],[""," ? \\"],["Identifier","&p"],[""," : \\"],["Identifier","&np"],[""," );\n    "],["Statement","my"],[""," "],["Identifier","$imported"],[""," = "],["Identifier","$properties->{"],["String","alias"],["Identifier","}"],[""," || "],["String","'p'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$caller"],[""," = "],["Statement","caller"],["",";\n    "],["Statement","no strict"],[""," "],["String","'refs'"],["",";\n    "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":"],["Identifier","$imported"],["String","\""],["Identifier","}"],[""," = "],["Identifier","$exported"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","p "],["Type","(\\[@$%&];%)"],[""," {\n    "],["Statement","return"],[""," _print_and_return( "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",", _data_printer(!!"],["Operator","defined"],[""," "],["Statement","wantarray"],["",", "],["Identifier","@_"],["",") );\n}\n\n"],["Comment","# np() is a p() clone without prototypes."],["","\n"],["Comment","# Just like regular Data::Dumper, this version"],["","\n"],["Comment","# expects a reference as its first argument."],["","\n"],["Comment","# We make a single exception for when we only"],["","\n"],["Comment","# get one argument, in which case we ref it"],["","\n"],["Comment","# for the user and keep going."],["","\n"],["Keyword","sub "],["Function","np  "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$item"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," (!"],["Operator","ref"],[""," "],["Identifier","$item"],[""," && "],["Identifier","@_"],[""," == "],["Number","0"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$item_value"],[""," = "],["Identifier","$item"],["",";\n        "],["Identifier","$item"],[""," = \\"],["Identifier","$item_value"],["",";\n    }\n\n    "],["Statement","return"],[""," _print_and_return( "],["Identifier","$item"],["",", _data_printer(!!"],["Operator","defined"],[""," "],["Statement","wantarray"],["",", "],["Identifier","$item"],["",", "],["Identifier","@_"],["",") );\n}\n\n"],["Keyword","sub "],["Function","_print_and_return "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$dump"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","return_value"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'pass'"],[""," ) {\n        "],["Statement","print"],[""," "],["Statement","{"],[""," "],["Identifier","$p->{"],["String","_output"],["Identifier","}"],[""," "],["Statement","}"],[""," "],["Identifier","$dump"],[""," . "],["Identifier","$/"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = "],["Operator","ref"],[""," "],["Identifier","$item"],["",";\n        "],["Conditional","if"],[""," ("],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",") {\n            "],["Statement","return"],[""," "],["Identifier","@{"],[""," "],["Identifier","$item"],[""," "],["Identifier","}"],["",";\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",") {\n            "],["Statement","return"],[""," "],["Identifier","%{"],[""," "],["Identifier","$item"],[""," "],["Identifier","}"],["",";\n        }\n        "],["Conditional","elsif"],[""," ( "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["Identifier","$_"],[""," "],["Statement","}"],[""," "],["String","qw(REF SCALAR CODE Regexp GLOB VSTRING)"],[""," ) {\n            "],["Statement","return"],[""," "],["Identifier","$$item"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Statement","return"],[""," "],["Identifier","$item"],["",";\n        }\n    }\n    "],["Conditional","elsif"],[""," ( "],["Identifier","$p->{"],["String","return_value"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'void'"],[""," ) {\n        "],["Statement","print"],[""," "],["Statement","{"],[""," "],["Identifier","$p->{"],["String","_output"],["Identifier","}"],[""," "],["Statement","}"],[""," "],["Identifier","$dump"],[""," . "],["Identifier","$/"],["",";\n        "],["Statement","return"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","print"],[""," "],["Statement","{"],[""," "],["Identifier","$p->{"],["String","_output"],["Identifier","}"],[""," "],["Statement","}"],[""," "],["Identifier","$dump"],[""," . "],["Identifier","$/"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Statement","wantarray"],["",";\n        "],["Statement","return"],[""," "],["Identifier","$dump"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_data_printer "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$wantarray"],[""," = "],["Statement","shift"],["",";\n\n    croak "],["String","'When calling p() without prototypes, please pass arguments as references'"],["","\n        "],["Conditional","unless"],[""," "],["Operator","ref"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",";\n\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","%local_properties"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","local"],[""," "],["Identifier","%ENV"],[""," = "],["Identifier","%ENV"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$p"],[""," = _merge(\\"],["Identifier","%local_properties"],["",");\n    "],["Conditional","unless"],[""," ("],["Identifier","$p->{"],["String","multiline"],["Identifier","}"],["",") {\n        "],["Identifier","$BREAK"],[""," = "],["String","' '"],["",";\n        "],["Identifier","$p->{"],["String","'indent'"],["Identifier","}"],[""," = "],["Number","0"],["",";\n        "],["Identifier","$p->{"],["String","'index'"],["Identifier","}"],["","  = "],["Number","0"],["",";\n    }\n\n    "],["Comment","# We disable colors if colored is set to false."],["","\n    "],["Comment","# If set to \"auto\", we disable colors if the user"],["","\n    "],["Comment","# set ANSI_COLORS_DISABLED or if we're either"],["","\n    "],["Comment","# returning the value (instead of printing) or"],["","\n    "],["Comment","# being piped to another command."],["","\n    "],["Conditional","if"],[""," ( !"],["Identifier","$p->{"],["String","colored"],["Identifier","}"],["","\n          "],["Operator","or"],[""," ("],["Identifier","$p->{"],["String","colored"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'auto'"],["","\n              "],["Operator","and"],[""," ("],["Statement","exists"],[""," "],["Identifier","$ENV{"],["String","ANSI_COLORS_DISABLED"],["Identifier","}"],["","\n                   "],["Operator","or"],[""," "],["Identifier","$wantarray"],["","\n                   "],["Operator","or"],[""," "],["Operator","not"],[""," "],["Statement","-t"],[""," "],["Identifier","$p->{"],["String","_output"],["Identifier","}"],["","\n                  )\n          )\n    ) {\n        "],["Identifier","$ENV{"],["String","ANSI_COLORS_DISABLED"],["Identifier","}"],[""," = "],["Number","1"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","delete"],[""," "],["Identifier","$ENV{"],["String","ANSI_COLORS_DISABLED"],["Identifier","}"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$out"],[""," = color("],["String","'reset'"],["",");\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","caller_info"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],[""," == "],["Number","0"],[""," ) {\n        "],["Identifier","$out"],[""," .= _get_info_message("],["Identifier","$p"],["",");\n    }\n\n    "],["Identifier","$out"],[""," .= _p( "],["Identifier","$item"],["",", "],["Identifier","$p"],[""," );\n    "],["Statement","return"],[""," ("],["Identifier","$out"],["",", "],["Identifier","$p"],["",");\n}\n\n\n"],["Keyword","sub "],["Function","_p "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = ("],["Operator","defined"],[""," "],["Identifier","$p->{"],["String","_reftype"],["Identifier","}"],[""," ? "],["Identifier","$p->{"],["String","_reftype"],["Identifier","}"],[""," : "],["Operator","ref"],[""," "],["Identifier","$item"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$tie"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Comment","# Object's unique ID, avoiding circular structures"],["","\n    "],["Statement","my"],[""," "],["Identifier","$id"],[""," = _object_id( "],["Identifier","$item"],[""," );\n    "],["Conditional","if"],[""," ( "],["Statement","exists"],[""," "],["Identifier","$p->{"],["String","_seen"],["Identifier","}->{$id}"],[""," ) {\n        "],["Conditional","if"],[""," ( "],["Operator","not"],[""," "],["Operator","defined"],[""," "],["Identifier","$p->{"],["String","_reftype"],["Identifier","}"],[""," ) {\n            "],["Statement","return"],[""," colored("],["Identifier","$p->{"],["String","_seen"],["Identifier","}->{$id}"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","repeated"],["Identifier","}"],["",");\n        }\n    }\n    "],["Comment","# some filters don't want us to show their repeated refs"],["","\n    "],["Conditional","elsif"],["","( !"],["Statement","exists"],[""," "],["Identifier","$p->{"],["String","_seen_override"],["Identifier","}{$ref}"],[""," ) {\n        "],["Identifier","$p->{"],["String","_seen"],["Identifier","}->{$id}"],[""," = "],["Identifier","$p->{"],["String","name"],["Identifier","}"],["",";\n    }\n\n    "],["Statement","delete"],[""," "],["Identifier","$p->{"],["String","_reftype"],["Identifier","}"],["","; "],["Comment","# abort override"],["","\n\n    "],["Comment","# globs don't play nice"],["","\n    "],["Identifier","$ref"],[""," = "],["String","'GLOB'"],[""," "],["Conditional","if"],[""," "],["String","\""],["Identifier","$item"],["String","\""],[""," =~ "],["Statement","/"],["String","GLOB"],["Special","\\([^()]+\\)"],["String","$"],["Statement","/"],["",";\n\n\n    "],["Comment","# filter item (if user set a filter for it)"],["","\n    "],["Statement","my"],[""," "],["Identifier","$found"],["",";\n    "],["Conditional","if"],[""," ( "],["Statement","exists"],[""," "],["Identifier","$p->{"],["String","filters"],["Identifier","}->{$ref}"],[""," ) {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$filter"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$p->{"],["String","filters"],["Identifier","}->{$ref}"],[""," "],["Identifier","}"],[""," ) {\n            "],["Conditional","if"],[""," ( "],["Operator","defined"],[""," ("],["Statement","my"],[""," "],["Identifier","$result"],[""," = "],["Identifier","$filter"],["","->("],["Identifier","$item"],["",", "],["Identifier","$p"],["",")) ) {\n                "],["Identifier","$string"],[""," .= "],["Identifier","$result"],["",";\n                "],["Identifier","$found"],[""," = "],["Number","1"],["",";\n                "],["Statement","last"],["",";\n            }\n        }\n    }\n\n    "],["Conditional","if"],[""," ("],["Operator","not"],[""," "],["Identifier","$found"],[""," "],["Operator","and"],[""," Scalar::Util::blessed("],["Identifier","$item"],["",") ) {\n        "],["Comment","# let '-class' filters have a go"],["","\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$filter"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$p->{"],["String","filters"],["Identifier","}->{"],["String","'-class'"],["Identifier","}"],[""," "],["Identifier","}"],[""," ) {\n            "],["Conditional","if"],[""," ( "],["Operator","defined"],[""," ("],["Statement","my"],[""," "],["Identifier","$result"],[""," = "],["Identifier","$filter"],["","->("],["Identifier","$item"],["",", "],["Identifier","$p"],["",")) ) {\n                "],["Identifier","$string"],[""," .= "],["Identifier","$result"],["",";\n                "],["Identifier","$found"],[""," = "],["Number","1"],["",";\n                "],["Statement","last"],["",";\n            }\n        }\n    }\n    \n    "],["Conditional","if"],[""," ( "],["Operator","not"],[""," "],["Identifier","$found"],[""," ) {\n        "],["Comment","# if it's not a class and not a known core type, we must be in"],["","\n        "],["Comment","# a future perl with some type we're unaware of"],["","\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$filter"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$p->{"],["String","filters"],["Identifier","}->{"],["String","'-unknown'"],["Identifier","}"],[""," "],["Identifier","}"],[""," ) {\n            "],["Conditional","if"],[""," ( "],["Operator","defined"],[""," ("],["Statement","my"],[""," "],["Identifier","$result"],[""," = "],["Identifier","$filter"],["","->("],["Identifier","$item"],["",", "],["Identifier","$p"],["",")) ) {\n                "],["Identifier","$string"],[""," .= "],["Identifier","$result"],["",";\n                "],["Statement","last"],["",";\n            }\n        }\n    }\n\n    "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","show_tied"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," ) {\n        "],["Identifier","$string"],[""," .= "],["String","' (tied to '"],[""," . "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," . "],["String","')'"],["",";\n        "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," = "],["String","''"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n\n"],["Comment","######################################"],["","\n"],["Comment","## Default filters"],["","\n"],["Comment","######################################"],["","\n\n"],["Keyword","sub "],["Function","SCALAR "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Conditional","if"],[""," ("],["Operator","not"],[""," "],["Operator","defined"],[""," "],["Identifier","$$item"],["",") {\n        "],["Identifier","$string"],[""," .= colored("],["String","'undef'"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'undef'"],["Identifier","}"],["",");\n    }\n    "],["Conditional","elsif"],[""," (Scalar::Util::looks_like_number("],["Identifier","$$item"],["",")) {\n        "],["Identifier","$string"],[""," .= colored("],["Identifier","$$item"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'number'"],["Identifier","}"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","my"],[""," "],["Identifier","$val"],[""," = _escape_chars("],["Identifier","$$item"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}{"],["String","string"],["Identifier","}"],["",", "],["Identifier","$p"],["",");\n\n        "],["Identifier","$string"],[""," .= "],["String","q[\"]"],[""," . colored("],["Identifier","$val"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'string'"],["Identifier","}"],["",") . "],["String","q[\"]"],["",";\n    }\n\n    "],["Identifier","$string"],[""," .= "],["String","' '"],[""," . colored("],["String","'(TAINTED)'"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'tainted'"],["Identifier","}"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$p->{"],["String","show_tainted"],["Identifier","}"],[""," "],["Operator","and"],[""," Scalar::Util::tainted("],["Identifier","$$item"],["",");\n\n    "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," = "],["Operator","ref"],[""," "],["Statement","tied"],[""," "],["Identifier","$$item"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","show_readonly"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Identifier","&"],["Type","Internals::"],["Identifier","SvREADONLY"],["","( "],["Identifier","$item"],[""," )) {\n        "],["Identifier","$string"],[""," .= "],["String","' (read-only)'"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","_escape_chars "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$str"],["",", "],["Identifier","$orig_color"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$orig_color"],["","   = color( "],["Identifier","$orig_color"],[""," );\n    "],["Statement","my"],[""," "],["Identifier","$esc_color"],[""," = color( "],["Identifier","$p->{"],["String","color"],["Identifier","}{"],["String","escaped"],["Identifier","}"],[""," );\n\n    "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","print_escapes"],["Identifier","}"],["",") {\n        "],["Identifier","$str"],[""," =~ "],["Statement","s/"],["Special","\\e"],["Statement","/"],["Identifier","$esc_color"],["Special","\\\\"],["String","e"],["Identifier","$orig_color"],["Statement","/g"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","%escaped"],[""," = (\n            "],["String","\""],["Special","\\n"],["String","\""],[""," => "],["String","'\\n'"],["",",\n            "],["String","\""],["Special","\\r"],["String","\""],[""," => "],["String","'\\r'"],["",",\n            "],["String","\""],["Special","\\t"],["String","\""],[""," => "],["String","'\\t'"],["",",\n            "],["String","\""],["Special","\\f"],["String","\""],[""," => "],["String","'\\f'"],["",",\n            "],["String","\""],["Special","\\b"],["String","\""],[""," => "],["String","'\\b'"],["",",\n            "],["String","\""],["Special","\\a"],["String","\""],[""," => "],["String","'\\a'"],["",",\n        );\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$k"],[""," ( "],["Statement","keys"],[""," "],["Identifier","%escaped"],[""," ) {\n            "],["Identifier","$str"],[""," =~ "],["Statement","s/"],["Identifier","$k"],["Statement","/"],["Identifier","$esc_color$escaped{$k}$orig_color"],["Statement","/g"],["",";\n        }\n    }\n    "],["Comment","# always escape the null character"],["","\n    "],["Identifier","$str"],[""," =~ "],["Statement","s/"],["Special","\\0"],["Statement","/"],["Identifier","$esc_color"],["Special","\\\\"],["String","0"],["Identifier","$orig_color"],["Statement","/g"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$str"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","ARRAY "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n    "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],["","++;\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","max_depth"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],[""," > "],["Identifier","$p->{"],["String","max_depth"],["Identifier","}"],[""," ) {\n        "],["Identifier","$string"],[""," .= "],["String","'[ ... ]'"],["",";\n    }\n    "],["Conditional","elsif"],[""," ("],["Operator","not"],[""," "],["Identifier","@$item"],["",") {\n        "],["Identifier","$string"],[""," .= "],["String","'[]'"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$string"],[""," .= "],["String","\"["],["Identifier","$BREAK"],["String","\""],["",";\n        "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," += "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$i"],[""," ("],["Number","0"],[""," .. "],["Identifier","$#{$item}"],[""," ) {\n            "],["Identifier","$p->{"],["String","name"],["Identifier","}"],[""," .= "],["String","\"["],["Identifier","$i"],["String","]\""],["",";\n\n            "],["Statement","my"],[""," "],["Identifier","$array_elem"],[""," = "],["Identifier","$item->[$i]"],["",";\n            "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",");\n            "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","'index'"],["Identifier","}"],["",") {\n                "],["Identifier","$string"],[""," .= colored(\n                             "],["Statement","sprintf"],["","("],["String","\"%-*s\""],["",", "],["Number","3"],[""," + "],["Statement","length"],["","("],["Identifier","$#{$item}"],["","), "],["String","\"["],["Identifier","$i"],["String","]\""],["","),\n                             "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'array'"],["Identifier","}"],["","\n                       );\n            }\n\n            "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = "],["Operator","ref"],[""," "],["Identifier","$array_elem"],["",";\n\n            "],["Comment","# scalar references should be re-referenced"],["","\n            "],["Comment","# to gain a '\\' sign in front of them"],["","\n            "],["Conditional","if"],[""," (!"],["Identifier","$ref"],[""," "],["Operator","or"],[""," "],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["String","'SCALAR'"],["",") {\n                "],["Identifier","$string"],[""," .= _p( \\"],["Identifier","$array_elem"],["",", "],["Identifier","$p"],[""," );\n            }\n            "],["Conditional","else"],[""," {\n                "],["Identifier","$string"],[""," .= _p( "],["Identifier","$array_elem"],["",", "],["Identifier","$p"],[""," );\n            }\n            "],["Identifier","$string"],[""," .= "],["String","' '"],[""," . colored("],["String","'(weak)'"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'weak'"],["Identifier","}"],["",")\n                "],["Conditional","if"],[""," "],["Identifier","$ref"],[""," "],["Operator","and"],[""," Scalar::Util::isweak("],["Identifier","$item->[$i]"],["",") "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","show_weak"],["Identifier","}"],["",";\n\n            "],["Identifier","$string"],[""," .= "],["Identifier","$p->{"],["String","separator"],["Identifier","}"],["","\n              "],["Conditional","if"],[""," "],["Identifier","$i"],[""," < "],["Identifier","$#{$item}"],[""," || "],["Identifier","$p->{"],["String","end_separator"],["Identifier","}"],["",";\n\n            "],["Identifier","$string"],[""," .= "],["Identifier","$BREAK"],["",";\n\n            "],["Statement","my"],[""," "],["Identifier","$size"],[""," = "],["Number","2"],[""," + "],["Statement","length"],["","("],["Identifier","$i"],["","); "],["Comment","# [10], [100], etc"],["","\n            "],["Statement","substr"],[""," "],["Identifier","$p->{"],["String","name"],["Identifier","}"],["",", -"],["Identifier","$size"],["",", "],["Identifier","$size"],["",", "],["String","''"],["",";\n        }\n        "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," -= "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n        "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",") . "],["String","\"]\""],["",";\n    }\n\n    "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," = "],["Operator","ref"],[""," "],["Statement","tied"],[""," "],["Identifier","@$item"],["",";\n    "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],["","--;\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","REF "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Comment","# look-ahead, add a '\\' only if it's not an object"],["","\n    "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$ref_ahead"],[""," = "],["Operator","ref"],[""," "],["Identifier","$$item"],[""," ) {\n        "],["Identifier","$string"],[""," .= "],["String","'"],["Special","\\\\"],["String"," '"],[""," "],["Conditional","if"],[""," "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," "],["Operator","eq"],[""," "],["Identifier","$ref_ahead"],[""," "],["Statement","}"],["","\n            "],["String","qw(SCALAR CODE Regexp ARRAY HASH GLOB REF)"],["",";\n    }\n    "],["Identifier","$string"],[""," .= _p("],["Identifier","$$item"],["",", "],["Identifier","$p"],["",");\n\n    "],["Identifier","$string"],[""," .= "],["String","' '"],[""," . colored("],["String","'(weak)'"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'weak'"],["Identifier","}"],["",")\n        "],["Conditional","if"],[""," Scalar::Util::isweak("],["Identifier","$$item"],["",") "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","show_weak"],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","CODE "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["String","'sub { ... }'"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","deparse"],["Identifier","}"],["",") {\n        "],["Identifier","$code"],[""," = _deparse( "],["Identifier","$item"],["",", "],["Identifier","$p"],[""," );\n    }\n    "],["Identifier","$string"],[""," .= colored("],["Identifier","$code"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'code'"],["Identifier","}"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","HASH "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],["","++;\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","max_depth"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],[""," > "],["Identifier","$p->{"],["String","max_depth"],["Identifier","}"],[""," ) {\n        "],["Identifier","$string"],[""," .= "],["String","'{ ... }'"],["",";\n    }\n    "],["Conditional","elsif"],[""," ("],["Operator","not"],[""," "],["Statement","keys"],[""," "],["Identifier","%$item"],["",") {\n        "],["Identifier","$string"],[""," .= "],["String","'{}'"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$string"],[""," .= "],["String","\"{"],["Identifier","$BREAK"],["String","\""],["",";\n        "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," += "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$total_keys"],["","  = "],["Statement","scalar"],[""," "],["Statement","keys"],[""," "],["Identifier","%$item"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$len"],["","         = "],["Number","0"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$multiline"],["","   = "],["Identifier","$p->{"],["String","multiline"],["Identifier","}"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$hash_color"],["","  = "],["Identifier","$p->{"],["String","color"],["Identifier","}{"],["String","hash"],["Identifier","}"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$quote_keys"],["","  = "],["Identifier","$p->{"],["String","quote_keys"],["Identifier","}"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","@keys"],[""," = ();\n\n        "],["Comment","# first pass, preparing keys to display (and getting largest key size)"],["","\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$key"],[""," ("],["Identifier","$p->{"],["String","sort_keys"],["Identifier","}"],[""," ? nsort "],["Statement","keys"],[""," "],["Identifier","%$item"],[""," : "],["Statement","keys"],[""," "],["Identifier","%$item"],[""," ) {\n            "],["Statement","my"],[""," "],["Identifier","$new_key"],[""," = _escape_chars("],["Identifier","$key"],["",", "],["Identifier","$hash_color"],["",", "],["Identifier","$p"],["",");\n            "],["Statement","my"],[""," "],["Identifier","$colored"],[""," = colored( "],["Identifier","$new_key"],["",", "],["Identifier","$hash_color"],[""," );\n\n            "],["Comment","# wrap in uncolored single quotes if there's"],["","\n            "],["Comment","# any space or escaped characters"],["","\n            "],["Conditional","if"],[""," ( "],["Identifier","$quote_keys"],["","\n                  "],["Operator","and"],[""," (\n                        "],["Identifier","$quote_keys"],[""," "],["Operator","ne"],[""," "],["String","'auto'"],["","\n                        "],["Operator","or"],[""," (\n                             "],["Identifier","$key"],[""," "],["Operator","eq"],[""," "],["String","q()"],["","\n                             "],["Operator","or"],[""," "],["Identifier","$new_key"],[""," "],["Operator","ne"],[""," "],["Identifier","$key"],["","\n                             "],["Operator","or"],[""," "],["Identifier","$new_key"],[""," =~ "],["Statement","/"],["Special","\\s"],["String","|"],["Special","\\n"],["String","|"],["Special","\\t"],["String","|"],["Special","\\r"],["Statement","/"],["","\n                        )\n                  )\n            ) {\n                "],["Identifier","$colored"],[""," = "],["String","qq['"],["Identifier","$colored"],["String","']"],["",";\n            }\n\n            "],["Statement","push"],[""," "],["Identifier","@keys"],["",", {\n                "],["String","raw"],["","     => "],["Identifier","$key"],["",",\n                "],["String","colored"],[""," => "],["Identifier","$colored"],["",",\n            };\n\n            "],["Comment","# length of the largest key is used for indenting"],["","\n            "],["Conditional","if"],[""," ("],["Identifier","$multiline"],["",") {\n                "],["Statement","my"],[""," "],["Identifier","$l"],[""," = "],["Statement","length"],[""," "],["Identifier","$colored"],["",";\n                "],["Identifier","$len"],[""," = "],["Identifier","$l"],[""," "],["Conditional","if"],[""," "],["Identifier","$l"],[""," > "],["Identifier","$len"],["",";\n            }\n        }\n\n        "],["Comment","# second pass, traversing and rendering"],["","\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$key"],[""," ("],["Identifier","@keys"],["",") {\n            "],["Statement","my"],[""," "],["Identifier","$raw_key"],["","     = "],["Identifier","$key->{"],["String","raw"],["Identifier","}"],["",";\n            "],["Statement","my"],[""," "],["Identifier","$colored_key"],[""," = "],["Identifier","$key->{"],["String","colored"],["Identifier","}"],["",";\n            "],["Statement","my"],[""," "],["Identifier","$element"],["","     = "],["Identifier","$item->{$raw_key}"],["",";\n            "],["Identifier","$p->{"],["String","name"],["Identifier","}"],["","     .= "],["String","\"{"],["Identifier","$raw_key"],["String","}\""],["",";\n\n            "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",")\n                     . "],["Statement","sprintf"],["","("],["String","\"%-*s\""],["",", "],["Identifier","$len"],["",", "],["Identifier","$colored_key"],["",")\n                     . "],["Identifier","$p->{"],["String","hash_separator"],["Identifier","}"],["","\n                     ;\n\n            "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = "],["Operator","ref"],[""," "],["Identifier","$element"],["",";\n            "],["Comment","# scalar references should be re-referenced"],["","\n            "],["Comment","# to gain a '\\' sign in front of them"],["","\n            "],["Conditional","if"],[""," (!"],["Identifier","$ref"],[""," "],["Operator","or"],[""," "],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["String","'SCALAR'"],["",") {\n                "],["Identifier","$string"],[""," .= _p( \\"],["Identifier","$element"],["",", "],["Identifier","$p"],[""," );\n            }\n            "],["Conditional","else"],[""," {\n                "],["Identifier","$string"],[""," .= _p( "],["Identifier","$element"],["",", "],["Identifier","$p"],[""," );\n            }\n\n            "],["Identifier","$string"],[""," .= "],["String","' '"],[""," . colored("],["String","'(weak)'"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'weak'"],["Identifier","}"],["",")\n                "],["Conditional","if"],[""," "],["Identifier","$ref"],["","\n                  "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","show_weak"],["Identifier","}"],["","\n                  "],["Operator","and"],[""," Scalar::Util::isweak("],["Identifier","$item->{$raw_key}"],["",");\n\n            "],["Identifier","$string"],[""," .= "],["Identifier","$p->{"],["String","separator"],["Identifier","}"],["","\n              "],["Conditional","if"],[""," --"],["Identifier","$total_keys"],[""," > "],["Number","0"],[""," || "],["Identifier","$p->{"],["String","end_separator"],["Identifier","}"],["",";\n\n            "],["Identifier","$string"],[""," .= "],["Identifier","$BREAK"],["",";\n\n            "],["Statement","my"],[""," "],["Identifier","$size"],[""," = "],["Number","2"],[""," + "],["Statement","length"],["","("],["Identifier","$raw_key"],["","); "],["Comment","# {foo}, {z}, etc"],["","\n            "],["Statement","substr"],[""," "],["Identifier","$p->{"],["String","name"],["Identifier","}"],["",", -"],["Identifier","$size"],["",", "],["Identifier","$size"],["",", "],["String","''"],["",";\n        }\n        "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," -= "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n        "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",") . "],["String","\"}\""],["",";\n    }\n\n    "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," = "],["Operator","ref"],[""," "],["Statement","tied"],[""," "],["Identifier","%$item"],["",";\n    "],["Identifier","$p->{"],["String","_depth"],["Identifier","}"],["","--;\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","Regexp "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$val"],[""," = "],["String","\""],["Identifier","$item"],["String","\""],["",";\n    "],["Comment","# a regex to parse a regex. Talk about full circle :)"],["","\n    "],["Comment","# note: we are not validating anything, just grabbing modifiers"],["","\n    "],["Conditional","if"],[""," ("],["Identifier","$val"],[""," =~ "],["Statement","m/"],["Special","\\(\\?\\^?([uladxismpogce]*)(?:\\-[uladxismpogce]+)?"],["String",":"],["Special","(.*)\\)"],["Statement","/s"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$modifiers"],["",", "],["Identifier","$val"],["",") = ("],["Identifier","$1"],["",", "],["Identifier","$2"],["",");\n        "],["Identifier","$string"],[""," .= colored("],["Identifier","$val"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'regex'"],["Identifier","}"],["",");\n        "],["Conditional","if"],[""," ("],["Identifier","$modifiers"],["",") {\n            "],["Identifier","$string"],[""," .= "],["String","\"  (modifiers: "],["Identifier","$modifiers"],["String",")\""],["",";\n        }\n    }\n    "],["Conditional","else"],[""," {\n        croak "],["String","\"Unrecognized regex "],["Identifier","$val"],["String",". Please submit a bug report for Data::Printer.\""],["",";\n    }\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","VSTRING "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n    "],["Identifier","$string"],[""," .= colored(version->declare("],["Identifier","$$item"],["",")->normal, "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'vstring'"],["Identifier","}"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","FORMAT "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n    "],["Identifier","$string"],[""," .= colored("],["String","\"FORMAT\""],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'format'"],["Identifier","}"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","LVALUE "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = SCALAR( "],["Identifier","$item"],["",", "],["Identifier","$p"],[""," );\n    "],["Identifier","$string"],[""," .= colored( "],["String","' (LVALUE)'"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}{"],["String","lvalue"],["Identifier","}"],[""," )\n        "],["Conditional","if"],[""," "],["Identifier","$p->{"],["String","show_lvalue"],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","GLOB "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n\n    "],["Identifier","$string"],[""," .= colored("],["String","\""],["Identifier","$$item"],["String","\""],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'glob'"],["Identifier","}"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$extra"],[""," = "],["String","''"],["",";\n\n    "],["Comment","# unfortunately, some systems (like Win32) do not"],["","\n    "],["Comment","# implement some of these flags (maybe not even"],["","\n    "],["Comment","# fcntl() itself, so we must wrap it."],["","\n    "],["Statement","my"],[""," "],["Identifier","$flags"],["",";\n    "],["Statement","eval"],[""," { "],["Statement","no warnings"],[""," "],["String","qw( unopened closed )"],["","; "],["Identifier","$flags"],[""," = "],["Statement","fcntl"],["","("],["Identifier","$$item"],["",", F_GETFL, "],["Number","0"],["",") };\n    "],["Conditional","if"],[""," ("],["Identifier","$flags"],["",") {\n        "],["Identifier","$extra"],[""," .= ("],["Identifier","$flags"],[""," & O_WRONLY) ? "],["String","'write-only'"],["","\n                : ("],["Identifier","$flags"],[""," & O_RDWR)   ? "],["String","'read/write'"],["","\n                : "],["String","'read-only'"],["","\n                ;\n\n        "],["Comment","# How to avoid croaking when the system"],["","\n        "],["Comment","# doesn't implement one of those, without skipping"],["","\n        "],["Comment","# the whole thing? Maybe there's a better way."],["","\n        "],["Comment","# Solaris, for example, doesn't have O_ASYNC :("],["","\n        "],["Statement","my"],[""," "],["Identifier","%flags"],[""," = ();\n        "],["Statement","eval"],[""," { "],["Identifier","$flags{"],["String","'append'"],["Identifier","}"],["","      = O_APPEND   };\n        "],["Statement","eval"],[""," { "],["Identifier","$flags{"],["String","'async'"],["Identifier","}"],["","       = O_ASYNC    }; "],["Comment","# leont says this is the only one I should care for."],["","\n        "],["Statement","eval"],[""," { "],["Identifier","$flags{"],["String","'create'"],["Identifier","}"],["","      = O_CREAT    };\n        "],["Statement","eval"],[""," { "],["Identifier","$flags{"],["String","'truncate'"],["Identifier","}"],["","    = O_TRUNC    };\n        "],["Statement","eval"],[""," { "],["Identifier","$flags{"],["String","'nonblocking'"],["Identifier","}"],[""," = O_NONBLOCK };\n\n        "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","@flags"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$flags"],[""," & "],["Identifier","$flags{$_}"],[""," "],["Statement","}"],[""," "],["Statement","keys"],[""," "],["Identifier","%flags"],["",") {\n            "],["Identifier","$extra"],[""," .= "],["String","\", flags: "],["Identifier","@flags"],["String","\""],["",";\n        }\n        "],["Identifier","$extra"],[""," .= "],["String","', '"],["",";\n    }\n    "],["Statement","my"],[""," "],["Identifier","@layers"],[""," = ();\n    "],["Statement","eval"],[""," { "],["Identifier","@layers"],[""," = PerlIO::get_layers "],["Identifier","$$item"],[""," }; "],["Comment","# "],["Todo","TODO:"],["Comment"," try PerlIO::Layers::get_layers (leont)"],["","\n    "],["Conditional","unless"],[""," ("],["Identifier","$@"],["",") {\n        "],["Identifier","$extra"],[""," .= "],["String","\"layers: "],["Identifier","@layers"],["String","\""],["",";\n    }\n    "],["Identifier","$string"],[""," .= "],["String","\"  ("],["Identifier","$extra"],["String",")\""],[""," "],["Conditional","if"],[""," "],["Identifier","$extra"],["",";\n\n    "],["Identifier","$p->{"],["String","_tie"],["Identifier","}"],[""," = "],["Operator","ref"],[""," "],["Statement","tied"],[""," *"],["Identifier","$$item"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","_unknown "],["","{\n    "],["Statement","my"],["","("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = "],["Operator","ref"],[""," "],["Identifier","$item"],["",";\n    \n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n    "],["Identifier","$string"],[""," = colored("],["Identifier","$ref"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'unknown'"],["Identifier","}"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","_class "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = "],["Operator","ref"],[""," "],["Identifier","$item"],["",";\n\n    "],["Comment","# if the user specified a method to use instead, we do that"],["","\n    "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","class_method"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$item"],["","->can("],["Identifier","$p->{"],["String","class_method"],["Identifier","}"],["",") ) {\n        "],["Statement","return"],[""," "],["Identifier","$method"],["","->("],["Identifier","$item"],["",", "],["Identifier","$p"],["",");\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n    "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","_depth"],["Identifier","}"],["","++;\n\n    "],["Identifier","$string"],[""," .= colored("],["Identifier","$ref"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'class'"],["Identifier","}"],["",");\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","show_reftype"],["Identifier","}"],[""," ) {\n        "],["Identifier","$string"],[""," .= "],["String","' ('"],[""," . colored(\n            Scalar::Util::reftype("],["Identifier","$item"],["","),\n            "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'class'"],["Identifier","}"],["","\n        ) . "],["String","')'"],["",";\n    }\n\n    "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","expand"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'all'"],["","\n        "],["Operator","or"],[""," "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","expand"],["Identifier","}"],[""," >= "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","_depth"],["Identifier","}"],["","\n    ) {\n        "],["Identifier","$string"],[""," .= "],["String","\"  {"],["Identifier","$BREAK"],["String","\""],["",";\n\n        "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," += "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n\n        "],["Conditional","if"],[""," ("],["Identifier","$]"],[""," >= "],["Float","5.010"],["",") {\n            "],["Statement","require"],[""," mro;\n        } "],["Conditional","else"],[""," {\n            "],["Statement","require"],[""," MRO::Compat;\n        }\n        "],["Statement","require"],[""," Package::Stash;\n\n        "],["Statement","my"],[""," "],["Identifier","$stash"],[""," = Package::Stash->new("],["Identifier","$ref"],["",");\n\n        "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","@superclasses"],[""," = "],["Identifier","@{$stash"],["","->get_symbol("],["String","'@ISA'"],["",")||[]"],["Identifier","}"],[""," ) {\n            "],["Conditional","if"],[""," ("],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","parents"],["Identifier","}"],["",") {\n                "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",")\n                        . "],["String","'Parents       '"],["","\n                        . "],["Statement","join"],["","("],["String","', '"],["",", "],["Statement","map"],[""," "],["Statement","{"],[""," colored("],["Identifier","$_"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'class'"],["Identifier","}"],["",") "],["Statement","}"],["","\n                                     "],["Identifier","@superclasses"],["","\n                        ) . "],["Identifier","$BREAK"],["",";\n            }\n\n            "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","linear_isa"],["Identifier","}"],[""," "],["Operator","and"],["","\n                  (\n                    ("],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","linear_isa"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'auto'"],[""," "],["Operator","and"],[""," "],["Identifier","@superclasses"],[""," > "],["Number","1"],["",")\n                    "],["Operator","or"],["","\n                    ("],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","linear_isa"],["Identifier","}"],[""," "],["Operator","ne"],[""," "],["String","'auto'"],["",")\n                  )\n            ) {\n                "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",")\n                        . "],["String","'Linear @ISA   '"],["","\n                        . "],["Statement","join"],["","("],["String","', '"],["",", "],["Statement","map"],[""," "],["Statement","{"],[""," colored( "],["Identifier","$_"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","'class'"],["Identifier","}"],["",") "],["Statement","}"],["","\n                                  "],["Identifier","@{"],["","mro::get_linear_isa("],["Identifier","$ref"],["",")"],["Identifier","}"],["","\n                        ) . "],["Identifier","$BREAK"],["",";\n            }\n        }\n\n        "],["Identifier","$string"],[""," .= _show_methods("],["Identifier","$ref"],["",", "],["Identifier","$p"],["",")\n            "],["Conditional","if"],[""," "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","show_methods"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","show_methods"],["Identifier","}"],[""," "],["Operator","ne"],[""," "],["String","'none'"],["",";\n\n        "],["Conditional","if"],[""," ( "],["Identifier","$p->{"],["String","'class'"],["Identifier","}->{"],["String","'internals'"],["Identifier","}"],[""," ) {\n            "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",")\n                    . "],["String","'internals: '"],["",";\n\n            "],["Statement","local"],[""," "],["Identifier","$p->{"],["String","_reftype"],["Identifier","}"],[""," = Scalar::Util::reftype "],["Identifier","$item"],["",";\n            "],["Identifier","$string"],[""," .= _p("],["Identifier","$item"],["",", "],["Identifier","$p"],["",");\n            "],["Identifier","$string"],[""," .= "],["Identifier","$BREAK"],["",";\n        }\n\n        "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," -= "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n        "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",") . "],["String","\"}\""],["",";\n    }\n    "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","_depth"],["Identifier","}"],["","--;\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n\n\n"],["Comment","######################################"],["","\n"],["Comment","## Auxiliary (internal) subs"],["","\n"],["Comment","######################################"],["","\n\n"],["Comment","# All glory to Vincent Pit for coming up with this implementation,"],["","\n"],["Comment","# to Goro Fuji for Hash::FieldHash, and of course to Michael Schwern"],["","\n"],["Comment","# and his \"Object::ID\", whose code is copied almost verbatim below."],["","\n{\n    fieldhash "],["Statement","my"],[""," "],["Identifier","%IDs"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$Last_ID"],[""," = "],["String","\"a\""],["",";\n    "],["Keyword","sub "],["Function","_object_id "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n        "],["Comment","# This is 15% faster than ||="],["","\n        "],["Statement","return"],[""," "],["Identifier","$IDs{$self}"],[""," "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$IDs{$self}"],["",";\n        "],["Statement","return"],[""," "],["Identifier","$IDs{$self}"],[""," = ++"],["Identifier","$Last_ID"],["",";\n    }\n}\n\n\n"],["Keyword","sub "],["Function","_show_methods "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$ref"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$string"],[""," = "],["String","''"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$methods"],[""," = {\n        "],["String","public"],[""," => [],\n        "],["String","private"],[""," => [],\n    };\n    "],["Statement","my"],[""," "],["Identifier","$inherited"],[""," = "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","inherited"],["Identifier","}"],[""," || "],["String","'none'"],["",";\n\n    "],["Statement","require"],[""," B;\n\n    "],["Statement","my"],[""," "],["Identifier","$methods_of"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$name"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","map"],[""," "],["Statement","{"],["","\n            "],["Statement","my"],[""," "],["Identifier","$m"],["",";\n            "],["Conditional","if"],[""," ("],["Identifier","$_"],["","\n                "],["Operator","and"],[""," "],["Identifier","$m"],[""," = B::svref_2object("],["Identifier","$_"],["",")\n                "],["Operator","and"],[""," "],["Identifier","$m"],["","->isa("],["String","'B::CV'"],["",")\n                "],["Operator","and"],[""," "],["Operator","not"],[""," "],["Identifier","$m"],["","->GV->isa("],["String","'B::Special'"],["",")\n            ) {\n                [ "],["Identifier","$m"],["","->GV->STASH->NAME, "],["Identifier","$m"],["","->GV->NAME ]\n            } "],["Conditional","else"],[""," {\n                ()\n            }\n        "],["Statement","}"],[""," "],["Statement","values"],[""," "],["Identifier","%{"],["","Package::Stash->new("],["Identifier","$name"],["",")->get_all_symbols("],["String","'CODE'"],["",")"],["Identifier","}"],["","\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","%seen_method_name"],["",";\n\n"],["Label","METHOD:"],["","\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," (\n        "],["Statement","map"],[""," "],["Identifier","$methods_of"],["","->("],["Identifier","$_"],["","), "],["Identifier","@{"],["","mro::get_linear_isa("],["Identifier","$ref"],["",")"],["Identifier","}"],["",",\n                               "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","universal"],["Identifier","}"],[""," ? "],["String","'UNIVERSAL'"],[""," : ()\n    ) {\n        "],["Statement","my"],[""," ("],["Identifier","$package_string"],["",", "],["Identifier","$method_string"],["",") = "],["Identifier","@$method"],["",";\n\n        "],["Statement","next"],[""," METHOD "],["Conditional","if"],[""," "],["Identifier","$seen_method_name{$method_string}"],["","++;\n\n        "],["Statement","my"],[""," "],["Identifier","$type"],[""," = "],["Statement","substr"],["","("],["Identifier","$method_string"],["",", "],["Number","0"],["",", "],["Number","1"],["",") "],["Operator","eq"],[""," "],["String","'_'"],[""," ? "],["String","'private'"],[""," : "],["String","'public'"],["",";\n\n        "],["Conditional","if"],[""," ("],["Identifier","$package_string"],[""," "],["Operator","ne"],[""," "],["Identifier","$ref"],["",") {\n            "],["Statement","next"],[""," METHOD "],["Conditional","unless"],[""," "],["Identifier","$inherited"],[""," "],["Operator","ne"],[""," "],["String","'none'"],["","\n                           "],["Operator","and"],[""," ("],["Identifier","$inherited"],[""," "],["Operator","eq"],[""," "],["String","'all'"],[""," "],["Operator","or"],[""," "],["Identifier","$type"],[""," "],["Operator","eq"],[""," "],["Identifier","$inherited"],["",");\n            "],["Identifier","$method_string"],[""," .= "],["String","' ('"],[""," . "],["Identifier","$package_string"],[""," . "],["String","')'"],["",";\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@{"],[""," "],["Identifier","$methods->{$type}"],[""," "],["Identifier","}"],["",", "],["Identifier","$method_string"],["",";\n    }\n\n    "],["Comment","# render our string doing a natural sort by method name"],["","\n    "],["Statement","my"],[""," "],["Identifier","$show_methods"],[""," = "],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","show_methods"],["Identifier","}"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$type"],[""," ("],["String","qw(public private)"],["",") {\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Identifier","$show_methods"],[""," "],["Operator","eq"],[""," "],["String","'all'"],["","\n                 "],["Operator","or"],[""," "],["Identifier","$show_methods"],[""," "],["Operator","eq"],[""," "],["Identifier","$type"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","@list"],[""," = ("],["Identifier","$p->{"],["String","class"],["Identifier","}{"],["String","sort_methods"],["Identifier","}"],[""," ? nsort "],["Identifier","@{$methods->{$type}}"],[""," : "],["Identifier","@{$methods->{$type}}"],["",");\n\n        "],["Identifier","$string"],[""," .= ("],["String","' '"],[""," x "],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],["",")\n                 . "],["String","\""],["Identifier","$type"],["String"," methods (\""],[""," . "],["Statement","scalar"],[""," "],["Identifier","@list"],[""," . "],["String","')'"],["","\n                 . ("],["Identifier","@list"],[""," ? "],["String","' : '"],[""," : "],["String","''"],["",")\n                 . "],["Statement","join"],["","("],["String","', '"],["",", "],["Statement","map"],[""," "],["Statement","{"],[""," colored("],["Identifier","$_"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}->{"],["String","method"],["Identifier","}"],["",") "],["Statement","}"],["","\n                              "],["Identifier","@list"],["","\n                   ) . "],["Identifier","$BREAK"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$string"],["",";\n}\n\n"],["Keyword","sub "],["Function","_deparse "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","require"],[""," B::Deparse;\n    "],["Statement","my"],[""," "],["Identifier","$i"],[""," = "],["Identifier","$p->{"],["String","indent"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$deparseopts"],[""," = ["],["String","\"-sCi"],["Identifier","${i}"],["String","v'Useless const omitted'\""],["","];\n\n    "],["Statement","my"],[""," "],["Identifier","$sub"],[""," = "],["String","'sub '"],[""," . B::Deparse->new("],["Identifier","$deparseopts"],["",")->coderef2text("],["Identifier","$item"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$pad"],[""," = "],["String","\""],["Special","\\n"],["String","\""],[""," . ("],["String","' '"],[""," x ("],["Identifier","$p->{"],["String","_current_indent"],["Identifier","}"],[""," + "],["Identifier","$i"],["","));\n    "],["Identifier","$sub"],["","    =~ "],["Statement","s/"],["Special","\\n"],["Statement","/"],["Identifier","$pad"],["Statement","/gse"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$sub"],["",";\n}\n\n"],["Keyword","sub "],["Function","_get_info_message "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$p"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@caller"],[""," = "],["Statement","caller"],[""," "],["Number","2"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$message"],[""," = "],["Identifier","$p->{"],["String","caller_message"],["Identifier","}"],["",";\n\n    "],["Identifier","$message"],[""," =~ "],["Statement","s/"],["Special","\\b"],["String","__PACKAGE__"],["Special","\\b"],["Statement","/"],["Identifier","$caller["],["Number","0"],["Identifier","]"],["Statement","/g"],["",";\n    "],["Identifier","$message"],[""," =~ "],["Statement","s/"],["Special","\\b"],["String","__FILENAME__"],["Special","\\b"],["Statement","/"],["Identifier","$caller["],["Number","1"],["Identifier","]"],["Statement","/g"],["",";\n    "],["Identifier","$message"],[""," =~ "],["Statement","s/"],["Special","\\b"],["String","__LINE__"],["Special","\\b"],["Statement","/"],["Identifier","$caller["],["Number","2"],["Identifier","]"],["Statement","/g"],["",";\n\n    "],["Statement","return"],[""," colored("],["Identifier","$message"],["",", "],["Identifier","$p->{"],["String","color"],["Identifier","}{"],["String","caller_info"],["Identifier","}"],["",") . "],["Identifier","$BREAK"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","_merge "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$p"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$clone"],[""," = clone "],["Identifier","$properties"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$p"],["",") {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$key"],[""," ("],["Statement","keys"],[""," "],["Identifier","%$p"],["",") {\n            "],["Conditional","if"],[""," ("],["Identifier","$key"],[""," "],["Operator","eq"],[""," "],["String","'color'"],[""," "],["Operator","or"],[""," "],["Identifier","$key"],[""," "],["Operator","eq"],[""," "],["String","'colour'"],["",") {\n                "],["Statement","my"],[""," "],["Identifier","$color"],[""," = "],["Identifier","$p->{$key}"],["",";\n                "],["Conditional","if"],[""," ( "],["Operator","not"],[""," "],["Operator","ref"],[""," "],["Identifier","$color"],[""," "],["Operator","or"],[""," "],["Operator","ref"],[""," "],["Identifier","$color"],[""," "],["Operator","ne"],[""," "],["String","'HASH'"],[""," ) {\n                    Carp::carp "],["String","q['color' should be a HASH reference. Did you mean 'colored'?]"],["",";\n                    "],["Identifier","$clone->{"],["String","color"],["Identifier","}"],[""," = {};\n                }\n                "],["Conditional","else"],[""," {\n                    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$target"],[""," ( "],["Statement","keys"],[""," "],["Identifier","%$color"],[""," ) {\n                        "],["Identifier","$clone->{"],["String","color"],["Identifier","}->{$target}"],[""," = "],["Identifier","$p->{$key}->{$target}"],["",";\n                    }\n                }\n            }\n            "],["Conditional","elsif"],[""," ("],["Identifier","$key"],[""," "],["Operator","eq"],[""," "],["String","'class'"],["",") {\n                "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$item"],[""," ( "],["Statement","keys"],[""," "],["Identifier","%{$p->{"],["String","class"],["Identifier","}}"],[""," ) {\n                    "],["Identifier","$clone->{"],["String","class"],["Identifier","}->{$item}"],[""," = "],["Identifier","$p->{"],["String","class"],["Identifier","}->{$item}"],["",";\n                }\n            }\n            "],["Conditional","elsif"],[""," ("],["Identifier","$key"],[""," "],["Operator","eq"],[""," "],["String","'filters'"],["",") {\n                "],["Statement","my"],[""," "],["Identifier","$val"],[""," = "],["Identifier","$p->{$key}"],["",";\n\n                "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$item"],[""," ("],["Statement","keys"],[""," "],["Identifier","%$val"],["",") {\n                    "],["Statement","my"],[""," "],["Identifier","$filters"],[""," = "],["Identifier","$val->{$item}"],["",";\n\n                    "],["Comment","# EXPERIMENTAL: filters in modules"],["","\n                    "],["Conditional","if"],[""," ("],["Identifier","$item"],[""," "],["Operator","eq"],[""," "],["String","'-external'"],["",") {\n                        "],["Statement","my"],[""," "],["Identifier","@external"],[""," = ( "],["Operator","ref"],["","("],["Identifier","$filters"],["",") ? "],["Identifier","@$filters"],[""," : ("],["Identifier","$filters"],["",") );\n\n                        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ( "],["Identifier","@external"],[""," ) {\n                            "],["Statement","my"],[""," "],["Identifier","$module"],[""," = "],["String","\"Data::Printer::Filter::"],["Identifier","$class"],["String","\""],["",";\n                            "],["Statement","eval"],[""," "],["String","\"use "],["Identifier","$module"],["String","\""],["",";\n                            "],["Conditional","if"],[""," ("],["Identifier","$@"],["",") {\n                                "],["Statement","warn"],[""," "],["String","\"Error loading filter '"],["Identifier","$module"],["String","': "],["Identifier","$@"],["String","\""],["",";\n                            }\n                            "],["Conditional","else"],[""," {\n                                "],["Statement","my"],[""," "],["Identifier","%from_module"],[""," = "],["Identifier","%{$module"],["","->_filter_list"],["Identifier","}"],["",";\n                                "],["Statement","my"],[""," "],["Identifier","%extras"],["","      = "],["Identifier","%{$module"],["","->_extra_options"],["Identifier","}"],["",";\n\n                                "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$k"],[""," ("],["Statement","keys"],[""," "],["Identifier","%from_module"],["",") {\n                                    "],["Statement","unshift"],[""," "],["Identifier","@{"],[""," "],["Identifier","$clone->{"],["String","filters"],["Identifier","}->{$k}"],[""," "],["Identifier","}"],["",", "],["Identifier","@{"],[""," "],["Identifier","$from_module{$k}"],[""," "],["Identifier","}"],["",";\n                                    "],["Identifier","$clone->{"],["String","_seen_override"],["Identifier","}{$k}"],[""," = "],["Number","1"],["","\n                                        "],["Conditional","if"],[""," "],["Identifier","$extras{$k}{"],["String","show_repeated"],["Identifier","}"],["",";\n                                }\n                            }\n                        }\n                    }\n                    "],["Conditional","else"],[""," {\n                        "],["Statement","my"],[""," "],["Identifier","@filter_list"],[""," = ( "],["Operator","ref"],[""," "],["Identifier","$filters"],[""," "],["Operator","eq"],[""," "],["String","'CODE'"],[""," ? ( "],["Identifier","$filters"],[""," ) : "],["Identifier","@$filters"],[""," );\n                        "],["Statement","unshift"],[""," "],["Identifier","@{"],[""," "],["Identifier","$clone->{"],["String","filters"],["Identifier","}->{$item}"],[""," "],["Identifier","}"],["",", "],["Identifier","@filter_list"],["",";\n                    }\n                }\n            }\n            "],["Conditional","elsif"],[""," ("],["Identifier","$key"],[""," "],["Operator","eq"],[""," "],["String","'output'"],["",") {\n                "],["Statement","my"],[""," "],["Identifier","$out"],[""," = "],["Identifier","$p->{"],["String","output"],["Identifier","}"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$ref"],[""," = "],["Operator","ref"],[""," "],["Identifier","$out"],["",";\n\n                "],["Identifier","$clone->{"],["String","output"],["Identifier","}"],[""," = "],["Identifier","$out"],["",";\n\n                "],["Statement","my"],[""," "],["Identifier","%output_target"],[""," = (\n                     "],["String","stdout"],[""," => *STDOUT,\n                     "],["String","stderr"],[""," => *STDERR,\n                );\n\n                "],["Statement","my"],[""," "],["Identifier","$error"],["",";\n                "],["Conditional","if"],[""," (!"],["Identifier","$ref"],[""," "],["Operator","and"],[""," "],["Statement","exists"],[""," "],["Identifier","$output_target{"],[""," "],["Statement","lc"],[""," "],["Identifier","$out"],[""," "],["Identifier","}"],["",") {\n                    "],["Identifier","$clone->{"],["String","_output"],["Identifier","}"],[""," = "],["Identifier","$output_target{"],[""," "],["Statement","lc"],[""," "],["Identifier","$out"],[""," "],["Identifier","}"],["",";\n                }\n                "],["Conditional","elsif"],[""," ( ( "],["Identifier","$ref"],[""," "],["Operator","and"],[""," "],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["String","'GLOB'"],["",")\n                     "],["Operator","or"],[""," (!"],["Identifier","$ref"],[""," "],["Operator","and"],[""," \\"],["Identifier","$out"],[""," =~ "],["Statement","/"],["String","GLOB"],["Special","\\([^()]+\\)"],["String","$"],["Statement","/"],["",")\n                ) {\n                    "],["Identifier","$clone->{"],["String","_output"],["Identifier","}"],[""," = "],["Identifier","$out"],["",";\n                }\n                "],["Conditional","elsif"],[""," ( !"],["Identifier","$ref"],[""," "],["Operator","or"],[""," "],["Identifier","$ref"],[""," "],["Operator","eq"],[""," "],["String","'SCALAR'"],[""," ) {\n                    "],["Conditional","if"],["","( "],["Statement","open"],[""," "],["Statement","my"],[""," "],["Identifier","$fh"],["",", "],["String","'>>'"],["",", "],["Identifier","$out"],[""," ) {\n                        "],["Identifier","$clone->{"],["String","_output"],["Identifier","}"],[""," = "],["Identifier","$fh"],["",";\n                    }\n                    "],["Conditional","else"],[""," {\n                        "],["Identifier","$error"],[""," = "],["Number","1"],["",";\n                    }\n                }\n                "],["Conditional","else"],[""," {\n                    "],["Identifier","$error"],[""," = "],["Number","1"],["",";\n                }\n\n                "],["Conditional","if"],[""," ("],["Identifier","$error"],["",") {\n                    Carp::carp "],["String","'Error opening custom output handle.'"],["",";\n                    "],["Identifier","$clone->{"],["String","_output"],["Identifier","}"],[""," = "],["Identifier","$output_target{"],[""," "],["String","'stderr'"],[""," "],["Identifier","}"],["",";\n                }\n            }\n            "],["Conditional","else"],[""," {\n                "],["Identifier","$clone->{$key}"],[""," = "],["Identifier","$p->{$key}"],["",";\n            }\n        }\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$clone"],["",";\n}\n\n\n"],["Keyword","sub "],["Function","_load_rc_file "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$args"],[""," = "],["Statement","shift"],[""," || {};\n\n    "],["Statement","my"],[""," "],["Identifier","$file"],[""," = "],["Statement","exists"],[""," "],["Identifier","$args->{"],["String","rc_file"],["Identifier","}"],["","    ? "],["Identifier","$args->{"],["String","rc_file"],["Identifier","}"],["","\n             : "],["Statement","exists"],[""," "],["Identifier","$ENV{"],["String","DATAPRINTERRC"],["Identifier","}"],[""," ? "],["Identifier","$ENV{"],["String","DATAPRINTERRC"],["Identifier","}"],["","\n             : File::Spec->catfile(File::HomeDir->my_home,"],["String","'.dataprinter'"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Statement","-e"],[""," "],["Identifier","$file"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mode"],[""," = ("],["Statement","stat"],[""," "],["Identifier","$file"],[""," )["],["Number","2"],["","];\n    "],["Conditional","if"],[""," ("],["Identifier","$^O"],[""," !~ "],["Statement","/"],["String","Win32"],["Statement","/i"],[""," && ("],["Identifier","$mode"],[""," & "],["Number","0020"],[""," || "],["Identifier","$mode"],[""," & "],["Number","0002"],["",") ) {\n        "],["Statement","warn"],[""," "],["String","\"rc file '"],["Identifier","$file"],["String","' must NOT be writeable to other users. Skipping."],["Special","\\n"],["String","\""],["",";\n        "],["Statement","return"],["",";\n    }\n\n    "],["Conditional","if"],[""," ( "],["Statement","-l"],[""," "],["Identifier","$file"],[""," || (!"],["Statement","-f"],[""," _) || "],["Statement","-p"],[""," _ || "],["Statement","-S"],[""," _ || "],["Statement","-b"],[""," _ || "],["Statement","-c"],[""," _ ) {\n        "],["Statement","warn"],[""," "],["String","\"rc file '"],["Identifier","$file"],["String","' doesn't look like a plain file. Skipping."],["Special","\\n"],["String","\""],["",";\n        "],["Statement","return"],["",";\n    }\n\n    "],["Conditional","unless"],[""," ("],["Statement","-o"],[""," "],["Identifier","$file"],["",") {\n        "],["Statement","warn"],[""," "],["String","\"rc file '"],["Identifier","$file"],["String","' must be owned by your (effective) user. Skipping."],["Special","\\n"],["String","\""],["",";\n        "],["Statement","return"],["",";\n    }\n\n    "],["Conditional","if"],[""," ( "],["Statement","open"],[""," "],["Statement","my"],[""," "],["Identifier","$fh"],["",", "],["String","'<'"],["",", "],["Identifier","$file"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$rc_data"],["",";\n        { "],["Statement","local"],[""," "],["Identifier","$/"],["","; "],["Identifier","$rc_data"],[""," = <"],["Identifier","$fh"],["","> }\n        "],["Statement","close"],[""," "],["Identifier","$fh"],["",";\n\n        "],["Conditional","if"],["","( "],["Identifier","${"],["","^TAINT"],["Identifier","}"],[""," != "],["Number","0"],[""," ) {\n            "],["Conditional","if"],[""," ( "],["Identifier","$args->{"],["String","allow_tainted"],["Identifier","}"],[""," ) {\n                "],["Statement","warn"],[""," "],["String","\"WARNING: Reading tainted file '"],["Identifier","$file"],["String","' due to user override."],["Special","\\n"],["String","\""],["",";\n                "],["Identifier","$rc_data"],[""," =~ "],["Statement","/"],["Special","(.+)"],["Statement","/s"],["","; "],["Comment","# very bad idea - god help you"],["","\n                "],["Identifier","$rc_data"],[""," = "],["Identifier","$1"],["",";\n            }\n            "],["Conditional","else"],[""," {\n                "],["Statement","warn"],[""," "],["String","\"taint mode on: skipping rc file '"],["Identifier","$file"],["String","'."],["Special","\\n"],["String","\""],["",";\n                "],["Statement","return"],["",";\n            }\n        }\n\n        "],["Statement","my"],[""," "],["Identifier","$config"],[""," = "],["Statement","eval"],[""," "],["Identifier","$rc_data"],["",";\n        "],["Conditional","if"],[""," ( "],["Identifier","$@"],[""," ) {\n            "],["Statement","warn"],[""," "],["String","\"Error loading "],["Identifier","$file"],["String",": "],["Identifier","$@"],["Special","\\n"],["String","\""],["",";\n        }\n        "],["Conditional","elsif"],[""," (!"],["Operator","ref"],[""," "],["Identifier","$config"],[""," "],["Operator","or"],[""," "],["Operator","ref"],[""," "],["Identifier","$config"],[""," "],["Operator","ne"],[""," "],["String","'HASH'"],["",") {\n            "],["Statement","warn"],[""," "],["String","\"Error loading "],["Identifier","$file"],["String",": config file must return a hash reference"],["Special","\\n"],["String","\""],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$properties"],[""," = _merge( "],["Identifier","$config"],[""," );\n        }\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","warn"],[""," "],["String","\"error opening '"],["Identifier","$file"],["String","': "],["Identifier","$!"],["Special","\\n"],["String","\""],["",";\n    }\n}\n\n\n"],["Number","1"],["",";\n"],["Comment","__END__"],["","\n\n"],["Statement","=encoding"],[""," "],["Constant","utf8"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nData::Printer - colored pretty-print of Perl data structures and objects\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\nWant to see what's inside a variable in a complete, colored\nand human-friendly way?\n\n"],["PreProc","  use Data::Printer;   # or just \"use DDP\" for short"],["","\n  \n"],["PreProc","  p @array;            # no need to pass references"],["","\n\nCode above might output something like this (with colors!):\n\n"],["PreProc","   ["],["","\n"],["PreProc","       [0] \"a\","],["","\n"],["PreProc","       [1] \"b\","],["","\n"],["PreProc","       [2] undef,"],["","\n"],["PreProc","       [3] \"c\","],["","\n"],["PreProc","   ]"],["","\n\nYou can also inspect objects:\n\n"],["PreProc","    my $obj = SomeClass->new;"],["","\n\n"],["PreProc","    p($obj);"],["","\n\nWhich might give you something like:\n\n"],["PreProc","  \\ SomeClass  {"],["","\n"],["PreProc","      Parents       Moose::Object"],["","\n"],["PreProc","      Linear @ISA   SomeClass, Moose::Object"],["","\n"],["PreProc","      public methods (3) : bar, foo, meta"],["","\n"],["PreProc","      private methods (0)"],["","\n"],["PreProc","      internals: {"],["","\n"],["PreProc","         _something => 42,"],["","\n"],["PreProc","      }"],["","\n"],["PreProc","  }"],["","\n\nData::Printer is fully customizable. If you want to change how things\nare displayed, or even its standard behavior. Take a look at the\n"],["Identifier","L<< available customizations|/\"CUSTOMIZATION\" >>"],["",". Once you figure out\nyour own preferences, create a\n"],["Identifier","L<< configuration file|/\"CONFIGURATION FILE (RUN CONTROL)\" >>"],[""," for\nyourself and Data::Printer will automatically use it!\n\n"],["Identifier","B<< That's about it! Feel free to stop reading now and start dumping"],["","\n"],["Identifier","your data structures! For more information, including feature set,"],["","\n"],["Identifier","how to create filters, and general tips, just keep reading :) >>"],["","\n\nOh, if you are just experimenting and/or don't want to use a\nconfiguration file, you can set all options during initialization,\nincluding coloring, identation and filters!\n\n"],["PreProc","  use Data::Printer {"],["","\n"],["PreProc","      color => {"],["","\n"],["PreProc","         'regex' => 'blue',"],["","\n"],["PreProc","         'hash'  => 'yellow',"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","      filters => {"],["","\n"],["PreProc","         'DateTime' => sub { $_[0]->ymd },"],["","\n"],["PreProc","         'SCALAR'   => sub { \"oh noes, I found a scalar! $_[0]\" },"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  };"],["","\n\nThe first "],["Identifier","C<{}>"],[""," block is just syntax sugar, you can safely ommit it\nif it makes things easier to read:\n\n"],["PreProc","  use DDP colored => 1;"],["","\n\n"],["PreProc","  use Data::Printer  deparse => 1, sort_keys => 0;"],["","\n\n\n"],["Statement","=head1"],[""," "],["String","FEATURES"],["","\n\nHere's what Data::Printer has to offer to Perl developers, out of the box:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* Very sane defaults (I hope!)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Highly customizable (in case you disagree with me :)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Colored output by default"],["","\n\n"],["Statement","=item"],[""," "],["String","* Human-friendly output, with array index and custom separators"],["","\n\n"],["Statement","=item"],[""," "],["String","* Full object dumps including methods, inheritance and internals"],["","\n\n"],["Statement","=item"],[""," "],["String","* Exposes extra information such as tainted data and weak references"],["","\n\n"],["Statement","=item"],[""," "],["String","* Ability to easily create filters for objects and regular structures"],["","\n\n"],["Statement","=item"],[""," "],["String","* Ability to load settings from a "],["Identifier","C<.dataprinter>"],["String"," file so you don't have to write anything other than \"use DDP;\" in your code!"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","RATIONALE"],["","\n\nData::Dumper is a fantastic tool, meant to stringify data structures\nin a way they are suitable for being "],["Identifier","C<eval>"],["","'ed back in.\n\nThe thing is, a lot of people keep using it (and similar ones,\nlike Data::Dump) to print data structures and objects on screen\nfor inspection and debugging, and while you "],["Identifier","B<can>"],[""," use those\nmodules for that, it doesn't mean mean you "],["Identifier","B<should>"],["",".\n\nThis is where Data::Printer comes in. It is meant to do one thing\nand one thing only:\n\n"],["Identifier","I<< display Perl variables and objects on screen, properly"],["","\n"],["Identifier","formatted >>"],[""," (to be inspected by a human)\n\nIf you want to serialize/store/restore Perl data structures,\nthis module will NOT help you. Try "],["Identifier","L<Storable>"],["",", "],["Identifier","L<Data::Dumper>"],["",",\n"],["Identifier","L<JSON>"],["",", or whatever. CPAN is full of such solutions!\n\n"],["Statement","=head1"],[""," "],["String","THE p() FUNCTION"],["","\n\nOnce you load Data::Printer, the "],["Identifier","C<p()>"],[""," function will be imported\ninto your namespace and available to you. It will pretty-print\ninto STDERR (or any other output target) whatever variabe you pass to it.\n\n"],["Statement","=head2"],[""," "],["String","Changing output targets"],["","\n\nBy default, "],["Identifier","C<p()>"],[""," will be set to use STDERR. As of version 0.27, you\ncan set up the 'output' property so Data::Printer outputs to\nseveral different places:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<< output => 'stderr' >>"],["String"," - Standard error. Same as *STDERR"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<< output => 'stdout' >>"],["String"," - Standard output. Same as *STDOUT"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<< output => $filename >>"],["String"," - Appends to filename."],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<< output => $file_handle >>"],["String"," - Appends to opened handle"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<< output => \\$scalar >>"],["String"," - Appends to that variable's content"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Return Value"],["","\n\nIf for whatever reason you want to mangle with the output string\ninstead of printing it, you can simply ask for a return\nvalue:\n\n"],["PreProc","  # move to a string"],["","\n"],["PreProc","  my $string = p @some_array;"],["","\n\n"],["PreProc","  # output to STDOUT instead of STDERR;"],["","\n"],["PreProc","  print p(%some_hash);"],["","\n\nNote that, in this case, Data::Printer will not colorize the\nreturned string unless you explicitly set the "],["Identifier","C<colored>"],[""," option to 1:\n\n"],["PreProc","  print p(%some_hash, colored => 1); # now with colors!"],["","\n\nYou can - and should - of course, set this during you \""],["Identifier","C<use>"],["","\" call:\n\n"],["PreProc","  use Data::Printer colored => 1;"],["","\n"],["PreProc","  print p( %some_hash );  # will be colored"],["","\n\nOr by adding the setting to your "],["Identifier","C<.dataprinter>"],[""," file.\n\nAs most of Data::Printer, the return value is also configurable. You\ndo this by setting the "],["Identifier","C<return_value>"],[""," option. There are three options\navailable:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<'dump'>"],["String"," (default):"],["","\n\n"],["PreProc","    p %var;               # prints the dump to STDERR (void context)"],["","\n"],["PreProc","    my $string = p %var;  # returns the dump *without* printing"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<'void'>"],["String",":"],["","\n\n"],["PreProc","    p %var;               # prints the dump to STDERR, never returns."],["","\n"],["PreProc","    my $string = p %var;  # $string is undef. Data still printed in STDERR"],["","\n\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","C<'pass'>"],["String",":"],["","\n\n"],["PreProc","    p %var;               # prints the dump to STDERR, returns %var"],["","\n"],["PreProc","    my %copy = p %var;    # %copy = %var. Data still printed in STDERR"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","COLORS AND COLORIZATION"],["","\n\nBelow are all the available colorizations and their default values.\nNote that both spellings ('color' and 'colour') will work.\n\n"],["PreProc","   use Data::Printer {"],["","\n"],["PreProc","     color => {"],["","\n"],["PreProc","        array       => 'bright_white',  # array index numbers"],["","\n"],["PreProc","        number      => 'bright_blue',   # numbers"],["","\n"],["PreProc","        string      => 'bright_yellow', # strings"],["","\n"],["PreProc","        class       => 'bright_green',  # class names"],["","\n"],["PreProc","        method      => 'bright_green',  # method names"],["","\n"],["PreProc","        undef       => 'bright_red',    # the 'undef' value"],["","\n"],["PreProc","        hash        => 'magenta',       # hash keys"],["","\n"],["PreProc","        regex       => 'yellow',        # regular expressions"],["","\n"],["PreProc","        code        => 'green',         # code references"],["","\n"],["PreProc","        glob        => 'bright_cyan',   # globs (usually file handles)"],["","\n"],["PreProc","        vstring     => 'bright_blue',   # version strings (v5.16.0, etc)"],["","\n"],["PreProc","        repeated    => 'white on_red',  # references to seen values"],["","\n"],["PreProc","        caller_info => 'bright_cyan',   # details on what's being printed"],["","\n"],["PreProc","        weak        => 'cyan',          # weak references"],["","\n"],["PreProc","        tainted     => 'red',           # tainted content"],["","\n"],["PreProc","        escaped     => 'bright_red',    # escaped characters (\\t, \\n, etc)"],["","\n\n"],["PreProc","        # potential new Perl datatypes, unknown to Data::Printer"],["","\n"],["PreProc","        unknown     => 'bright_yellow on_blue',"],["","\n"],["PreProc","     },"],["","\n"],["PreProc","   };"],["","\n\nDon't fancy colors? Disable them with:\n\n"],["PreProc","  use Data::Printer colored => 0;"],["","\n\nBy default, 'colored' is set to "],["Identifier","C<\"auto\">"],["",", which means Data::Printer\nwill colorize only when not being used to return the dump string,\nnor when the output (default: STDERR) is being piped. If you're not\nseeing colors, try forcing it with:\n\n"],["PreProc","  use Data::Printer colored => 1;"],["","\n\nAlso worth noticing that Data::Printer "],["Identifier","I<will>"],[""," honor the\n"],["Identifier","C<ANSI_COLORS_DISABLED>"],[""," environment variable unless you force a\ncolored output by setting 'colored' to 1.\n\nRemember to put your preferred settings in the "],["Identifier","C<.dataprinter>"],[""," file\nso you never have to type them at all!\n\n\n"],["Statement","=head1"],[""," "],["String","ALIASING"],["","\n\nData::Printer provides the nice, short, "],["Identifier","C<p()>"],[""," function to dump your\ndata structures and objects. In case you rather use a more explicit\nname, already have a "],["Identifier","C<p()>"],[""," function (why?) in your code and want\nto avoid clashing, or are just used to other function names for that\npurpose, you can easily rename it:\n\n"],["PreProc","  use Data::Printer alias => 'Dumper';"],["","\n\n"],["PreProc","  Dumper( %foo );"],["","\n\n\n"],["Statement","=head1"],[""," "],["String","CUSTOMIZATION"],["","\n\nI tried to provide sane defaults for Data::Printer, so you'll never have\nto worry about anything other than typing "],["Identifier","C<< \"p( $var )\" >>"],[""," in your code.\nThat said, and besides coloring and filtering, there are several other\ncustomization options available, as shown below (with default values):\n\n"],["PreProc","  use Data::Printer {"],["","\n"],["PreProc","      name           => 'var',   # name to display on cyclic references"],["","\n"],["PreProc","      indent         => 4,       # how many spaces in each indent"],["","\n"],["PreProc","      hash_separator => '   ',   # what separates keys from values"],["","\n"],["PreProc","      colored        => 'auto',  # colorize output (1 for always, 0 for never)"],["","\n"],["PreProc","      index          => 1,       # display array indices"],["","\n"],["PreProc","      multiline      => 1,       # display in multiple lines (see note below)"],["","\n"],["PreProc","      max_depth      => 0,       # how deep to traverse the data (0 for all)"],["","\n"],["PreProc","      sort_keys      => 1,       # sort hash keys"],["","\n"],["PreProc","      deparse        => 0,       # use B::Deparse to expand (expose) subroutines"],["","\n"],["PreProc","      show_tied      => 1,       # expose tied variables"],["","\n"],["PreProc","      show_tainted   => 1,       # expose tainted variables"],["","\n"],["PreProc","      show_weak      => 1,       # expose weak references"],["","\n"],["PreProc","      show_readonly  => 0,       # expose scalar variables marked as read-only"],["","\n"],["PreProc","      show_lvalue    => 1,       # expose lvalue types"],["","\n"],["PreProc","      print_escapes  => 0,       # print non-printable chars as \"\\n\", \"\\t\", etc."],["","\n"],["PreProc","      quote_keys     => 'auto',  # quote hash keys (1 for always, 0 for never)."],["","\n"],["PreProc","                                 # 'auto' will quote when key is empty/space-only."],["","\n"],["PreProc","      separator      => ',',     # uses ',' to separate array/hash elements"],["","\n"],["PreProc","      end_separator  => 0,       # prints the separator after last element in array/hash."],["","\n"],["PreProc","                                 # the default is 0 that means not to print"],["","\n\n"],["PreProc","      caller_info    => 0,       # include information on what's being printed"],["","\n"],["PreProc","      use_prototypes => 1,       # allow p(%foo), but prevent anonymous data"],["","\n"],["PreProc","      return_value   => 'dump',  # what should p() return? See 'Return Value' above."],["","\n"],["PreProc","      output         => 'stderr',# where to print the output. See"],["","\n"],["PreProc","                                 # 'Changing output targets' above."],["","\n\n"],["PreProc","      class_method   => '_data_printer', # make classes aware of Data::Printer"],["","\n"],["PreProc","                                         # and able to dump themselves."],["","\n\n"],["PreProc","      class => {"],["","\n"],["PreProc","          internals  => 1,       # show internal data structures of classes"],["","\n\n"],["PreProc","          inherited  => 'none',  # show inherited methods,"],["","\n"],["PreProc","                                 # can also be 'all', 'private', or 'public'."],["","\n\n"],["PreProc","          universal  => 1,       # include UNIVERSAL methods in inheritance list"],["","\n\n"],["PreProc","          parents    => 1,       # show parents, if there are any"],["","\n"],["PreProc","          linear_isa => 'auto',  # show the entire @ISA, linearized, whenever"],["","\n"],["PreProc","                                 # the object has more than one parent. Can"],["","\n"],["PreProc","                                 # also be set to 1 (always show) or 0 (never)."],["","\n\n"],["PreProc","          expand     => 1,       # how deep to traverse the object (in case"],["","\n"],["PreProc","                                 # it contains other objects). Defaults to"],["","\n"],["PreProc","                                 # 1, meaning expand only itself. Can be any"],["","\n"],["PreProc","                                 # number, 0 for no class expansion, and 'all'"],["","\n"],["PreProc","                                 # to expand everything."],["","\n\n"],["PreProc","          sort_methods => 1,     # sort public and private methods"],["","\n\n"],["PreProc","          show_methods => 'all'  # method list. Also 'none', 'public', 'private'"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  };"],["","\n\nNote: setting "],["Identifier","C<multiline>"],[""," to "],["Identifier","C<0>"],[""," will also set "],["Identifier","C<index>"],[""," and "],["Identifier","C<indent>"],[""," to "],["Identifier","C<0>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","FILTERS"],["","\n\nData::Printer offers you the ability to use filters to override\nany kind of data display. The filters are placed on a hash,\nwhere keys are the types - or class names - and values\nare anonymous subs that receive two arguments: the item itself\nas first parameter, and the properties hashref (in case your\nfilter wants to read from it). This lets you quickly override\nthe way Data::Printer handles and displays data types and, in\nparticular, objects.\n\n"],["PreProc","  use Data::Printer filters => {"],["","\n"],["PreProc","            'DateTime'      => sub { $_[0]->ymd },"],["","\n"],["PreProc","            'HTTP::Request' => sub { $_[0]->uri },"],["","\n"],["PreProc","  };"],["","\n\nPerl types are named as "],["Identifier","C<ref>"],[""," calls them: "],["Identifier","I<SCALAR>"],["",", "],["Identifier","I<ARRAY>"],["",",\n"],["Identifier","I<HASH>"],["",", "],["Identifier","I<REF>"],["",", "],["Identifier","I<CODE>"],["",", "],["Identifier","I<Regexp>"],[""," and "],["Identifier","I<GLOB>"],["",". As for objects,\njust use the class' name, as shown above.\n\nAs of version 0.13, you may also use the '-class' filter, which\nwill be called for all non-perl types (objects).\n\nYour filters are supposed to return a defined value (usually, the\nstring you want to print). If you don't, Data::Printer will\nlet the next filter of that same type have a go, or just fallback\nto the defaults. You can also use an array reference to pass more\nthan one filter for the same type or class.\n\n"],["Identifier","B<Note>"],["",": If you plan on calling "],["Identifier","C<p()>"],[""," from "],["Identifier","I<within>"],[""," an inline\nfilter, please make sure you are passing only REFERENCES as\narguments. See "],["Identifier","L</CAVEATS>"],[""," below.\n\nYou may also like to specify standalone filter modules. Please\nsee "],["Identifier","L<Data::Printer::Filter>"],[""," for further information on a more\npowerful filter interface for Data::Printer, including useful\nfilters that are shipped as part of this distribution.\n\n"],["Statement","=head1"],[""," "],["String","MAKING YOUR CLASSES DDP-AWARE (WITHOUT ADDING ANY DEPS)"],["","\n\nWhenever printing the contents of a class, Data::Printer first\nchecks to see if that class implements a sub called '_data_printer'\n(or whatever you set the \"class_method\" option to in your settings,\nsee "],["Identifier","L</CUSTOMIZATION>"],[""," below).\n\nIf a sub with that exact name is available in the target object,\nData::Printer will use it to get the string to print instead of\nmaking a regular class dump.\n\nThis means you could have the following in one of your classes:\n\n"],["PreProc","  sub _data_printer {"],["","\n"],["PreProc","      my ($self, $properties) = @_;"],["","\n"],["PreProc","      return 'Hey, no peeking! But foo contains ' . $self->foo;"],["","\n"],["PreProc","  }"],["","\n\nNotice you don't have to depend on Data::Printer at all, just\nwrite your sub and it will use that to pretty-print your objects.\n\nIf you want to use colors and filter helpers, and still not\nadd Data::Printer to your dependencies, remember you can import\nthem during runtime:\n\n"],["PreProc","  sub _data_printer {"],["","\n"],["PreProc","      require Data::Printer::Filter;"],["","\n"],["PreProc","      Data::Printer::Filter->import;"],["","\n\n"],["PreProc","      # now we have 'indent', outdent', 'linebreak', 'p' and 'colored'"],["","\n"],["PreProc","      my ($self, $properties) = @_;"],["","\n"],["PreProc","      ..."],["","\n"],["PreProc","  }"],["","\n\nHaving a filter for that particular class will of course override\nthis setting.\n\n\n"],["Statement","=head1"],[""," "],["String","CONFIGURATION FILE (RUN CONTROL)"],["","\n\nData::Printer tries to let you easily customize as much as possible\nregarding the visualization of your data structures and objects.\nBut we don't want you to keep repeating yourself every time you\nwant to use it!\n\nTo avoid this, you can simply create a file called "],["Identifier","C<.dataprinter>"],[""," in\nyour home directory (usually "],["Identifier","C</home/username>"],[""," in Linux), and put\nyour configuration hash reference in there.\n\nThis way, instead of doing something like:\n\n"],["PreProc","   use Data::Printer {"],["","\n"],["PreProc","     colour => {"],["","\n"],["PreProc","        array => 'bright_blue',"],["","\n"],["PreProc","     },"],["","\n"],["PreProc","     filters => {"],["","\n"],["PreProc","         'Catalyst::Request' => sub {"],["","\n"],["PreProc","             my $req = shift;"],["","\n"],["PreProc","             return \"Cookies: \" . p($req->cookies)"],["","\n"],["PreProc","         },"],["","\n"],["PreProc","     },"],["","\n"],["PreProc","   };"],["","\n\nYou can create a .dataprinter file that looks like this:\n\n"],["PreProc","   {"],["","\n"],["PreProc","     colour => {"],["","\n"],["PreProc","        array => 'bright_blue',"],["","\n"],["PreProc","     },"],["","\n"],["PreProc","     filters => {"],["","\n"],["PreProc","         'Catalyst::Request' => sub {"],["","\n"],["PreProc","             my $req = shift;"],["","\n"],["PreProc","             return \"Cookies: \" . p($req->cookies)"],["","\n"],["PreProc","         },"],["","\n"],["PreProc","     },"],["","\n"],["PreProc","   };"],["","\n\nNote that all we did was remove the \"use Data::Printer\" bit when\nwriting the "],["Identifier","C<.dataprinter>"],[""," file. From then on all you have to do\nwhile debugging scripts is:\n\n"],["PreProc","  use Data::Printer;"],["","\n\nand it will load your custom settings every time :)\n\n"],["Statement","=head2"],[""," "],["String","Loading RC files in custom locations"],["","\n\nIf your RC file is somewhere other than "],["Identifier","C<.dataprinter>"],[""," in your home\ndir, you can load whichever file you want via the "],["Identifier","C<'rc_file'>"],[""," parameter:\n\n"],["PreProc","  use Data::Printer rc_file => '/path/to/my/rcfile.conf';"],["","\n\nYou can even set this to undef or to a non-existing file to disable your\nRC file at will.\n\nThe RC file location can also be specified with the "],["Identifier","C<DATAPRINTERRC>"],["","\nenvironment variable. Using "],["Identifier","C<rc_file>"],[""," in code will override the environment\nvariable.\n\n"],["Statement","=head2"],[""," "],["String","RC File Security"],["","\n\nThe "],["Identifier","C<.dataprinter>"],[""," RC file is nothing but a Perl hash that\ngets "],["Identifier","C<eval>"],["","'d back into the code. This means that whatever\nis in your RC file "],["Identifier","B<WILL BE INTERPRETED BY PERL AT RUNTIME>"],["",".\nThis can be quite worrying if you're not the one in control\nof the RC file.\n\nFor this reason, Data::Printer takes extra precaution before\nloading the file:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* The file has to be in your home directory unless you"],["","\n"],["String","specifically point elsewhere via the '"],["Identifier","C<rc_file>"],["String","' property or"],["","\n"],["String","the DATAPRINTERRC environment variable;"],["","\n\n"],["Statement","=item"],[""," "],["String","* The file "],["Identifier","B<must>"],["String"," be a plain file, never a symbolic"],["","\n"],["String","link, named pipe or socket;"],["","\n\n"],["Statement","=item"],[""," "],["String","* The file "],["Identifier","B<must>"],["String"," be owned by you (i.e. the effective"],["","\n"],["String","user id that ran the script using Data::Printer);"],["","\n\n"],["Statement","=item"],[""," "],["String","* The file "],["Identifier","B<must>"],["String"," be read-only for everyone but your user."],["","\n"],["String","This usually means permissions "],["Identifier","C<0644>"],["String",", "],["Identifier","C<0640>"],["String"," or "],["Identifier","C<0600>"],["String"," in"],["","\n"],["String","Unix-like systems. "],["Identifier","B<THIS IS NOT CHECKED IN WIN32>"],["String",";"],["","\n\n"],["Statement","=item"],[""," "],["String","* The file will "],["Identifier","B<NOT>"],["String"," be loaded in Taint mode, unless"],["","\n"],["String","you specifically load Data::Printer with the 'allow_tainted'"],["","\n"],["String","option set to true. And even if you do that, Data::Printer"],["","\n"],["String","will still issue a warning before loading the file. But"],["","\n"],["String","seriously, don't do that."],["","\n\n"],["Statement","=back"],["","\n\nFailure to comply with the security rules above will result in\nthe RC file not being loaded (likely with a warning on what went\nwrong).\n\n\n"],["Statement","=head1"],[""," "],["String","THE \"DDP\" PACKAGE ALIAS"],["","\n\nYou're likely to add/remove Data::Printer from source code being\ndeveloped and debugged all the time, and typing it might feel too\nlong. Because of this, the 'DDP' package is provided as a shorter\nalias to Data::Printer:\n\n"],["PreProc","   use DDP;"],["","\n"],["PreProc","   p %some_var;"],["","\n\n"],["Statement","=head1"],[""," "],["String","CALLER INFORMATION"],["","\n\nIf you set caller_info to a true value, Data::Printer will prepend\nevery call with an informational message. For example:\n\n"],["PreProc","  use Data::Printer caller_info => 1;"],["","\n\n"],["PreProc","  my $var = 42;"],["","\n"],["PreProc","  p $var;"],["","\n\nwill output something like:\n\n"],["PreProc","  Printing in line 4 of myapp.pl:"],["","\n"],["PreProc","  42"],["","\n\nThe default message is "],["Identifier","C<< 'Printing in line __LINE__ of __FILENAME__:' >>"],["",".\nThe special strings "],["Identifier","C<__LINE__>"],["",", "],["Identifier","C<__FILENAME__>"],[""," and "],["Identifier","C<__PACKAGE__>"],[""," will\nbe interpolated into their according value so you can customize them at will:\n\n"],["PreProc","  use Data::Printer"],["","\n"],["PreProc","    caller_info => 1,"],["","\n"],["PreProc","    caller_message => \"Okay, __PACKAGE__, let's dance!\""],["","\n"],["PreProc","    color => {"],["","\n"],["PreProc","        caller_info => 'bright_red',"],["","\n"],["PreProc","    };"],["","\n\nAs shown above, you may also set a color for \"caller_info\" in your color\nhash. Default is cyan.\n\n\n"],["Statement","=head1"],[""," "],["String","EXPERIMENTAL FEATURES"],["","\n\nThe following are volatile parts of the API which are subject to\nchange at any given version. Use them at your own risk.\n\n"],["Statement","=head2"],[""," "],["String","Local Configuration (experimental!)"],["","\n\nYou can override global configurations by writing them as the second\nparameter for "],["Identifier","p()"],["",". For example:\n\n"],["PreProc","  p( %var, color => { hash => 'green' } );"],["","\n\n\n"],["Statement","=head2"],[""," "],["String","Filter classes"],["","\n\nAs of Data::Printer 0.11, you can create complex filters as a separate\nmodule. Those can even be uploaded to CPAN and used by other people!\nSee "],["Identifier","L<Data::Printer::Filter>"],[""," for further information.\n\n"],["Statement","=head1"],[""," "],["String","CAVEATS"],["","\n\nYou can't pass more than one variable at a time.\n\n"],["PreProc","   p($foo, $bar); # wrong"],["","\n"],["PreProc","   p($foo);       # right"],["","\n"],["PreProc","   p($bar);       # right"],["","\n\nThe default mode is to use prototypes, in which you are supposed to pass\nvariables, not anonymous structures:\n\n"],["PreProc","   p( { foo => 'bar' } ); # wrong"],["","\n\n"],["PreProc","   p %somehash;        # right"],["","\n"],["PreProc","   p $hash_ref;        # also right"],["","\n\nTo pass anonymous structures, set \"use_prototypes\" option to 0. But\nremember you'll have to pass your variables as references:\n\n"],["PreProc","   use Data::Printer use_prototypes => 0;"],["","\n\n"],["PreProc","   p( { foo => 'bar' } ); # was wrong, now is right."],["","\n\n"],["PreProc","   p( %foo  ); # was right, but fails without prototypes"],["","\n"],["PreProc","   p( \\%foo ); # do this instead"],["","\n\nIf you are using inline filters, and calling "],["Identifier","p()"],[""," (or whatever name you\naliased it to) from inside those filters, you "],["Identifier","B<must>"],[""," pass the arguments\nto "],["Identifier","C<p()>"],[""," as a reference:\n\n"],["PreProc","  use Data::Printer {"],["","\n"],["PreProc","      filters => {"],["","\n"],["PreProc","          ARRAY => sub {"],["","\n"],["PreProc","              my $listref = shift;"],["","\n"],["PreProc","              my $string = '';"],["","\n"],["PreProc","              foreach my $item (@$listref) {"],["","\n"],["PreProc","                  $string .= p( \\$item );      # p( $item ) will not work!"],["","\n"],["PreProc","              }"],["","\n"],["PreProc","              return $string;"],["","\n"],["PreProc","          },"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  };"],["","\n\nThis happens because your filter function is compiled "],["Identifier","I<before>"],[""," Data::Printer\nitself loads, so the filter does not see the function prototype. As a way\nto avoid unpleasant surprises, if you forget to pass a reference, Data::Printer\nwill generate an exception for you with the following message:\n\n"],["PreProc","    'When calling p() without prototypes, please pass arguments as references'"],["","\n\nAnother way to avoid this is to use the much more complete "],["Identifier","L<Data::Printer::Filter>"],["","\ninterface for standalone filters.\n\n"],["Statement","=head1"],[""," "],["String","EXTRA TIPS"],["","\n\n"],["Statement","=head2"],[""," "],["String","Circumventing prototypes"],["","\n\nThe "],["Identifier","C<p()>"],[""," function uses prototypes by default, allowing you to say:\n\n"],["PreProc","  p %var;"],["","\n\ninstead of always having to pass references, like:\n\n"],["PreProc","  p \\%var;"],["","\n\nThere are cases, however, where you may want to pass anonymous\nstructures, like:\n\n"],["PreProc","  p { foo => $bar };   # this blows up, don't use"],["","\n\nand because of prototypes, you can't. If this is your case, just\nset \"use_prototypes\" option to 0. Note, with this option,\nyou "],["Identifier","B<will>"],[""," have to pass your variables as references:\n\n"],["PreProc","  use Data::Printer use_prototypes => 0;"],["","\n\n"],["PreProc","   p { foo => 'bar' }; # doesn't blow up anymore, works just fine."],["","\n\n"],["PreProc","   p %var;  # but now this blows up..."],["","\n"],["PreProc","   p \\%var; # ...so do this instead"],["","\n\n"],["PreProc","   p [ $foo, $bar, \\@baz ]; # this way you can even pass"],["","\n"],["PreProc","                            # several variables at once"],["","\n\nVersions prior to 0.17 don't have the \"use_prototypes\" option. If\nyou're stuck in an older version you can write "],["Identifier","C<&p()>"],[""," instead of "],["Identifier","C<p()>"],["","\nto circumvent prototypes and pass elements (including anonymous variables)\nas "],["Identifier","B<REFERENCES>"],["",". This notation, however, requires enclosing parentheses:\n\n"],["PreProc","  &p( { foo => $bar } );        # this is ok, use at will"],["","\n"],["PreProc","  &p( \\\"DEBUGGING THIS BIT\" );  # this works too"],["","\n\nOr you could just create a very simple wrapper function:\n\n"],["PreProc","  sub pp { p @_ };"],["","\n\nAnd use it just as you use "],["Identifier","C<p()>"],["",".\n\n"],["Statement","=head2"],[""," "],["String","Minding the return value of p()"],["","\n\n"],["Identifier","I<< (contributed by Matt S. Trout (mst)) >>"],["","\n\nThere is a reason why explicit return statements are recommended unless\nyou know what you're doing. By default, Data::Printer's return value\ndepends on how it was called. When not in void context, it returns the\nserialized form of the dump.\n\nIt's tempting to trust your own "],["Identifier","p()"],[""," calls with that approach, but if\nthis is your "],["Identifier","I<last>"],[""," statement in a function, you should keep in mind\nyour debugging code will behave differently depending on how your\nfunction was called!\n\nTo prevent that, set the "],["Identifier","C<return_value>"],[""," property to either 'void'\nor 'pass'. You won't be able to retrieve the dumped string but, hey,\nwho does that anyway :)\n\nAssuming you have set the pass-through ('pass') property in your\n"],["Identifier","C<.dataprinter>"],[""," file, another stunningly useful thing you can do with it\nis change code that says:\n\n"],["PreProc","   return $obj->foo;"],["","\n\nwith:\n\n"],["PreProc","   use DDP;"],["","\n\n"],["PreProc","   return p $obj->foo;"],["","\n\nYou can even add it to chained calls if you wish to see the dump of\na particular state, changing this:\n\n"],["PreProc","   $obj->foo->bar->baz;"],["","\n\nto:\n\n"],["PreProc","   $obj->foo->DDP::p->bar->baz"],["","\n\nAnd things will \"Just Work\".\n\n\n"],["Statement","=head2"],[""," "],["String","Using p() in some/all of your loaded modules"],["","\n\n"],["Identifier","I<< (contributed by Matt S. Trout (mst)) >>"],["","\n\nWhile debugging your software, you may want to use Data::Printer in\nsome or all loaded modules and not bother having to load it in\neach and every one of them. To do this, in any module loaded by\n"],["Identifier","C<myapp.pl>"],["",", simply write:\n\n"],["PreProc","  ::p( @myvar );  # note the '::' in front of p()"],["","\n\nThen call your program like:\n\n"],["PreProc","  perl -MDDP myapp.pl"],["","\n\nThis also has the great advantage that if you leave one "],["Identifier","p()"],[""," call\nin by accident, it will fail without the -M, making it easier to spot :)\n\nIf you really want to have "],["Identifier","p()"],[""," imported into your loaded\nmodules, use the next tip instead.\n\n"],["Statement","=head2"],[""," "],["String","Adding p() to all your loaded modules"],["","\n\n"],["Identifier","I<< (contributed by ÃrpÃ¡d SzÃ¡sz) >>"],["","\n\nIf you wish to automatically add Data::Printer's "],["Identifier","C<p()>"],[""," function to\nevery loaded module in you app, you can do something like this to\nyour main program:\n\n"],["PreProc","    BEGIN {"],["","\n"],["PreProc","        {"],["","\n"],["PreProc","            no strict 'refs';"],["","\n"],["PreProc","            require Data::Printer;"],["","\n"],["PreProc","            my $alias = 'p';"],["","\n"],["PreProc","            foreach my $package ( keys %main:: ) {"],["","\n"],["PreProc","                if ( $package =~ m/::$/ ) {"],["","\n"],["PreProc","                    *{ $package . $alias } = \\&Data::Printer::p;"],["","\n"],["PreProc","                }"],["","\n"],["PreProc","            }"],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    }"],["","\n\n"],["Identifier","B<WARNING>"],[""," This will override all locally defined subroutines/methods that\nare named "],["Identifier","C<p>"],["",", if they exist, in every loaded module. If you already\nhave a subroutine named '"],["Identifier","C<p()>"],["","', be sure to change "],["Identifier","C<$alias>"],[""," to\nsomething custom.\n\nIf you rather avoid namespace manipulation altogether, use the previous\ntip instead.\n\n"],["Statement","=head2"],[""," "],["String","Using Data::Printer from the Perl debugger"],["","\n\n"],["Identifier","I<< (contributed by ÃrpÃ¡d SzÃ¡sz and Marcel GrÃ¼nauer (hanekomu)) >>"],["","\n\nWith "],["Identifier","L<DB::Pluggable>"],["",", you can easily set the perl debugger to use\nData::Printer to print variable information, replacing the debugger's\nstandard "],["Identifier","C<p()>"],[""," function. All you have to do is add these lines to\nyour "],["Identifier","C<.perldb>"],[""," file:\n\n"],["PreProc","  use DB::Pluggable;"],["","\n"],["PreProc","  DB::Pluggable->run_with_config( \\'[DataPrinter]' );  # note the '\\'"],["","\n\nThen call the perl debugger as you normally would:\n\n"],["PreProc","  perl -d myapp.pl"],["","\n\nNow Data::Printer's "],["Identifier","C<p()>"],[""," command will be used instead of the debugger's!\n\nSee "],["Identifier","L<perldebug>"],[""," for more information on how to use the perl debugger, and\n"],["Identifier","L<DB::Pluggable>"],[""," for extra functionality and other plugins.\n\nIf you can't or don't wish to use DB::Pluggable, or simply want to keep\nthe debugger's "],["Identifier","C<p()>"],[""," function and add an extended version using\nData::Printer (let's call it "],["Identifier","C<px()>"],[""," for instance), you can add these\nlines to your "],["Identifier","C<.perldb>"],[""," file instead:\n\n"],["PreProc","    $DB::alias{px} = 's/px/DB::px/';"],["","\n"],["PreProc","    sub px {"],["","\n"],["PreProc","        my $expr = shift;"],["","\n"],["PreProc","        require Data::Printer;"],["","\n"],["PreProc","        print Data::Printer::p($expr);"],["","\n"],["PreProc","    }"],["","\n\nNow, inside the Perl debugger, you can pass as reference to "],["Identifier","C<px>"],[""," expressions\nto be dumped using Data::Printer.\n\n"],["Statement","=head2"],[""," "],["String","Using Data::Printer in a perl shell (REPL)"],["","\n\nSome people really enjoy using a REPL shell to quickly try Perl code. One\nof the most famous ones out there is "],["Identifier","L<Devel::REPL>"],["",". If you use it, now\nyou can also see its output with Data::Printer!\n\nJust install "],["Identifier","L<Devel::REPL::Plugin::DataPrinter>"],[""," and add the following\nline to your re.pl configuration file (usually \".re.pl/repl.rc\" in your\nhome dir):\n\n"],["PreProc","  load_plugin('DataPrinter');"],["","\n\nThe next time you run "],["Identifier","C<re.pl>"],["",", it should dump all your REPL using\nData::Printer!\n\n"],["Statement","=head2"],[""," "],["String","Easily rendering Data::Printer's output as HTML"],["","\n\nTo turn Data::Printer's output into HTML, you can do something like:\n\n"],["PreProc","  use HTML::FromANSI;"],["","\n"],["PreProc","  use Data::Printer;"],["","\n  \n"],["PreProc","  my $html_output = ansi2html( p($object, colored => 1) );"],["","\n\nIn the example above, the "],["Identifier","C<$html_output>"],[""," variable contains the\nHTML escaped output of "],["Identifier","C<p($object)>"],["",", so you can print it for\nlater inspection or render it (if it's a web app).\n\n"],["Statement","=head2"],[""," "],["String","Using Data::Printer with Template Toolkit"],["","\n\n"],["Identifier","I<< (contributed by Stephen Thirlwall (sdt)) >>"],["","\n\nIf you use Template Toolkit and want to dump your variables using Data::Printer,\ninstall the "],["Identifier","L<Template::Plugin::DataPrinter>"],[""," module and load it in your template:\n\n"],["PreProc","   [% USE DataPrinter %]"],["","\n\nThe provided methods match those of "],["Identifier","C<Template::Plugin::Dumper>"],["",":\n\n"],["PreProc","   ansi-colored dump of the data structure in \"myvar\":"],["","\n"],["PreProc","   [% DataPrinter.dump( myvar ) %]"],["","\n\n"],["PreProc","   html-formatted, colored dump of the same data structure:"],["","\n"],["PreProc","   [% DataPrinter.dump_html( myvar ) %]"],["","\n\nThe module allows several customization options, even letting you load it as a\ncomplete drop-in replacement for Template::Plugin::Dumper so you don't even have\nto change your previous templates!\n\n"],["Statement","=head2"],[""," "],["String","Unified interface for Data::Printer and other debug formatters"],["","\n\n"],["Identifier","I<< (contributed by Kevin McGrath (catlgrep)) >>"],["","\n\nIf you are porting your code to use Data::Printer instead of\nData::Dumper or similar, you can just replace:\n\n"],["PreProc","  use Data::Dumper;"],["","\n\nwith:\n\n"],["PreProc","  use Data::Printer alias => 'Dumper';"],["","\n"],["PreProc","  # use Data::Dumper;"],["","\n\nmaking sure to provide Data::Printer with the proper alias for the\nprevious dumping function.\n\nIf, however, you want a really unified approach where you can easily\nflip between debugging outputs, use "],["Identifier","L<Any::Renderer>"],[""," and its plugins,\nlike "],["Identifier","L<Any::Renderer::Data::Printer>"],["",".\n\n"],["Statement","=head2"],[""," "],["String","Printing stack traces with arguments expanded using Data::Printer"],["","\n\n"],["Identifier","I<< (contributed by Sergey Aleynikov (randir)) >>"],["","\n\nThere are times where viewing the current state of a variable is not\nenough, and you want/need to see a full stack trace of a function call.\n\nThe "],["Identifier","L<Devel::PrettyTrace>"],[""," module uses Data::Printer to provide you just\nthat. It exports a "],["Identifier","C<bt()>"],[""," function that pretty-prints detailed information\non each function in your stack, making it easier to spot any issues!\n\n"],["Statement","=head2"],[""," "],["String","Troubleshooting apps in real time without changing a single line of your code"],["","\n\n"],["Identifier","I<< (contributed by Marcel GrÃ¼nauer (hanekomu)) >>"],["","\n\n"],["Identifier","L<dip>"],[""," is a dynamic instrumentation framework for troubleshooting Perl\nprograms, similar to "],["Identifier","L<DTrace|http://opensolaris.org/os/community/dtrace/>"],["",".\nIn a nutshell, "],["Identifier","C<dip>"],[""," lets you create probes for certain conditions\nin your application that, once met, will perform a specific action. Since\nit uses Aspect-oriented programming, it's very lightweight and you only\npay for what you use.\n\n"],["Identifier","C<dip>"],[""," can be very useful since it allows you to debug your software\nwithout changing a single line of your original code. And Data::Printer\ncomes bundled with it, so you can use the "],["Identifier","C<p()>"],[""," function to view your\ndata structures too!\n\n"],["PreProc","   # Print a stack trace every time the name is changed,"],["","\n"],["PreProc","   # except when reading from the database."],["","\n"],["PreProc","   dip -e 'before { print longmess(p $_->{args}[1]) if $_->{args}[1] }"],["","\n"],["PreProc","     call \"MyObj::name\" & !cflow(\"MyObj::read\")' myapp.pl"],["","\n\nYou can check you "],["Identifier","L<dip>"],["","'s own documentation for more information and options.\n\n"],["Statement","=head2"],[""," "],["String","Sample output for color fine-tuning"],["","\n\n"],["Identifier","I<< (contributed by Yanick Champoux (yanick)) >>"],["","\n\nThe \"examples/try_me.pl\" file included in this distribution has a sample\ndump with a complex data structure to let you quickly test color schemes.\n\n"],["Statement","=head2"],[""," "],["String","creating fiddling filters"],["","\n\n"],["Identifier","I<< (contributed by dirk) >>"],["","\n\nSometimes, you may want to take advantage of Data::Printer's original dump,\nbut add/change some of the original data to enhance your debugging ability.\nSay, for example, you have an "],["Identifier","C<HTTP::Response>"],[""," object you want to print\nbut the content is encoded. The basic approach, of course, would be to\njust dump the decoded content:\n\n"],["PreProc","  use DDP filter {"],["","\n"],["PreProc","    'HTTP::Response' => sub { p( \\shift->decoded_content, %{shift} );"],["","\n"],["PreProc","  };"],["","\n\nBut what if you want to see the rest of the original object? Dumping it\nwould be a no-go, because you would just recurse forever in your own filter.\n\nNever fear! When you create a filter in Data::Printer, you're not replacing\nthe original one, you're just stacking yours on top of it. To forward your data\nto the original filter, all you have to do is return an undefined value. This\nmeans you can rewrite your "],["Identifier","C<HTTP::Response>"],[""," filter like so, if you want:\n\n"],["PreProc","  use DDP filters => {"],["","\n"],["PreProc","    'HTTP::Response' => sub {"],["","\n"],["PreProc","      my ($res, $p) = @_;"],["","\n\n"],["PreProc","      # been here before? Switch to original handler"],["","\n"],["PreProc","      return if exists $res->{decoded_content};"],["","\n\n"],["PreProc","      # first timer? Come on in!"],["","\n"],["PreProc","      my $clone = $res->clone;"],["","\n"],["PreProc","      $clone->{decoded_content} = $clone->decoded_content;"],["","\n"],["PreProc","      return p($clone, %$p);"],["","\n"],["PreProc","    }"],["","\n"],["PreProc","  };"],["","\n\nAnd voilÃ ! Your fiddling filter now works like a charm :)\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nIf you find any, please file a bug report.\n\n\n"],["Statement","=head1"],[""," "],["String","SEE ALSO"],["","\n\n"],["Identifier","L<Data::Dumper>"],["","\n\n"],["Identifier","L<Data::Dump>"],["","\n\n"],["Identifier","L<Data::Dumper::Concise>"],["","\n\n"],["Identifier","L<Data::Dump::Streamer>"],["","\n\n"],["Identifier","L<Data::PrettyPrintObjects>"],["","\n\n"],["Identifier","L<Data::TreeDumper>"],["","\n\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nBreno G. de Oliveira "],["Identifier","C<< <garu at cpan.org> >>"],["","\n\n"],["Statement","=head1"],[""," "],["String","CONTRIBUTORS"],["","\n\nMany thanks to everyone that helped design and develop this module\nwith patches, bug reports, wishlists, comments and tests. They are\n(alphabetically):\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* Allan Whiteford"],["","\n\n"],["Statement","=item"],[""," "],["String","* Andreas KÃ¶nig"],["","\n\n"],["Statement","=item"],[""," "],["String","* Andy Bach"],["","\n\n"],["Statement","=item"],[""," "],["String","* ÃrpÃ¡d SzÃ¡sz"],["","\n\n"],["Statement","=item"],[""," "],["String","* brian d foy"],["","\n\n"],["Statement","=item"],[""," "],["String","* Chris Prather (perigrin)"],["","\n\n"],["Statement","=item"],[""," "],["String","* David Golden (xdg)"],["","\n\n"],["Statement","=item"],[""," "],["String","* David Raab"],["","\n\n"],["Statement","=item"],[""," "],["String","* Damien Krotkine (dams)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Denis Howe"],["","\n\n"],["Statement","=item"],[""," "],["String","* Dotan Dimet"],["","\n\n"],["Statement","=item"],[""," "],["String","* Eden Cardim (edenc)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Elliot Shank (elliotjs)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Fernando CorrÃªa (SmokeMachine)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Fitz Elliott"],["","\n\n"],["Statement","=item"],[""," "],["String","* Ivan Bessarabov (bessarabv)"],["","\n\n"],["Statement","=item"],[""," "],["String","* J Mash"],["","\n\n"],["Statement","=item"],[""," "],["String","* Jesse Luehrs (doy)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Joel Berger (jberger)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Kartik Thakore (kthakore)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Kevin Dawson (bowtie)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Kevin McGrath (catlgrep)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Kip Hampton (ubu)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Marcel GrÃ¼nauer (hanekomu)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Matt S. Trout (mst)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Maxim Vuets"],["","\n\n"],["Statement","=item"],[""," "],["String","* Mike Doherty (doherty)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Paul Evans (LeoNerd)"],["","\n\n"],["Statement","=item"],[""," "],["String","* PrzemysÅaw WesoÅek (jest)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Rebecca Turner (iarna)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Rob Hoelz (hoelzro)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Sebastian Willing (Sewi)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Sergey Aleynikov (randir)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Stanislaw Pusep (syp)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Stephen Thirlwall (sdt)"],["","\n\n"],["Statement","=item"],[""," "],["String","* sugyan"],["","\n\n"],["Statement","=item"],[""," "],["String","* Tatsuhiko Miyagawa (miyagawa)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Tim Heaney (oylenshpeegul)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Torsten Raudssus (Getty)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Wesley Dal`Col (blabos)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Yanick Champoux (yanick)"],["","\n\n"],["Statement","=back"],["","\n\nIf I missed your name, please drop me a line!\n\n\n"],["Statement","=head1"],[""," "],["String","LICENSE AND COPYRIGHT"],["","\n\nCopyright 2011 Breno G. de Oliveira "],["Identifier","C<< <garu at cpan.org> >>"],["",". All rights reserved.\n\nThis module is free software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See "],["Identifier","L<perlartistic>"],["",".\n\n\n\n"],["Statement","=head1"],[""," "],["String","DISCLAIMER OF WARRANTY"],["","\n\nBECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE SOFTWARE \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER\nEXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE\nENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH\nYOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL\nNECESSARY SERVICING, REPAIR, OR CORRECTION.\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE\nLIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,\nOR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE\nTHE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n\n\n"]]