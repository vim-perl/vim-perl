[["Statement","package"],["Type"," Data::Printer::Filter"],["",";\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","Clone::PP "],["String","qw(clone)"],["",";\n"],["Statement","require"],[""," Carp;\n"],["Statement","require"],[""," Data::Printer;\n\n"],["Statement","my"],[""," "],["Identifier","%_filters_for"],["","   = ();\n"],["Statement","my"],[""," "],["Identifier","%_extras_for"],["","    = ();\n\n"],["Keyword","sub "],["Function","import "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$caller"],[""," = "],["Statement","caller"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$id"],[""," = Data::Printer::_object_id( \\"],["Identifier","$caller"],[""," );\n\n    "],["Statement","my"],[""," "],["Identifier","%properties"],[""," = ();\n\n    "],["Statement","my"],[""," "],["Identifier","$filter"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$type"],["",", "],["Identifier","$code"],["",", "],["Identifier","$extra"],["",") = "],["Identifier","@_"],["",";\n\n        Carp::croak( "],["String","\"syntax: filter 'Class', sub { ... }\""],[""," )\n          "],["Conditional","unless"],[""," "],["Identifier","$type"],[""," "],["Operator","and"],[""," "],["Identifier","$code"],[""," "],["Operator","and"],[""," "],["Operator","ref"],[""," "],["Identifier","$code"],[""," "],["Operator","eq"],[""," "],["String","'CODE'"],["",";\n\n        "],["Conditional","if"],[""," ("],["Identifier","$extra"],["",") {\n            Carp::croak( "],["String","'extra filter field must be a hashref'"],[""," )\n                "],["Conditional","unless"],[""," "],["Operator","ref"],[""," "],["Identifier","$extra"],[""," "],["Operator","and"],[""," "],["Operator","ref"],[""," "],["Identifier","$extra"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",";\n\n            "],["Identifier","$_extras_for{$id}{$type}"],[""," = "],["Identifier","$extra"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$_extras_for{$id}{$type}"],[""," = {};\n        }\n\n        "],["Statement","unshift"],[""," "],["Identifier","@{"],[""," "],["Identifier","$_filters_for{$id}{$type}"],[""," "],["Identifier","}"],["",", "],["Keyword","sub "],["","{\n            "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n\n            "],["Comment","# send our closured %properties var instead"],["","\n            "],["Comment","# so newline(), indent(), etc can work it"],["","\n            "],["Identifier","%properties"],[""," = "],["Identifier","%{"],[""," clone "],["Identifier","$p"],[""," "],["Identifier","}"],["",";\n            "],["Statement","delete"],[""," "],["Identifier","$properties{"],["String","filters"],["Identifier","}"],["","; "],["Comment","# no need to rework filters"],["","\n            "],["Identifier","$code"],["","->("],["Identifier","$item"],["",", \\"],["Identifier","%properties"],["",");\n        };\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","$filters"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","return"],[""," "],["Identifier","$_filters_for{$id}"],["",";\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","$extras"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","return"],[""," "],["Identifier","$_extras_for{$id}"],["",";\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","$newline"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","return"],[""," "],["Identifier","${$properties{"],["String","_linebreak"],["Identifier","}}"],[""," . ("],["String","' '"],[""," x "],["Identifier","$properties{"],["String","_current_indent"],["Identifier","}"],["",");\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","$indent"],[""," = "],["Keyword","sub "],["","{\n        "],["Identifier","$properties{"],["String","_current_indent"],["Identifier","}"],[""," += "],["Identifier","$properties{"],["String","indent"],["Identifier","}"],["",";\n        "],["Identifier","$properties{"],["String","_depth"],["Identifier","}"],["","++;\n        "],["Statement","return"],["",";\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","$outdent"],[""," = "],["Keyword","sub "],["","{\n        "],["Identifier","$properties{"],["String","_current_indent"],["Identifier","}"],[""," -= "],["Identifier","$properties{"],["String","indent"],["Identifier","}"],["",";\n        "],["Identifier","$properties{"],["String","_depth"],["Identifier","}"],["","--;\n        "],["Statement","return"],["",";\n    };\n\n    "],["Statement","my"],[""," "],["Identifier","$imported"],[""," = "],["Keyword","sub "],["Type","(\\[@$%&];%)"],[""," {\n        "],["Statement","my"],[""," ("],["Identifier","$item"],["",", "],["Identifier","$p"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","return"],[""," Data::Printer::p( "],["Identifier","$item"],["",", "],["Identifier","%properties"],[""," );\n    };\n\n    {\n        "],["Statement","no strict"],[""," "],["String","'refs'"],["",";\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":filter\""],["Identifier","}"],["","  = "],["Identifier","$filter"],["",";\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":indent\""],["Identifier","}"],["","  = "],["Identifier","$indent"],["",";\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":outdent\""],["Identifier","}"],[""," = "],["Identifier","$outdent"],["",";\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":newline\""],["Identifier","}"],[""," = "],["Identifier","$newline"],["",";\n\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":p\""],["Identifier","}"],[""," = "],["Identifier","$imported"],["",";\n\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":_filter_list\""],["Identifier","}"],["","   = "],["Identifier","$filters"],["",";\n        "],["Identifier","*{"],["String","\""],["Identifier","$caller"],["Special","\\:"],["String",":_extra_options\""],["Identifier","}"],[""," = "],["Identifier","$extras"],["",";\n    }\n};\n\n\n"],["Number","1"],["",";\n"],["Comment","__END__"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nData::Printer::Filter - Create powerful stand-alone filters for Data::Printer\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\nCreate your filter module:\n\n"],["PreProc","  package Data::Printer::Filter::MyFilter;"],["","\n"],["PreProc","  use strict;"],["","\n"],["PreProc","  use warnings;"],["","\n\n"],["PreProc","  use Data::Printer::Filter;"],["","\n\n"],["PreProc","  # type filter"],["","\n"],["PreProc","  filter 'SCALAR', sub {"],["","\n"],["PreProc","      my ($ref, $properties) = @_;"],["","\n"],["PreProc","      my $val = $$ref;"],["","\n      \n"],["PreProc","      if ($val > 100) {"],["","\n"],["PreProc","          return 'too big!!';"],["","\n"],["PreProc","      }"],["","\n"],["PreProc","      else {"],["","\n"],["PreProc","          return $val;"],["","\n"],["PreProc","      }"],["","\n"],["PreProc","  };"],["","\n\n"],["PreProc","  # you can also filter objects of any class"],["","\n"],["PreProc","  filter 'Some::Class', sub {"],["","\n"],["PreProc","      my ($object, $properties) = @_;"],["","\n\n"],["PreProc","      return $ref->some_method;   # or whatever"],["","\n\n"],["PreProc","      # see 'HELPER FUNCTIONS' below for"],["","\n"],["PreProc","      # customization options, including"],["","\n"],["PreProc","      # proper indentation."],["","\n"],["PreProc","  };"],["","\n\n"],["PreProc","  1;"],["","\n\n\nLater, in your main code:\n\n"],["PreProc","  use Data::Printer {"],["","\n"],["PreProc","      filters => {"],["","\n"],["PreProc","          -external => [ 'MyFilter', 'OtherFilter' ],"],["","\n\n"],["PreProc","          # you can still add regular (inline) filters"],["","\n"],["PreProc","          SCALAR => sub {"],["","\n"],["PreProc","              ..."],["","\n"],["PreProc","          }"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  };"],["","\n\n\n\n"],["Statement","=head1"],[""," "],["String","WARNING - ALPHA CODE (VERY LOOSE API)"],["","\n\nWe are still experimenting with the standalone filter syntax, so\n"],["Identifier","B<< filters written like so may break in the future without any warning! >>"],["","\n\n"],["Identifier","B<< If you care, or have any suggestions >>"],["",", please drop me a line via RT, email,\nor find me ('garu') on irc.perl.org.\n\nYou have been warned.\n\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\n"],["Identifier","L<Data::Printer>"],[""," lets you add custom filters to display data structures and\nobjects, by either specifying them during \"use\", in the "],["Identifier","C<.dataprinter>"],["","\nconfiguration file, or even in runtime customizations.\n\nBut there are times when you may want to group similar filters, or make\nthem standalone in order to be easily reutilized in other environments and\napplications, or even upload them to CPAN so other people can benefit from\na cleaner - and clearer - object/structure dump.\n\nThis is where "],["Identifier","C<Data::Printer::Filter>"],[""," comes in. It "],["Identifier","B<exports>"],[""," into your\npackage's namespace the "],["Identifier","L</filter>"],[""," function, along with some helpers to\ncreate custom filter packages.\n\n"],["Identifier","L<Data::Printer>"],[""," recognizes all filters in the "],["Identifier","C<Data::Printer::Filter::*>"],["","\nnamespace. You can load them by specifying them in the '-external' filter\nlist (note the dash, to avoid clashing with a potential class or pragma\nlabelled 'external'):\n\n"],["PreProc","  use Data::Printer {"],["","\n"],["PreProc","      filters => {"],["","\n"],["PreProc","          -external => 'MyFilter',"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  };"],["","\n\nThis will load all filters defined by the "],["Identifier","C<Data::Printer::Filter::MyFilter>"],["","\nmodule.\n\nIf there are more than one filter, use an array reference instead:\n\n"],["PreProc","  -external => [ 'MyFilter', 'MyOtherFilter' ]"],["","\n\n"],["Identifier","B<< IMPORTANT: THIS WAY OF LOADING EXTERNAL PLUGINS IS EXPERIMENTAL AND"],["","\n"],["Identifier","SUBJECT TO SUDDEN CHANGE! IF YOU CARE, AND/OR HAVE IDEAS ON A BETTER API,"],["","\n"],["Identifier","PLEASE LET US KNOW >>"],["","\n\n"],["Statement","=head1"],[""," "],["String","HELPER FUNCTIONS"],["","\n\n"],["Statement","=head2"],[""," "],["String","filter TYPE, sub { ... };"],["","\n\nThe "],["Identifier","C<filter>"],[""," function creates a new filter for "],["Identifier","I<TYPE>"],["",", using\nthe given subref. The subref receives two arguments: the item\nitself - be it an object or a reference to a standard Perl type -\nand the properties in effect (so you can inspect for certain\noptions, etc). The subroutine is expected to return a string\ncontaining whatever it wants "],["Identifier","C<Data::Printer>"],[""," to display on screen.\n\n"],["Statement","=head2"],[""," "],["String","p()"],["","\n\nThis is the same as "],["Identifier","C<Data::Printer>"],["","'s "],["Identifier","p()"],["",", only you can't rename it.\nYou can use this to throw some data structures back at "],["Identifier","C<Data::Printer>"],["","\nand use the results in your own return string - like when manipulating\nhashes or arrays.\n\n"],["Statement","=head2"],[""," "],["String","newline()"],["","\n\nThis helper returns a string using the linebreak as specified by the\ncaller's settings. For instance, it provides the proper indentation\nlevel of spaces for you and considers the "],["Identifier","C<multiline>"],[""," option to\navoid line breakage.\n\nIn other words, if you do this:\n\n"],["PreProc","   filter ARRAY => {"],["","\n"],["PreProc","       my ($ref, $p) = @_;"],["","\n"],["PreProc","       my $string = \"Hey!! I got this array:\";"],["","\n\n"],["PreProc","       foreach my $val (@$ref) {"],["","\n"],["PreProc","           $string .= newline . p($val);"],["","\n"],["PreProc","       }"],["","\n\n"],["PreProc","       return $string;"],["","\n"],["PreProc","   };"],["","\n\n... your "],["Identifier","C<p($val)>"],[""," returns will be properly indented, vertically aligned\nto your level of the data structure, while simply using \"\\n\" would just\nmake things messy if your structure has more than one level of depth.\n\n"],["Statement","=head2"],[""," "],["String","indent()"],["","\n\n"],["Statement","=head2"],[""," "],["String","outdent()"],["","\n\nThese two helpers let you increase/decrease the indentation level of\nyour data display, for "],["Identifier","C<newline()>"],[""," and nested "],["Identifier","C<p()>"],[""," calls inside your filters.\n\nFor example, the filter defined in the "],["Identifier","C<newline>"],[""," explanation above would\nshow the values on the same (vertically aligned) level as the \"I got this array\"\nmessage. If you wanted your array to be one level further deep, you could use\nthis instead:\n\n"],["PreProc","  filter ARRAY => {"],["","\n"],["PreProc","      my ($ref, $p) = @_;"],["","\n"],["PreProc","      my $string = \"Hey!! I got this array:\";"],["","\n\n"],["PreProc","      indent;"],["","\n"],["PreProc","      foreach my $val (@$ref) {"],["","\n"],["PreProc","          $string .= newline . p($val);"],["","\n"],["PreProc","      }"],["","\n"],["PreProc","      outdent;"],["","\n\n"],["PreProc","      return $string;"],["","\n"],["PreProc","  };"],["","\n\n\n"],["Statement","=head1"],[""," "],["String","COLORIZATION"],["","\n\nYou can use "],["Identifier","L<Term::ANSIColor>"],["","'s "],["Identifier","C<colored()>"],["","' for string\ncolorization. Data::Printer will automatically enable/disable\ncolors for you.\n\n"],["Statement","=head1"],[""," "],["String","EXISTING FILTERS"],["","\n\nThis is meant to provide a complete list of standalone filters for\nData::Printer available on CPAN. If you write one, please put it under\nthe "],["Identifier","C<Data::Printer::Filter::*>"],[""," namespace, and drop me a line so I can\nadd it to this list!\n\n"],["Statement","=head2"],[""," "],["String","Databases"],["","\n\n"],["Identifier","L<Data::Printer::Filter::DB>"],[""," provides filters for Database objects. So\nfar only DBI is covered, but more to come!\n\n"],["Statement","=head2"],[""," "],["String","Dates & Times"],["","\n\n"],["Identifier","L<Data::Printer::Filter::DateTime>"],[""," pretty-prints several date\nand time objects (not just DateTime) for you on the fly, including\nduration/delta objects!\n\n"],["Statement","=head2"],[""," "],["String","Digest"],["","\n\n"],["Identifier","L<Data::Printer::Filter::Digest>"],[""," displays a string containing the\nhash of the actual message digest instead of the object. Works on\n"],["Identifier","C<Digest::MD5>"],["",", "],["Identifier","C<Digest::SHA>"],["",", any digest class that inherits from\n"],["Identifier","C<Digest::base>"],[""," and some others that implement their own thing!\n\n"],["Statement","=head2"],[""," "],["String","ClassicRegex"],["","\n\n"],["Identifier","L<Data::Printer::Filter::ClassicRegex>"],[""," changes the way Data::Printer\ndumps regular expressions, doing it the classic "],["Identifier","C<qr//>"],[""," way that got\npopular in "],["Identifier","C<Data::Dumper>"],["",".\n\n"],["Statement","=head2"],[""," "],["String","URI"],["","\n\n"],["Identifier","L<Data::Printer::Filter::URI>"],[""," pretty-prints "],["Identifier","L<URI>"],[""," objects, displaying\nthe URI as a string instead of dumping the object.\n\n"],["Statement","=head2"],[""," "],["String","JSON"],["","\n\n"],["Identifier","L<Data::Printer::Filter::JSON>"],[""," lets you see your JSON structures\nreplacing boolean objects with simple "],["Identifier","C<true/false>"],[""," strings!\n\n"],["Statement","=head2"],[""," "],["String","URIs"],["","\n\n"],["Identifier","L<Data::Printer::Filter::URI>"],[""," filters through several "],["Identifier","L<URI>"],[""," manipulation\nclasses and displays the URI as a colored string. A very nice addition\nby Stanislaw Pusep (SYP).\n\n"],["Statement","=head1"],[""," "],["String","USING MORE THAN ONE FILTER FOR THE SAME TYPE/CLASS"],["","\n\nAs of version 0.13, standalone filters let you stack together\nfilters for the same type or class. Filters of the same type are\ncalled in order, until one of them returns a string. This lets\nyou have several filters inspecting the same given value until\none of them decides to actually treat it somehow.\n\nIf your filter catched a value and you don't want to treat it,\nsimply return and the next filter will be called. If there are no\nother filters for that particular class or type available, the\nstandard Data::Printer calls will be used.\n\nFor example:\n\n"],["PreProc","  filter SCALAR => sub {"],["","\n"],["PreProc","      my ($ref, $properties) = @_;"],["","\n"],["PreProc","      if ( Scalar::Util::looks_like_number $$ref ) {"],["","\n"],["PreProc","          return sprintf \"%.8d\", $$ref;"],["","\n"],["PreProc","      }"],["","\n"],["PreProc","      return; # lets the other SCALAR filter have a go"],["","\n"],["PreProc","  };"],["","\n\n"],["PreProc","  filter SCALAR => sub {"],["","\n"],["PreProc","      my ($ref, $properties) = @_;"],["","\n"],["PreProc","      return qq[\"$$ref\"];"],["","\n"],["PreProc","  };"],["","\n\nNote that this \"filter stack\" is not possible on inline filters, since\nit's a hash and keys with the same name are overwritten. Instead, you\ncan pass them as an array reference:\n\n"],["PreProc","  use Data::Printer filters => {"],["","\n"],["PreProc","      SCALAR => [ sub { ... }, sub { ... } ],"],["","\n"],["PreProc","  };"],["","\n\n\n"],["Statement","=head1"],[""," "],["String","SEE ALSO"],["","\n\n"],["Identifier","L<Data::Printer>"],["","\n\n\n"],["Statement","=head1"],[""," "],["String","LICENSE AND COPYRIGHT"],["","\n\nCopyright 2011 Breno G. de Oliveira "],["Identifier","C<< <garu at cpan.org> >>"],["",". All rights reserved.\n\nThis module is free software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See "],["Identifier","L<perlartistic>"],["",".\n\n\n"]]