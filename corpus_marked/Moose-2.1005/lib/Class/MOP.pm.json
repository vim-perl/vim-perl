[["","\n"],["Statement","package"],["Type"," Class::MOP"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["Float","5.008"],["",";\n\n"],["Statement","use "],["","MRO::Compat;\n\n"],["Statement","use "],["","Carp          "],["String","'confess'"],["",";\n"],["Statement","use "],["","Class::Load "],["Float","0.07"],[""," ();\n"],["Statement","use "],["","Scalar::Util  "],["String","'weaken'"],["",", "],["String","'isweak'"],["",", "],["String","'reftype'"],["",", "],["String","'blessed'"],["",";\n"],["Statement","use "],["","Data::OptList;\n"],["Statement","use "],["","Try::Tiny;\n\n"],["Statement","use "],["","Class::MOP::Mixin::AttributeCore;\n"],["Statement","use "],["","Class::MOP::Mixin::HasAttributes;\n"],["Statement","use "],["","Class::MOP::Mixin::HasMethods;\n"],["Statement","use "],["","Class::MOP::Class;\n"],["Statement","use "],["","Class::MOP::Attribute;\n"],["Statement","use "],["","Class::MOP::Method;\n\n"],["PreProc","BEGIN "],["","{\n    *IS_RUNNING_ON_5_10 = ("],["Identifier","$]"],[""," < "],["Float","5.009_005"],["",")\n        ? "],["Keyword","sub "],["Type","()"],[""," { "],["Number","0"],[""," }\n        : "],["Keyword","sub "],["Type","()"],[""," { "],["Number","1"],[""," };\n\n    "],["Comment","# this is either part of core or set up appropriately by MRO::Compat"],["","\n    *check_package_cache_flag = \\"],["Identifier","&"],["Type","mro::"],["Identifier","get_pkg_gen"],["",";\n}\n\nXSLoader::load(\n    "],["String","'Moose'"],["",",\n    "],["Identifier","$"],["Type","Class::"],["Identifier","MOP::{"],["String","VERSION"],["Identifier","}"],[""," ? "],["Identifier","${"],[""," "],["Identifier","$"],["Type","Class::"],["Identifier","MOP::{"],["String","VERSION"],["Identifier","}"],[""," "],["Identifier","}"],[""," : ()\n);\n\n{\n    "],["Comment","# Metaclasses are singletons, so we cache them here."],["","\n    "],["Comment","# there is no need to worry about destruction though"],["","\n    "],["Comment","# because they should die only when the program dies."],["","\n    "],["Comment","# After all, do package definitions even get reaped?"],["","\n    "],["Comment","# Anonymous classes manage their own destruction."],["","\n    "],["Statement","my"],[""," "],["Identifier","%METAS"],["",";\n\n    "],["Keyword","sub "],["Function","get_all_metaclasses         "],["","{        "],["Identifier","%METAS"],["","         }\n    "],["Keyword","sub "],["Function","get_all_metaclass_instances "],["","{ "],["Statement","values"],[""," "],["Identifier","%METAS"],["","         }\n    "],["Keyword","sub "],["Function","get_all_metaclass_names     "],["","{ "],["Statement","keys"],["","   "],["Identifier","%METAS"],["","         }\n    "],["Keyword","sub "],["Function","get_metaclass_by_name       "],["","{ "],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],["","         }\n    "],["Keyword","sub "],["Function","store_metaclass_by_name     "],["","{ "],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],[""," = "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," }\n    "],["Keyword","sub "],["Function","weaken_metaclass            "],["","{ weaken("],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],["",") }\n    "],["Keyword","sub "],["Function","metaclass_is_weak           "],["","{ isweak("],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],["",") }\n    "],["Keyword","sub "],["Function","does_metaclass_exist        "],["","{ "],["Statement","exists"],[""," "],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],[""," && "],["Operator","defined"],[""," "],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],[""," }\n    "],["Keyword","sub "],["Function","remove_metaclass_by_name    "],["","{ "],["Statement","delete"],[""," "],["Identifier","$METAS{$_["],["Number","0"],["Identifier","]}"],["","; "],["Statement","return"],[""," }\n\n    "],["Comment","# This handles instances as well as class names"],["","\n    "],["Keyword","sub "],["Function","class_of "],["","{\n        "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$class"],[""," = blessed("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") || "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",";\n        "],["Statement","return"],[""," "],["Identifier","$METAS{$class}"],["",";\n    }\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# We only cache metaclasses, meaning instances of"],["","\n    "],["Comment","# Class::MOP::Class. We do not cache instance of"],["","\n    "],["Comment","# Class::MOP::Package or Class::MOP::Module. Mostly"],["","\n    "],["Comment","# because I don't yet see a good reason to do so."],["","\n}\n\n"],["Keyword","sub "],["Function","load_class "],["","{\n    "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Class::Load::"],["Identifier","load_class"],["",";\n}\n\n"],["Keyword","sub "],["Function","load_first_existing_class "],["","{\n    "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Class::Load::"],["Identifier","load_first_existing_class"],["",";\n}\n\n"],["Keyword","sub "],["Function","is_class_loaded "],["","{\n    "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Class::Load::"],["Identifier","is_class_loaded"],["",";\n}\n\n"],["Keyword","sub "],["Function","_definition_context "],["","{\n    "],["Statement","my"],[""," "],["Identifier","%context"],["",";\n    "],["Identifier","@context{"],["String","qw(package file line)"],["Identifier","}"],[""," = "],["Statement","caller"],["","("],["Number","1"],["",");\n\n    "],["Statement","return"],[""," (\n        "],["String","definition_context"],[""," => \\"],["Identifier","%context"],["",",\n    );\n}\n\n"],["Comment","## ----------------------------------------------------------------------------"],["","\n"],["Comment","## Setting up our environment ..."],["","\n"],["Comment","## ----------------------------------------------------------------------------"],["","\n"],["Comment","## Class::MOP needs to have a few things in the global perl environment so"],["","\n"],["Comment","## that it can operate effectively. Those things are done here."],["","\n"],["Comment","## ----------------------------------------------------------------------------"],["","\n\n"],["Comment","# ... nothing yet actually ;)"],["","\n\n"],["Comment","## ----------------------------------------------------------------------------"],["","\n"],["Comment","## Bootstrapping"],["","\n"],["Comment","## ----------------------------------------------------------------------------"],["","\n"],["Comment","## The code below here is to bootstrap our MOP with itself. This is also"],["","\n"],["Comment","## sometimes called \"tying the knot\". By doing this, we make it much easier"],["","\n"],["Comment","## to extend the MOP through subclassing and such since now you can use the"],["","\n"],["Comment","## MOP itself to extend itself."],["","\n"],["Comment","##"],["","\n"],["Comment","## Yes, I know, that's weird and insane, but it's a good thing, trust me :)"],["","\n"],["Comment","## ----------------------------------------------------------------------------"],["","\n\n"],["Comment","# We need to add in the meta-attributes here so that"],["","\n"],["Comment","# any subclass of Class::MOP::* will be able to"],["","\n"],["Comment","# inherit them using _construct_instance"],["","\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Mixin::HasMethods"],["","\n\nClass::MOP::Mixin::HasMethods->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'_methods'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'_method_map'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::HasMethods::"],["Identifier","_method_map"],["","\n        },\n        "],["String","default"],[""," => "],["Keyword","sub "],["","{ {} },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::HasMethods->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'method_metaclass'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'method_metaclass'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::HasMethods::"],["Identifier","method_metaclass"],["","\n        },\n        "],["String","default"],["","  => "],["String","'Class::MOP::Method'"],["",",\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::HasMethods->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'wrapped_method_metaclass'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'wrapped_method_metaclass'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::HasMethods::"],["Identifier","wrapped_method_metaclass"],["","\n        },\n        "],["String","default"],["","  => "],["String","'Class::MOP::Method::Wrapped'"],["",",\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Mixin::HasMethods"],["","\n\nClass::MOP::Mixin::HasAttributes->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'attributes'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["Comment"," we need to do this in order"],["","\n            "],["Comment","# for the instance meta-object to"],["","\n            "],["Comment","# not fall into meta-circular death"],["","\n            "],["Comment","#"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'_attribute_map'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::HasAttributes::"],["Identifier","_attribute_map"],["","\n        },\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ {} },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::HasAttributes->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'attribute_metaclass'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'attribute_metaclass'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::HasAttributes::"],["Identifier","attribute_metaclass"],["","\n        },\n        "],["String","default"],["","  => "],["String","'Class::MOP::Attribute'"],["",",\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Package"],["","\n\nClass::MOP::Package->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'package'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["Comment"," we need to do this in order"],["","\n            "],["Comment","# for the instance meta-object to"],["","\n            "],["Comment","# not fall into meta-circular death"],["","\n            "],["Comment","#"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'name'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Package::"],["Identifier","name"],["","\n        },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Package->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'namespace'"],[""," => (\n        "],["String","reader"],[""," => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'namespace'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Package::"],["Identifier","namespace"],["","\n        },\n        "],["String","init_arg"],[""," => "],["Operator","undef"],["",",\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ \\"],["Operator","undef"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Module"],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# yeah this is kind of stretching things a bit,"],["","\n"],["Comment","# but truthfully the version should be an attribute"],["","\n"],["Comment","# of the Module, the weirdness comes from having to"],["","\n"],["Comment","# stick to Perl 5 convention and store it in the"],["","\n"],["Comment","# $VERSION package variable. Basically if you just"],["","\n"],["Comment","# squint at it, it will look how you want it to look."],["","\n"],["Comment","# Either as a package variable, or as a attribute of"],["","\n"],["Comment","# the metaclass, isn't abstraction great :)"],["","\n\nClass::MOP::Module->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'version'"],[""," => (\n        "],["String","reader"],[""," => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'version'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Module::"],["Identifier","version"],["","\n        },\n        "],["String","init_arg"],[""," => "],["Operator","undef"],["",",\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ \\"],["Operator","undef"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# By following the same conventions as version here,"],["","\n"],["Comment","# we are opening up the possibility that people can"],["","\n"],["Comment","# use the $AUTHORITY in non-Class::MOP modules as"],["","\n"],["Comment","# well."],["","\n\nClass::MOP::Module->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'authority'"],[""," => (\n        "],["String","reader"],[""," => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'authority'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Module::"],["Identifier","authority"],["","\n        },\n        "],["String","init_arg"],[""," => "],["Operator","undef"],["",",\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ \\"],["Operator","undef"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Class"],["","\n\nClass::MOP::Class->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'superclasses'"],[""," => (\n        "],["String","accessor"],[""," => {\n            "],["Comment","# "],["Todo","NOTE:"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'superclasses'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Class::"],["Identifier","superclasses"],["","\n        },\n        "],["String","init_arg"],[""," => "],["Operator","undef"],["",",\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ \\"],["Operator","undef"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Class->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'instance_metaclass'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["Comment"," we need to do this in order"],["","\n            "],["Comment","# for the instance meta-object to"],["","\n            "],["Comment","# not fall into meta-circular death"],["","\n            "],["Comment","#"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'instance_metaclass'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Class::"],["Identifier","instance_metaclass"],["","\n        },\n        "],["String","default"],["","  => "],["String","'Class::MOP::Instance'"],["",",\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Class->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'immutable_trait'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["String","'immutable_trait'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Class::"],["Identifier","immutable_trait"],["","\n        },\n        "],["String","default"],[""," => "],["String","\"Class::MOP::Class::Immutable::Trait\""],["",",\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Class->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'constructor_name'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["String","'constructor_name'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Class::"],["Identifier","constructor_name"],["",",\n        },\n        "],["String","default"],[""," => "],["String","\"new\""],["",",\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Class->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'constructor_class'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["String","'constructor_class'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Class::"],["Identifier","constructor_class"],["",",\n        },\n        "],["String","default"],[""," => "],["String","\"Class::MOP::Method::Constructor\""],["",",\n        _definition_context(),\n    ))\n);\n\n\nClass::MOP::Class->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'destructor_class'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["String","'destructor_class'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Class::"],["Identifier","destructor_class"],["",",\n        },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# we don't actually need to tie the knot with"],["","\n"],["Comment","# Class::MOP::Class here, it is actually handled"],["","\n"],["Comment","# within Class::MOP::Class itself in the"],["","\n"],["Comment","# _construct_class_instance method."],["","\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Mixin::AttributeCore"],["","\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'name'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["Comment"," we need to do this in order"],["","\n            "],["Comment","# for the instance meta-object to"],["","\n            "],["Comment","# not fall into meta-circular death"],["","\n            "],["Comment","#"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'name'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","name"],["","\n        },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'accessor'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'accessor'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","accessor"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_accessor'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_accessor"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'reader'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'reader'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","reader"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_reader'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_reader"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'initializer'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'initializer'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","initializer"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_initializer'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_initializer"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'definition_context'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'definition_context'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","definition_context"],["","     },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'writer'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'writer'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","writer"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_writer'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_writer"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'predicate'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'predicate'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","predicate"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_predicate'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_predicate"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'clearer'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'clearer'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","clearer"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_clearer'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_clearer"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'builder'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'builder'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","builder"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_builder'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_builder"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'init_arg'"],[""," => (\n        "],["String","reader"],["","    => { "],["String","'init_arg'"],["","     => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","init_arg"],["","     },\n        "],["String","predicate"],[""," => { "],["String","'has_init_arg'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_init_arg"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'default'"],[""," => (\n        "],["Comment","# default has a custom 'reader' method ..."],["","\n        "],["String","predicate"],[""," => { "],["String","'has_default'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_default"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Mixin::AttributeCore->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'insertion_order'"],[""," => (\n        "],["String","reader"],["","      => { "],["String","'insertion_order'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","insertion_order"],[""," },\n        "],["String","writer"],["","      => { "],["String","'_set_insertion_order'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","_set_insertion_order"],[""," },\n        "],["String","predicate"],["","   => { "],["String","'has_insertion_order'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Mixin::AttributeCore::"],["Identifier","has_insertion_order"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Attribute"],["","\nClass::MOP::Attribute->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'associated_class'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["Comment","# "],["Todo","NOTE:"],["Comment"," we need to do this in order"],["","\n            "],["Comment","# for the instance meta-object to"],["","\n            "],["Comment","# not fall into meta-circular death"],["","\n            "],["Comment","#"],["","\n            "],["Comment","# we just alias the original method"],["","\n            "],["Comment","# rather than re-produce it here"],["","\n            "],["String","'associated_class'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Attribute::"],["Identifier","associated_class"],["","\n        },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Attribute->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'associated_methods'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'associated_methods'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Attribute::"],["Identifier","associated_methods"],[""," },\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ [] },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Attribute->meta->add_method("],["String","'clone'"],[""," => "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->meta->clone_object("],["Identifier","$self"],["",", "],["Identifier","@_"],["",");\n});\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Method"],["","\nClass::MOP::Method->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'body'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'body'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::"],["Identifier","body"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'associated_metaclass'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'associated_metaclass'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::"],["Identifier","associated_metaclass"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'package_name'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'package_name'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::"],["Identifier","package_name"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'name'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'name'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::"],["Identifier","name"],[""," },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'original_method'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'original_method'"],["","      => \\"],["Identifier","&"],["Type","Class::MOP::Method::"],["Identifier","original_method"],[""," },\n        "],["String","writer"],["","   => { "],["String","'_set_original_method'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::"],["Identifier","_set_original_method"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Method::Wrapped"],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# the way this item is initialized, this"],["","\n"],["Comment","# really does not follow the standard"],["","\n"],["Comment","# practices of attributes, but we put"],["","\n"],["Comment","# it here for completeness"],["","\nClass::MOP::Method::Wrapped->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'modifier_table'"],[""," => (\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Method::Generated"],["","\n\nClass::MOP::Method::Generated->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'is_inline'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'is_inline'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Generated::"],["Identifier","is_inline"],[""," },\n        "],["String","default"],["","  => "],["Number","0"],["",",\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method::Generated->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'definition_context'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'definition_context'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Generated::"],["Identifier","definition_context"],[""," },\n        _definition_context(),\n    ))\n);\n\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Method::Inlined"],["","\n\nClass::MOP::Method::Inlined->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'_expected_method_class'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'_expected_method_class'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Inlined::"],["Identifier","_expected_method_class"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Method::Accessor"],["","\n\nClass::MOP::Method::Accessor->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'attribute'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["String","'associated_attribute'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Accessor::"],["Identifier","associated_attribute"],["","\n        },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method::Accessor->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'accessor_type'"],[""," => (\n        "],["String","reader"],["","   => { "],["String","'accessor_type'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Accessor::"],["Identifier","accessor_type"],[""," },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Method::Constructor"],["","\n\nClass::MOP::Method::Constructor->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'options'"],[""," => (\n        "],["String","reader"],["","   => {\n            "],["String","'options'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Constructor::"],["Identifier","options"],["","\n        },\n        "],["String","default"],["","  => "],["Keyword","sub "],["","{ +{} },\n        _definition_context(),\n    ))\n);\n\nClass::MOP::Method::Constructor->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'associated_metaclass'"],[""," => (\n        "],["String","init_arg"],[""," => "],["String","\"metaclass\""],["",", "],["Comment","# "],["Todo","FIXME"],["Comment"," alias and rename"],["","\n        "],["String","reader"],["","   => {\n            "],["String","'associated_metaclass'"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Method::Constructor::"],["Identifier","associated_metaclass"],["","\n        },\n        _definition_context(),\n    ))\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Instance"],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# these don't yet do much of anything, but are just"],["","\n"],["Comment","# included for completeness"],["","\n\nClass::MOP::Instance->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'associated_metaclass'"],["",",\n        "],["String","reader"],["","   => { "],["String","associated_metaclass"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Instance::"],["Identifier","associated_metaclass"],[""," },\n        _definition_context(),\n    ),\n);\n\nClass::MOP::Instance->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'_class_name'"],["",",\n        "],["String","init_arg"],[""," => "],["Operator","undef"],["",",\n        "],["String","reader"],["","   => { "],["String","_class_name"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Instance::"],["Identifier","_class_name"],[""," },\n        "],["Comment","#lazy     => 1, # not yet supported by Class::MOP but out our version does it anyway"],["","\n        "],["Comment","#default  => sub { $_[0]->associated_metaclass->name },"],["","\n        _definition_context(),\n    ),\n);\n\nClass::MOP::Instance->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'attributes'"],["",",\n        "],["String","reader"],["","   => { "],["String","attributes"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Instance::"],["Identifier","get_all_attributes"],[""," },\n        _definition_context(),\n    ),\n);\n\nClass::MOP::Instance->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'slots'"],["",",\n        "],["String","reader"],["","   => { "],["String","slots"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Instance::"],["Identifier","slots"],[""," },\n        _definition_context(),\n    ),\n);\n\nClass::MOP::Instance->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'slot_hash'"],["",",\n        "],["String","reader"],["","   => { "],["String","slot_hash"],[""," => \\"],["Identifier","&"],["Type","Class::MOP::Instance::"],["Identifier","slot_hash"],[""," },\n        _definition_context(),\n    ),\n);\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Object"],["","\n\n"],["Comment","# need to replace the meta method there with a real meta method object"],["","\nClass::MOP::Object->meta->_add_meta_method("],["String","'meta'"],["",");\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Class::MOP::Mixin"],["","\n\n"],["Comment","# need to replace the meta method there with a real meta method object"],["","\nClass::MOP::Mixin->meta->_add_meta_method("],["String","'meta'"],["",");\n\n"],["Statement","require"],[""," Class::MOP::Deprecated "],["Conditional","unless"],[""," "],["Statement","our"],[""," "],["Identifier","$no_deprecated"],["",";\n\n"],["Comment","# we need the meta instance of the meta instance to be created now, in order"],["","\n"],["Comment","# for the constructor to be able to use it"],["","\nClass::MOP::Instance->meta->get_meta_instance;\n\n"],["Comment","# pretend the add_method never happened. it hasn't yet affected anything"],["","\n"],["Operator","undef"],[""," Class::MOP::Instance->meta->{_package_cache_flag};\n\n"],["Comment","## --------------------------------------------------------"],["","\n"],["Comment","## Now close all the Class::MOP::* classes"],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["Comment"," we don't need to inline the accessors this only lengthens the compile"],["","\n"],["Comment","# time of the MOP, and gives us no actual benefits."],["","\n\n"],["Identifier","$_"],["","->meta->make_immutable(\n    "],["String","inline_constructor"],["","  => "],["Number","0"],["",",\n    "],["String","constructor_name"],["","    => "],["String","\"_new\""],["",",\n    "],["String","inline_accessors"],[""," => "],["Number","0"],["",",\n) "],["Repeat","for"],[""," "],["String","qw/"],["","\n"],["String","    Class::MOP::Package"],["","\n"],["String","    Class::MOP::Module"],["","\n"],["String","    Class::MOP::Class"],["","\n\n"],["String","    Class::MOP::Attribute"],["","\n"],["String","    Class::MOP::Method"],["","\n"],["String","    Class::MOP::Instance"],["","\n\n"],["String","    Class::MOP::Object"],["","\n\n"],["String","    Class::MOP::Method::Generated"],["","\n"],["String","    Class::MOP::Method::Inlined"],["","\n\n"],["String","    Class::MOP::Method::Accessor"],["","\n"],["String","    Class::MOP::Method::Constructor"],["","\n"],["String","    Class::MOP::Method::Wrapped"],["","\n\n"],["String","    Class::MOP::Method::Meta"],["","\n"],["String","    Class::MOP::Method::Overload"],["","\n"],["String","/"],["",";\n\n"],["Identifier","$_"],["","->meta->make_immutable(\n    "],["String","inline_constructor"],["","  => "],["Number","0"],["",",\n    "],["String","constructor_name"],["","    => "],["Operator","undef"],["",",\n    "],["String","inline_accessors"],[""," => "],["Number","0"],["",",\n) "],["Repeat","for"],[""," "],["String","qw/"],["","\n"],["String","    Class::MOP::Mixin"],["","\n"],["String","    Class::MOP::Mixin::AttributeCore"],["","\n"],["String","    Class::MOP::Mixin::HasAttributes"],["","\n"],["String","    Class::MOP::Mixin::HasMethods"],["","\n"],["String","/"],["",";\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: A Meta Object Protocol for Perl 5"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP - A Meta Object Protocol for Perl 5\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis module is a fully functioning meta object protocol for the\nPerl 5 object system. It makes no attempt to change the behavior or\ncharacteristics of the Perl 5 object system, only to create a\nprotocol for its manipulation and introspection.\n\nThat said, it does attempt to create the tools for building a rich set\nof extensions to the Perl 5 object system. Every attempt has been made\nto abide by the spirit of the Perl 5 object system that we all know\nand love.\n\nThis documentation is sparse on conceptual details. We suggest looking\nat the items listed in the "],["Identifier","L<SEE ALSO>"],[""," section for more\ninformation. In particular the book \"The Art of the Meta Object\nProtocol\" was very influential in the development of this system.\n\n"],["Statement","=head2"],[""," "],["String","What is a Meta Object Protocol?"],["","\n\nA meta object protocol is an API to an object system.\n\nTo be more specific, it abstracts the components of an object system\n(classes, object, methods, object attributes, etc.). These\nabstractions can then be used to inspect and manipulate the object\nsystem which they describe.\n\nIt can be said that there are two MOPs for any object system; the\nimplicit MOP and the explicit MOP. The implicit MOP handles things\nlike method dispatch or inheritance, which happen automatically as\npart of how the object system works. The explicit MOP typically\nhandles the introspection/reflection features of the object system.\n\nAll object systems have implicit MOPs. Without one, they would not\nwork. Explicit MOPs are much less common, and depending on the\nlanguage can vary from restrictive (Reflection in Java or C#) to wide\nopen (CLOS is a perfect example).\n\n"],["Statement","=head2"],[""," "],["String","Yet Another Class Builder! Why?"],["","\n\nThis is "],["Identifier","B<not>"],[""," a class builder so much as a "],["Identifier","I<class builder"],["","\n"],["Identifier","B<builder>>"],["",". The intent is that an end user will not use this module\ndirectly, but instead this module is used by module authors to build\nextensions and features onto the Perl 5 object system.\n\nThis system is used by "],["Identifier","L<Moose>"],["",", which supplies a powerful class\nbuilder system built entirely on top of "],["Identifier","C<Class::MOP>"],["",".\n\n"],["Statement","=head2"],[""," "],["String","Who is this module for?"],["","\n\nThis module is for anyone who has ever created or wanted to create a\nmodule for the Class:: namespace. The tools which this module provides\nmake doing complex Perl 5 wizardry simpler, by removing such barriers\nas the need to hack symbol tables, or understand the fine details of\nmethod dispatch.\n\n"],["Statement","=head2"],[""," "],["String","What changes do I have to make to use this module?"],["","\n\nThis module was designed to be as unobtrusive as possible. Many of its\nfeatures are accessible without "],["Identifier","B<any>"],[""," change to your existing\ncode. It is meant to be a complement to your existing code and not an\nintrusion on your code base. Unlike many other "],["Identifier","B<Class::>"],[""," modules,\nthis module "],["Identifier","B<does not>"],[""," require you subclass it, or even that you\n"],["Identifier","C<use>"],[""," it in within your module's package.\n\nThe only features which require additions to your code are the\nattribute handling and instance construction features, and these are\nboth completely optional features. The only reason for this is because\nPerl 5's object system does not actually have these features built\nin. More information about this feature can be found below.\n\n"],["Statement","=head2"],[""," "],["String","About Performance"],["","\n\nIt is a common misconception that explicit MOPs are a performance hit.\nThis is not a universal truth, it is a side-effect of some specific\nimplementations. For instance, using Java reflection is slow because\nthe JVM cannot take advantage of any compiler optimizations, and the\nJVM has to deal with much more runtime type information as well.\n\nReflection in C# is marginally better as it was designed into the\nlanguage and runtime (the CLR). In contrast, CLOS (the Common Lisp\nObject System) was built to support an explicit MOP, and so\nperformance is tuned for it.\n\nThis library in particular does its absolute best to avoid putting\n"],["Identifier","B<any>"],[""," drain at all upon your code's performance. In fact, by itself\nit does nothing to affect your existing code. So you only pay for what\nyou actually use.\n\n"],["Statement","=head2"],[""," "],["String","About Metaclass compatibility"],["","\n\nThis module makes sure that all metaclasses created are both upwards\nand downwards compatible. The topic of metaclass compatibility is\nhighly esoteric and is something only encountered when doing deep and\ninvolved metaclass hacking. There are two basic kinds of metaclass\nincompatibility; upwards and downwards.\n\nUpwards metaclass compatibility means that the metaclass of a\ngiven class is either the same as (or a subclass of) all of the\nclass's ancestors.\n\nDownward metaclass compatibility means that the metaclasses of a\ngiven class's ancestors are all the same as (or a subclass of) that\nmetaclass.\n\nHere is a diagram showing a set of two classes ("],["Identifier","C<A>"],[""," and "],["Identifier","C<B>"],["",") and\ntwo metaclasses ("],["Identifier","C<Meta::A>"],[""," and "],["Identifier","C<Meta::B>"],["",") which have correct\nmetaclass compatibility both upwards and downwards.\n\n"],["PreProc","    +---------+     +---------+"],["","\n"],["PreProc","    | Meta::A |<----| Meta::B |      <....... (instance of  )"],["","\n"],["PreProc","    +---------+     +---------+      <------- (inherits from)"],["","\n"],["PreProc","         ^               ^"],["","\n"],["PreProc","         :               :"],["","\n"],["PreProc","    +---------+     +---------+"],["","\n"],["PreProc","    |    A    |<----|    B    |"],["","\n"],["PreProc","    +---------+     +---------+"],["","\n\nIn actuality, "],["Identifier","I<all>"],[""," of a class's metaclasses must be compatible,\nnot just the class metaclass. That includes the instance, attribute,\nand method metaclasses, as well as the constructor and destructor\nclasses.\n\n"],["Identifier","C<Class::MOP>"],[""," will attempt to fix some simple types of\nincompatibilities. If all the metaclasses for the parent class are\n"],["Identifier","I<subclasses>"],[""," of the child's metaclasses then we can simply replace\nthe child's metaclasses with the parent's. In addition, if the child\nis missing a metaclass that the parent has, we can also just make the\nchild use the parent's metaclass.\n\nAs I said this is a highly esoteric topic and one you will only run\ninto if you do a lot of subclassing of "],["Identifier","L<Class::MOP::Class>"],["",". If you\nare interested in why this is an issue see the paper "],["Identifier","I<Uniform and"],["","\n"],["Identifier","safe metaclass composition>"],[""," linked to in the "],["Identifier","L<SEE ALSO>"],[""," section of\nthis document.\n\n"],["Statement","=head2"],[""," "],["String","Using custom metaclasses"],["","\n\nAlways use the "],["Identifier","L<metaclass>"],[""," pragma when using a custom metaclass, this\nwill ensure the proper initialization order and not accidentally\ncreate an incorrect type of metaclass for you. This is a very rare\nproblem, and one which can only occur if you are doing deep metaclass\nprogramming. So in other words, don't worry about it.\n\nNote that if you're using "],["Identifier","L<Moose>"],[""," we encourage you to "],["Identifier","I<not>"],[""," use the\n"],["Identifier","L<metaclass>"],[""," pragma, and instead use "],["Identifier","L<Moose::Util::MetaRole>"],[""," to apply\nroles to a class's metaclasses. This topic is covered at length in\nvarious "],["Identifier","L<Moose::Cookbook>"],[""," recipes.\n\n"],["Statement","=head1"],[""," "],["String","PROTOCOLS"],["","\n\nThe meta-object protocol is divided into 4 main sub-protocols:\n\n"],["Statement","=head2"],[""," "],["String","The Class protocol"],["","\n\nThis provides a means of manipulating and introspecting a Perl 5\nclass. It handles symbol table hacking for you, and provides a rich\nset of methods that go beyond simple package introspection.\n\nSee "],["Identifier","L<Class::MOP::Class>"],[""," for more details.\n\n"],["Statement","=head2"],[""," "],["String","The Attribute protocol"],["","\n\nThis provides a consistent representation for an attribute of a Perl 5\nclass. Since there are so many ways to create and handle attributes in\nPerl 5 OO, the Attribute protocol provide as much of a unified\napproach as possible. Of course, you are always free to extend this\nprotocol by subclassing the appropriate classes.\n\nSee "],["Identifier","L<Class::MOP::Attribute>"],[""," for more details.\n\n"],["Statement","=head2"],[""," "],["String","The Method protocol"],["","\n\nThis provides a means of manipulating and introspecting methods in the\nPerl 5 object system. As with attributes, there are many ways to\napproach this topic, so we try to keep it pretty basic, while still\nmaking it possible to extend the system in many ways.\n\nSee "],["Identifier","L<Class::MOP::Method>"],[""," for more details.\n\n"],["Statement","=head2"],[""," "],["String","The Instance protocol"],["","\n\nThis provides a layer of abstraction for creating object instances.\nSince the other layers use this protocol, it is relatively easy to\nchange the type of your instances from the default hash reference to\nsome other type of reference. Several examples are provided in the\n"],["Identifier","F<examples/>"],[""," directory included in this distribution.\n\nSee "],["Identifier","L<Class::MOP::Instance>"],[""," for more details.\n\n"],["Statement","=head1"],[""," "],["String","FUNCTIONS"],["","\n\nNote that this module does not export any constants or functions.\n\n"],["Statement","=head2"],[""," "],["String","Utility functions"],["","\n\nNote that these are all called as "],["Identifier","B<functions, not methods>"],["",".\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::get_code_info($code)>"],["","\n\nThis function returns two values, the name of the package the "],["Identifier","C<$code>"],["","\nis from and the name of the "],["Identifier","C<$code>"],[""," itself. This is used by several\nelements of the MOP to determine where a given "],["Identifier","C<$code>"],[""," reference is\nfrom.\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::class_of($instance_or_class_name)>"],["","\n\nThis will return the metaclass of the given instance or class name.  If the\nclass lacks a metaclass, no metaclass will be initialized, and "],["Identifier","C<undef>"],[""," will be\nreturned.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Metaclass cache functions"],["","\n\n"],["Identifier","C<Class::MOP>"],[""," holds a cache of metaclasses. The following are functions\n("],["Identifier","B<not methods>"],["",") which can be used to access that cache. It is not\nrecommended that you mess with these. Bad things could happen, but if\nyou are brave and willing to risk it: go for it!\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::get_all_metaclasses>"],["","\n\nThis will return a hash of all the metaclass instances that have\nbeen cached by "],["Identifier","L<Class::MOP::Class>"],["",", keyed by the package name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::get_all_metaclass_instances>"],["","\n\nThis will return a list of all the metaclass instances that have\nbeen cached by "],["Identifier","L<Class::MOP::Class>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::get_all_metaclass_names>"],["","\n\nThis will return a list of all the metaclass names that have\nbeen cached by "],["Identifier","L<Class::MOP::Class>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::get_metaclass_by_name($name)>"],["","\n\nThis will return a cached "],["Identifier","L<Class::MOP::Class>"],[""," instance, or nothing\nif no metaclass exists with that "],["Identifier","C<$name>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::store_metaclass_by_name($name, $meta)>"],["","\n\nThis will store a metaclass in the cache at the supplied "],["Identifier","C<$key>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::weaken_metaclass($name)>"],["","\n\nIn rare cases (e.g. anonymous metaclasses) it is desirable to\nstore a weakened reference in the metaclass cache. This\nfunction will weaken the reference to the metaclass stored\nin "],["Identifier","C<$name>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::metaclass_is_weak($name)>"],["","\n\nReturns true if the metaclass for "],["Identifier","C<$name>"],[""," has been weakened\n(via "],["Identifier","C<weaken_metaclass>"],["",").\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::does_metaclass_exist($name)>"],["","\n\nThis will return true of there exists a metaclass stored in the\n"],["Identifier","C<$name>"],[""," key, and return false otherwise.\n\n"],["Statement","=item"],[""," "],["Identifier","B<Class::MOP::remove_metaclass_by_name($name)>"],["","\n\nThis will remove the metaclass stored in the "],["Identifier","C<$name>"],[""," key.\n\n"],["Statement","=back"],["","\n\nSome utility functions (such as "],["Identifier","C<Class::MOP::load_class>"],["",") that were\npreviously defined in "],["Identifier","C<Class::MOP>"],[""," regarding loading of classes have been\nextracted to "],["Identifier","L<Class::Load>"],["",". Please see "],["Identifier","L<Class::Load>"],[""," for documentation.\n\n"],["Statement","=head1"],[""," "],["String","SEE ALSO"],["","\n\n"],["Statement","=head2"],[""," "],["String","Books"],["","\n\nThere are very few books out on Meta Object Protocols and Metaclasses\nbecause it is such an esoteric topic. The following books are really\nthe only ones I have found. If you know of any more, "],["Identifier","B<I<please>>"],["","\nemail me and let me know, I would love to hear about them.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<The Art of the Meta Object Protocol>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<Advances in Object-Oriented Metalevel Architecture and Reflection>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<Putting MetaClasses to Work>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<Smalltalk: The Language>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Papers"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","\"Uniform and safe metaclass composition\""],["","\n\nAn excellent paper by the people who brought us the original Traits paper.\nThis paper is on how Traits can be used to do safe metaclass composition,\nand offers an excellent introduction section which delves into the topic of\nmetaclass compatibility.\n\n"],["Identifier","L<http://scg.unibe.ch/archive/papers/Duca05ySafeMetaclassTrait.pdf>"],["","\n\n"],["Statement","=item"],[""," "],["String","\"Safe Metaclass Programming\""],["","\n\nThis paper seems to precede the above paper, and propose a mix-in based\napproach as opposed to the Traits based approach. Both papers have similar\ninformation on the metaclass compatibility problem space.\n\n"],["Identifier","L<http://citeseer.ist.psu.edu/37617.html>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Prior Art"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","The Perl 6 MetaModel work in the Pugs project"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","L<http://svn.openfoundry.org/pugs/misc/Perl-MetaModel/>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","L<http://github.com/perl6/p5-modules/tree/master/Perl6-ObjectSpace/>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Articles"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","CPAN Module Review of Class::MOP"],["","\n\n"],["Identifier","L<http://www.oreillynet.com/onlamp/blog/2006/06/cpan_module_review_classmop.html>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","SIMILAR MODULES"],["","\n\nAs I have said above, this module is a class-builder-builder, so it is\nnot the same thing as modules like "],["Identifier","L<Class::Accessor>"],[""," and\n"],["Identifier","L<Class::MethodMaker>"],["",". That being said there are very few modules on CPAN\nwith similar goals to this module. The one I have found which is most\nlike this module is "],["Identifier","L<Class::Meta>"],["",", although its philosophy and the MOP it\ncreates are very different from this modules.\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nAll complex software has bugs lurking in it, and this module is no\nexception.\n\nPlease report any bugs to "],["Identifier","C<bug-class-mop@rt.cpan.org>"],["",", or through the\nweb interface at "],["Identifier","L<http://rt.cpan.org>"],["",".\n\nYou can also discuss feature requests or possible bugs on the Moose\nmailing list (moose"],["Identifier","@perl"],["",".org) or on IRC at\n"],["Identifier","L<irc://irc.perl.org/#moose>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","ACKNOWLEDGEMENTS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","Rob Kinyon"],["","\n\nThanks to Rob for actually getting the development of this module kick-started.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]