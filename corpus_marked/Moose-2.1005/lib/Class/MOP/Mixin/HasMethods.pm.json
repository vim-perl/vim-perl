[["Statement","package"],["Type"," Class::MOP::Mixin::HasMethods"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Mixin::HasMethods::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Mixin::HasMethods::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Class::MOP::Method::Meta;\n"],["Statement","use "],["","Class::MOP::Method::Overload;\n\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'reftype'"],["",";\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Sub::Name    "],["String","'subname'"],["",";\n\n"],["Statement","use overload"],[""," ();\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Mixin'"],["",";\n\n"],["Keyword","sub "],["Function","_meta_method_class "],["","{ "],["String","'Class::MOP::Method::Meta'"],[""," }\n\n"],["Keyword","sub "],["Function","_add_meta_method "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$existing_method"],[""," = "],["Identifier","$self"],["","->can("],["String","'find_method_by_name'"],["",")\n                              ? "],["Identifier","$self"],["","->find_method_by_name("],["Identifier","$name"],["",")\n                              : "],["Identifier","$self"],["","->get_method("],["Identifier","$name"],["",");\n    "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$existing_method"],["","\n           && "],["Identifier","$existing_method"],["","->isa("],["Identifier","$self"],["","->_meta_method_class);\n    "],["Identifier","$self"],["","->add_method(\n        "],["Identifier","$name"],[""," => "],["Identifier","$self"],["","->_meta_method_class->wrap(\n            "],["String","name"],["","                 => "],["Identifier","$name"],["",",\n            "],["String","package_name"],["","         => "],["Identifier","$self"],["","->name,\n            "],["String","associated_metaclass"],[""," => "],["Identifier","$self"],["",",\n        )\n    );\n}\n\n"],["Keyword","sub "],["Function","wrap_method_body "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["String","'CODE'"],[""," "],["Operator","eq"],[""," reftype "],["Identifier","$args{"],["String","body"],["Identifier","}"],[""," )\n        || confess "],["String","\"Your code block must be a CODE reference\""],["",";\n\n    "],["Identifier","$self"],["","->method_metaclass->wrap(\n        "],["String","package_name"],[""," => "],["Identifier","$self"],["","->name,\n        "],["Identifier","%args"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","add_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method"],[""," ) = "],["Identifier","@_"],["",";\n    ( "],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],[""," )\n        || confess "],["String","\"You must define a method name\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$package_name"],[""," = "],["Identifier","$self"],["","->name;\n\n    "],["Statement","my"],[""," "],["Identifier","$body"],["",";\n    "],["Conditional","if"],[""," ( blessed("],["Identifier","$method"],["",") && "],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method'"],["",") ) {\n        "],["Identifier","$body"],[""," = "],["Identifier","$method"],["","->body;\n        "],["Conditional","if"],[""," ( "],["Identifier","$method"],["","->package_name "],["Operator","ne"],[""," "],["Identifier","$package_name"],[""," ) {\n            "],["Identifier","$method"],[""," = "],["Identifier","$method"],["","->clone(\n                "],["String","package_name"],[""," => "],["Identifier","$package_name"],["",",\n                "],["String","name"],["","         => "],["Identifier","$method_name"],["",",\n            );\n        }\n\n        "],["Identifier","$method"],["","->attach_to_class("],["Identifier","$self"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Comment","# If a raw code reference is supplied, its method object is not created."],["","\n        "],["Comment","# The method object won't be created until required."],["","\n        "],["Identifier","$body"],[""," = "],["Identifier","$method"],["",";\n    }\n\n    "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","} = "],["Identifier","$method"],["",";\n\n    "],["Statement","my"],[""," ("],["Identifier","$current_package"],["",", "],["Identifier","$current_name"],["",") = Class::MOP::get_code_info("],["Identifier","$body"],["",");\n\n    subname("],["Identifier","$package_name"],[""," . "],["String","'::'"],[""," . "],["Identifier","$method_name"],["",", "],["Identifier","$body"],["",")\n        "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$current_name"],[""," && "],["Identifier","$current_name"],[""," !~ "],["Statement","/"],["String","^__ANON__"],["Statement","/"],["",";\n\n    "],["Identifier","$self"],["","->add_package_symbol("],["String","\"&"],["Identifier","$method_name"],["String","\""],["",", "],["Identifier","$body"],["",");\n\n    "],["Comment","# we added the method to the method map too, so it's still valid"],["","\n    "],["Identifier","$self"],["","->update_package_cache_flag;\n}\n\n"],["Keyword","sub "],["Function","_code_is_mine "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$code"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," ( "],["Identifier","$code_package"],["",", "],["Identifier","$code_name"],[""," ) = Class::MOP::get_code_info("],["Identifier","$code"],["",");\n\n    "],["Statement","return"],[""," ( "],["Identifier","$code_package"],[""," && "],["Identifier","$code_package"],[""," "],["Operator","eq"],[""," "],["Identifier","$self"],["","->name )\n        || ( "],["Identifier","$code_package"],[""," "],["Operator","eq"],[""," "],["String","'constant'"],[""," && "],["Identifier","$code_name"],[""," "],["Operator","eq"],[""," "],["String","'__ANON__'"],[""," );\n}\n\n"],["Keyword","sub "],["Function","has_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$method_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],[""," )\n        || confess "],["String","\"You must define a method name\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->_get_maybe_raw_method("],["Identifier","$method_name"],["",")\n        "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Statement","return"],[""," "],["Operator","defined"],["","("],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","} = "],["Identifier","$method"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$method_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],[""," )\n        || confess "],["String","\"You must define a method name\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->_get_maybe_raw_method("],["Identifier","$method_name"],["",")\n        "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$method"],[""," "],["Conditional","if"],[""," blessed("],["Identifier","$method"],["",") && "],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method'"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","} = "],["Identifier","$self"],["","->wrap_method_body(\n        "],["String","body"],["","                 => "],["Identifier","$method"],["",",\n        "],["String","name"],["","                 => "],["Identifier","$method_name"],["",",\n        "],["String","associated_metaclass"],[""," => "],["Identifier","$self"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_get_maybe_raw_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$method_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$map_entry"],[""," = "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","};\n    "],["Statement","return"],[""," "],["Identifier","$map_entry"],[""," "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$map_entry"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Identifier","$self"],["","->get_package_symbol("],["String","\"&"],["Identifier","$method_name"],["String","\""],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$code"],[""," && "],["Identifier","$self"],["","->_code_is_mine("],["Identifier","$code"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$code"],["",";\n}\n\n"],["Keyword","sub "],["Function","remove_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$method_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],[""," )\n        || confess "],["String","\"You must define a method name\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$removed_method"],[""," = "],["Statement","delete"],[""," "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","};\n\n    "],["Identifier","$self"],["","->remove_package_symbol("],["String","\"&"],["Identifier","$method_name"],["String","\""],["",");\n\n    "],["Identifier","$removed_method"],["","->detach_from_class\n        "],["Conditional","if"],[""," blessed("],["Identifier","$removed_method"],["",") && "],["Identifier","$removed_method"],["","->isa("],["String","'Class::MOP::Method'"],["",");\n\n    "],["Comment","# still valid, since we just removed the method from the map"],["","\n    "],["Identifier","$self"],["","->update_package_cache_flag;\n\n    "],["Statement","return"],[""," "],["Identifier","$removed_method"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_method_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Statement","keys"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_full_method_map "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_get_local_methods "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Statement","values"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_full_method_map "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_restore_metamethods_from "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$old_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," ("],["Identifier","$old_meta"],["","->_get_local_methods) {\n        "],["Identifier","$method"],["","->_make_compatible_with("],["Identifier","$self"],["","->method_metaclass);\n        "],["Identifier","$self"],["","->add_method("],["Identifier","$method"],["","->"],["String","name"],[""," => "],["Identifier","$method"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","reset_package_cache_flag  "],["","{ ("],["Statement","shift"],["",")->{"],["String","'_package_cache_flag'"],["","} = "],["Operator","undef"],[""," }\n"],["Keyword","sub "],["Function","update_package_cache_flag "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# we can manually update the cache number"],["","\n    "],["Comment","# since we are actually adding the method"],["","\n    "],["Comment","# to our cache as well. This avoids us"],["","\n    "],["Comment","# having to regenerate the method_map."],["","\n    "],["Comment","# - SL"],["","\n    "],["Identifier","$self->{"],["String","'_package_cache_flag'"],["Identifier","}"],[""," = Class::MOP::check_package_cache_flag("],["Identifier","$self"],["","->name);\n}\n\n"],["Keyword","sub "],["Function","_full_method_map "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$pkg_gen"],[""," = Class::MOP::check_package_cache_flag("],["Identifier","$self"],["","->name);\n\n    "],["Conditional","if"],[""," (("],["Identifier","$self->{"],["String","_package_cache_flag_full"],["Identifier","}"],[""," || -"],["Number","1"],["",") != "],["Identifier","$pkg_gen"],["",") {\n        "],["Comment","# forcibly reify all method map entries"],["","\n        "],["Identifier","$self"],["","->get_method("],["Identifier","$_"],["",")\n            "],["Repeat","for"],[""," "],["Identifier","$self"],["","->list_all_package_symbols("],["String","'CODE'"],["",");\n        "],["Identifier","$self->{"],["String","_package_cache_flag_full"],["Identifier","}"],[""," = "],["Identifier","$pkg_gen"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_method_map;\n}\n\n"],["Comment","# overloading"],["","\n\n"],["Statement","my"],[""," "],["Identifier","$overload_operators"],["",";\n"],["Keyword","sub "],["Function","overload_operators "],["","{\n    "],["Identifier","$overload_operators"],[""," ||= ["],["Statement","map"],[""," "],["Statement","{"],[""," "],["Statement","split"],[""," "],["Statement","/"],["Special","\\s+"],["Statement","/"],[""," "],["Statement","}"],[""," "],["Statement","values"],[""," "],["Identifier","%"],["Type","overload::"],["Identifier","ops"],["","];\n    "],["Statement","return"],[""," "],["Identifier","@$overload_operators"],["",";\n}\n\n"],["Keyword","sub "],["Function","is_overloaded "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," overload::Overloaded("],["Identifier","$self"],["","->name);\n}\n\n"],["Comment","# "],["Todo","XXX"],["Comment"," this could probably stand to be cached, but i figure it should be"],["","\n"],["Comment","# uncommon enough to not particularly matter"],["","\n"],["Keyword","sub "],["Function","_overload_map "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," {} "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->is_overloaded;\n\n    "],["Statement","my"],[""," "],["Identifier","%map"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$op"],[""," ("],["Identifier","$self"],["","->overload_operators) {\n        "],["Statement","my"],[""," "],["Identifier","$body"],[""," = "],["Identifier","$self"],["","->_get_overloaded_operator_body("],["Identifier","$op"],["",");\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$body"],["",";\n        "],["Identifier","$map{$op}"],[""," = "],["Identifier","$body"],["",";\n    }\n\n    "],["Statement","return"],[""," \\"],["Identifier","%map"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_overload_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Statement","keys"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_overload_map "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_all_overloaded_operators "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$map"],[""," = "],["Identifier","$self"],["","->_overload_map;\n    "],["Statement","return"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$self"],["","->_wrap_overload("],["Identifier","$_"],["",", "],["Identifier","$map->{$_}"],["",") "],["Statement","}"],[""," "],["Statement","keys"],[""," "],["Identifier","%$map"],["",";\n}\n\n"],["Keyword","sub "],["Function","has_overloaded_operator "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$op"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Operator","defined"],[""," "],["Identifier","$self"],["","->_get_overloaded_operator_body("],["Identifier","$op"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_overloaded_operator "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$op"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$body"],[""," = "],["Identifier","$self"],["","->_get_overloaded_operator_body("],["Identifier","$op"],["",");\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$body"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_wrap_overload("],["Identifier","$op"],["",", "],["Identifier","$body"],["",");\n}\n\n"],["Keyword","sub "],["Function","add_overloaded_operator "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$op"],["",", "],["Identifier","$body"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$self"],["","->name->overload::OVERLOAD("],["Identifier","$op"],[""," => "],["Identifier","$body"],["",");\n}\n\n"],["Keyword","sub "],["Function","remove_overloaded_operator "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$op"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$]"],[""," < "],["Float","5.018"],[""," ) {\n        "],["Comment","# ugh, overload.pm provides no api for this - but the problem that"],["","\n        "],["Comment","# makes this necessary has been fixed in 5.18"],["","\n        "],["Identifier","$self"],["","->get_or_add_package_symbol("],["String","'%OVERLOAD'"],["",")->{dummy}++;\n    }\n\n    "],["Identifier","$self"],["","->remove_package_symbol("],["String","'&('"],[""," . "],["Identifier","$op"],["",");\n}\n\n"],["Keyword","sub "],["Function","_get_overloaded_operator_body "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$op"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," overload::Method("],["Identifier","$self"],["","->name, "],["Identifier","$op"],["",");\n}\n\n"],["Keyword","sub "],["Function","_wrap_overload "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$op"],["",", "],["Identifier","$body"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," Class::MOP::Method::Overload->wrap(\n        "],["String","operator"],["","             => "],["Identifier","$op"],["",",\n        "],["String","package_name"],["","         => "],["Identifier","$self"],["","->name,\n        "],["String","associated_metaclass"],[""," => "],["Identifier","$self"],["",",\n        "],["String","body"],["","                 => "],["Identifier","$body"],["",",\n    );\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Methods for metaclasses which have methods"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Mixin::HasMethods - Methods for metaclasses which have methods\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class implements methods for metaclasses which have methods\n("],["Identifier","L<Class::MOP::Package>"],[""," and "],["Identifier","L<Moose::Meta::Role>"],["","). See "],["Identifier","L<Class::MOP::Package>"],["","\nfor API details.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]