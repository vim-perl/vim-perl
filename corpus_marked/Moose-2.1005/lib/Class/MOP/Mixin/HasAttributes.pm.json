[["Statement","package"],["Type"," Class::MOP::Mixin::HasAttributes"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Mixin::HasAttributes::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Mixin::HasAttributes::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Mixin'"],["",";\n\n"],["Keyword","sub "],["Function","add_attribute "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$attribute"],["","\n        = blessed( "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," ) ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : "],["Identifier","$self"],["","->attribute_metaclass->new("],["Identifier","@_"],["",");\n\n    ( "],["Identifier","$attribute"],["","->isa("],["String","'Class::MOP::Mixin::AttributeCore'"],["",") )\n        || confess\n        "],["String","\"Your attribute must be an instance of Class::MOP::Mixin::AttributeCore (or a subclass)\""],["",";\n\n    "],["Identifier","$self"],["","->_attach_attribute("],["Identifier","$attribute"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$attr_name"],[""," = "],["Identifier","$attribute"],["","->name;\n\n    "],["Identifier","$self"],["","->remove_attribute("],["Identifier","$attr_name"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_attribute("],["Identifier","$attr_name"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$order"],[""," = ( "],["Statement","scalar"],[""," "],["Statement","keys"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_attribute_map "],["Identifier","}"],[""," );\n    "],["Identifier","$attribute"],["","->_set_insertion_order("],["Identifier","$order"],["",");\n\n    "],["Identifier","$self"],["","->_attribute_map->{"],["Identifier","$attr_name"],["","} = "],["Identifier","$attribute"],["",";\n\n    "],["Comment","# This method is called to allow for installing accessors. Ideally, we'd"],["","\n    "],["Comment","# use method overriding, but then the subclass would be responsible for"],["","\n    "],["Comment","# making the attribute, which would end up with lots of code"],["","\n    "],["Comment","# duplication. Even more ideally, we'd use augment/inner, but this is"],["","\n    "],["Comment","# Class::MOP!"],["","\n    "],["Identifier","$self"],["","->_post_add_attribute("],["Identifier","$attribute"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->can("],["String","'_post_add_attribute'"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$attribute"],["",";\n}\n\n"],["Keyword","sub "],["Function","has_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$attribute_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Operator","defined"],[""," "],["Identifier","$attribute_name"],[""," )\n        || confess "],["String","\"You must define an attribute name\""],["",";\n\n    "],["Statement","exists"],[""," "],["Identifier","$self"],["","->_attribute_map->{"],["Identifier","$attribute_name"],["","};\n}\n\n"],["Keyword","sub "],["Function","get_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$attribute_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Operator","defined"],[""," "],["Identifier","$attribute_name"],[""," )\n        || confess "],["String","\"You must define an attribute name\""],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_attribute_map->{"],["Identifier","$attribute_name"],["","};\n}\n\n"],["Keyword","sub "],["Function","remove_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$attribute_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Operator","defined"],[""," "],["Identifier","$attribute_name"],[""," )\n        || confess "],["String","\"You must define an attribute name\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$removed_attribute"],[""," = "],["Identifier","$self"],["","->_attribute_map->{"],["Identifier","$attribute_name"],["","};\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$removed_attribute"],["",";\n\n    "],["Statement","delete"],[""," "],["Identifier","$self"],["","->_attribute_map->{"],["Identifier","$attribute_name"],["","};\n\n    "],["Statement","return"],[""," "],["Identifier","$removed_attribute"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_attribute_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","keys"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_attribute_map "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_restore_metaattributes_from "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$old_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Statement","sort"],[""," "],["Statement","{"],[""," "],["Identifier","$a"],["","->insertion_order <=> "],["Identifier","$b"],["","->insertion_order "],["Statement","}"],["","\n                       "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$old_meta"],["","->get_attribute("],["Identifier","$_"],["",") "],["Statement","}"],["","\n                           "],["Identifier","$old_meta"],["","->get_attribute_list) {\n        "],["Identifier","$attr"],["","->_make_compatible_with("],["Identifier","$self"],["","->attribute_metaclass);\n        "],["Identifier","$self"],["","->add_attribute("],["Identifier","$attr"],["",");\n    }\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Methods for metaclasses which have attributes"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Mixin::HasAttributes - Methods for metaclasses which have attributes\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class implements methods for metaclasses which have attributes\n("],["Identifier","L<Class::MOP::Class>"],[""," and "],["Identifier","L<Moose::Meta::Role>"],["","). See "],["Identifier","L<Class::MOP::Class>"],[""," for\nAPI details.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]