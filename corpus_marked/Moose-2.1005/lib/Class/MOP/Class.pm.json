[["","\n"],["Statement","package"],["Type"," Class::MOP::Class"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Class::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Class::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Class::MOP::Instance;\n"],["Statement","use "],["","Class::MOP::Method::Wrapped;\n"],["Statement","use "],["","Class::MOP::Method::Accessor;\n"],["Statement","use "],["","Class::MOP::Method::Constructor;\n"],["Statement","use "],["","Class::MOP::MiniTrait;\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Class::Load  "],["String","'is_class_loaded'"],["",", "],["String","'load_class'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'reftype'"],["",", "],["String","'weaken'"],["",";\n"],["Statement","use "],["","Sub::Name    "],["String","'subname'"],["",";\n"],["Statement","use "],["","Try::Tiny;\n"],["Statement","use "],["","List::MoreUtils "],["String","'all'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Module'"],["",",\n         "],["String","'Class::MOP::Mixin::HasAttributes'"],["",",\n         "],["String","'Class::MOP::Mixin::HasMethods'"],["",";\n\n"],["Comment","# Creation"],["","\n\n"],["Keyword","sub "],["Function","initialize "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$package_name"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","@_"],[""," % "],["Number","2"],[""," ) {\n        "],["Identifier","$package_name"],[""," = "],["Statement","shift"],["",";\n    } "],["Conditional","else"],[""," {\n        "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n        "],["Identifier","$package_name"],[""," = "],["Identifier","$options{"],["String","package"],["Identifier","}"],["",";\n    }\n\n    ("],["Identifier","$package_name"],[""," && !"],["Operator","ref"],["","("],["Identifier","$package_name"],["","))\n        || confess "],["String","\"You must pass a package name and it cannot be blessed\""],["",";\n\n    "],["Statement","return"],[""," Class::MOP::get_metaclass_by_name("],["Identifier","$package_name"],["",")\n        || "],["Identifier","$class"],["","->_construct_class_instance("],["String","package"],[""," => "],["Identifier","$package_name"],["",", "],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","reinitialize "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","\"package\""],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$old_metaclass"],[""," = blessed("],["Identifier","$options{"],["String","package"],["Identifier","}"],["",")\n        ? "],["Identifier","$options{"],["String","package"],["Identifier","}"],["","\n        : Class::MOP::get_metaclass_by_name("],["Identifier","$options{"],["String","package"],["Identifier","}"],["",");\n    "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],[""," = Class::MOP::metaclass_is_weak("],["Identifier","$old_metaclass"],["","->name)\n        "],["Conditional","if"],[""," !"],["Statement","exists"],[""," "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],["","\n        && blessed("],["Identifier","$old_metaclass"],["",")\n        && "],["Identifier","$old_metaclass"],["","->isa("],["String","'Class::MOP::Class'"],["",");\n    "],["Identifier","$old_metaclass"],["","->_remove_generated_metaobjects\n        "],["Conditional","if"],[""," "],["Identifier","$old_metaclass"],[""," && "],["Identifier","$old_metaclass"],["","->isa("],["String","'Class::MOP::Class'"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$new_metaclass"],[""," = "],["Identifier","$class"],["","->SUPER::reinitialize("],["Identifier","%options"],["",");\n    "],["Identifier","$new_metaclass"],["","->_restore_metaobjects_from("],["Identifier","$old_metaclass"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$old_metaclass"],[""," && "],["Identifier","$old_metaclass"],["","->isa("],["String","'Class::MOP::Class'"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$new_metaclass"],["",";\n}\n\n"],["Comment","# "],["Todo","NOTE:"],["Comment"," (meta-circularity)"],["","\n"],["Comment","# this is a special form of _construct_instance"],["","\n"],["Comment","# (see below), which is used to construct class"],["","\n"],["Comment","# meta-object instances for any Class::MOP::*"],["","\n"],["Comment","# class. All other classes will use the more"],["","\n"],["Comment","# normal &construct_instance."],["","\n"],["Keyword","sub "],["Function","_construct_class_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],["","        = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$options"],["","      = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n    "],["Statement","my"],[""," "],["Identifier","$package_name"],[""," = "],["Identifier","$options->{"],["String","package"],["Identifier","}"],["",";\n    ("],["Operator","defined"],[""," "],["Identifier","$package_name"],[""," && "],["Identifier","$package_name"],["",")\n        || confess "],["String","\"You must pass a package name\""],["",";\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# return the metaclass if we have it cached,"],["","\n    "],["Comment","# and it is still defined (it has not been"],["","\n    "],["Comment","# reaped by DESTROY yet, which can happen"],["","\n    "],["Comment","# annoyingly enough during global destruction)"],["","\n\n    "],["Conditional","if"],[""," ("],["Operator","defined"],["","("],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$package_name"],["","))) {\n        "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n    }\n\n    "],["Identifier","$class"],["","\n        = "],["Operator","ref"],[""," "],["Identifier","$class"],["","\n        ? "],["Identifier","$class"],["","->_real_ref_name\n        : "],["Identifier","$class"],["",";\n\n    "],["Comment","# now create the metaclass"],["","\n    "],["Statement","my"],[""," "],["Identifier","$meta"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$class"],[""," "],["Operator","eq"],[""," "],["String","'Class::MOP::Class'"],["",") {\n        "],["Identifier","$meta"],[""," = "],["Identifier","$class"],["","->_new("],["Identifier","$options"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# it is safe to use meta here because"],["","\n        "],["Comment","# class will always be a subclass of"],["","\n        "],["Comment","# Class::MOP::Class, which defines meta"],["","\n        "],["Identifier","$meta"],[""," = "],["Identifier","$class"],["","->meta->_construct_instance("],["Identifier","$options"],["",")\n    }\n\n    "],["Comment","# and check the metaclass compatibility"],["","\n    "],["Identifier","$meta"],["","->_check_metaclass_compatibility();\n\n    Class::MOP::store_metaclass_by_name("],["Identifier","$package_name"],["",", "],["Identifier","$meta"],["",");\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# we need to weaken any anon classes"],["","\n    "],["Comment","# so that they can call DESTROY properly"],["","\n    Class::MOP::weaken_metaclass("],["Identifier","$package_name"],["",") "],["Conditional","if"],[""," "],["Identifier","$options->{"],["String","weaken"],["Identifier","}"],["",";\n\n    "],["Identifier","$meta"],["",";\n}\n\n"],["Keyword","sub "],["Function","_real_ref_name "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["Comment"," we need to deal with the possibility of class immutability here,"],["","\n    "],["Comment","# and then get the name of the class appropriately"],["","\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->is_immutable\n        ? "],["Identifier","$self"],["","->_get_mutable_metaclass_name()\n        : "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","_new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," __PACKAGE__;\n\n    "],["Statement","my"],[""," "],["Identifier","$options"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n\n    "],["Statement","return"],[""," "],["Operator","bless"],[""," {\n        "],["Comment","# inherited from Class::MOP::Package"],["","\n        "],["String","'package'"],[""," => "],["Identifier","$options->{"],["String","package"],["Identifier","}"],["",",\n\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# since the following attributes will"],["","\n        "],["Comment","# actually be loaded from the symbol"],["","\n        "],["Comment","# table, and actually bypass the instance"],["","\n        "],["Comment","# entirely, we can just leave these things"],["","\n        "],["Comment","# listed here for reference, because they"],["","\n        "],["Comment","# should not actually have a value associated"],["","\n        "],["Comment","# with the slot."],["","\n        "],["String","'namespace'"],[""," => \\"],["Operator","undef"],["",",\n        "],["String","'methods'"],["","   => {},\n\n        "],["Comment","# inherited from Class::MOP::Module"],["","\n        "],["String","'version'"],["","   => \\"],["Operator","undef"],["",",\n        "],["String","'authority'"],[""," => \\"],["Operator","undef"],["",",\n\n        "],["Comment","# defined in Class::MOP::Class"],["","\n        "],["String","'superclasses'"],[""," => \\"],["Operator","undef"],["",",\n\n        "],["String","'attributes'"],[""," => {},\n        "],["String","'attribute_metaclass'"],[""," =>\n            ( "],["Identifier","$options->{"],["String","'attribute_metaclass'"],["Identifier","}"],[""," || "],["String","'Class::MOP::Attribute'"],[""," ),\n        "],["String","'method_metaclass'"],[""," =>\n            ( "],["Identifier","$options->{"],["String","'method_metaclass'"],["Identifier","}"],[""," || "],["String","'Class::MOP::Method'"],[""," ),\n        "],["String","'wrapped_method_metaclass'"],[""," => (\n            "],["Identifier","$options->{"],["String","'wrapped_method_metaclass'"],["Identifier","}"],["","\n                || "],["String","'Class::MOP::Method::Wrapped'"],["","\n        ),\n        "],["String","'instance_metaclass'"],[""," =>\n            ( "],["Identifier","$options->{"],["String","'instance_metaclass'"],["Identifier","}"],[""," || "],["String","'Class::MOP::Instance'"],[""," ),\n        "],["String","'immutable_trait'"],[""," => (\n            "],["Identifier","$options->{"],["String","'immutable_trait'"],["Identifier","}"],["","\n                || "],["String","'Class::MOP::Class::Immutable::Trait'"],["","\n        ),\n        "],["String","'constructor_name'"],[""," => ( "],["Identifier","$options->{"],["String","constructor_name"],["Identifier","}"],[""," || "],["String","'new'"],[""," ),\n        "],["String","'constructor_class'"],[""," => (\n            "],["Identifier","$options->{"],["String","constructor_class"],["Identifier","}"],[""," || "],["String","'Class::MOP::Method::Constructor'"],["","\n        ),\n        "],["String","'destructor_class'"],[""," => "],["Identifier","$options->{"],["String","destructor_class"],["Identifier","}"],["",",\n    }, "],["Identifier","$class"],["",";\n}\n\n"],["Comment","## Metaclass compatibility"],["","\n{\n    "],["Statement","my"],[""," "],["Identifier","%base_metaclass"],[""," = (\n        "],["String","attribute_metaclass"],["","      => "],["String","'Class::MOP::Attribute'"],["",",\n        "],["String","method_metaclass"],["","         => "],["String","'Class::MOP::Method'"],["",",\n        "],["String","wrapped_method_metaclass"],[""," => "],["String","'Class::MOP::Method::Wrapped'"],["",",\n        "],["String","instance_metaclass"],["","       => "],["String","'Class::MOP::Instance'"],["",",\n        "],["String","constructor_class"],["","        => "],["String","'Class::MOP::Method::Constructor'"],["",",\n        "],["String","destructor_class"],["","         => "],["String","'Class::MOP::Method::Destructor'"],["",",\n    );\n\n    "],["Keyword","sub "],["Function","_base_metaclasses "],["","{ "],["Identifier","%base_metaclass"],[""," }\n}\n\n"],["Keyword","sub "],["Function","_check_metaclass_compatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@superclasses"],[""," = "],["Identifier","$self"],["","->superclasses\n        "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Identifier","$self"],["","->_fix_metaclass_incompatibility("],["Identifier","@superclasses"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","%base_metaclass"],[""," = "],["Identifier","$self"],["","->_base_metaclasses;\n\n    "],["Comment","# this is always okay ..."],["","\n    "],["Statement","return"],["","\n        "],["Conditional","if"],[""," "],["Operator","ref"],["","("],["Identifier","$self"],["",") "],["Operator","eq"],[""," "],["String","'Class::MOP::Class'"],["","\n            && all {\n                "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Identifier","$self"],["","->"],["Identifier","$_"],["",";\n                !"],["Operator","defined"],["","("],["Identifier","$meta"],["",") || "],["Identifier","$meta"],[""," "],["Operator","eq"],[""," "],["Identifier","$base_metaclass{$_}"],["",";\n        }\n        "],["Statement","keys"],[""," "],["Identifier","%base_metaclass"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$superclass"],[""," ("],["Identifier","@superclasses"],["",") {\n        "],["Identifier","$self"],["","->_check_class_metaclass_compatibility("],["Identifier","$superclass"],["",");\n    }\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$metaclass_type"],[""," ( "],["Statement","keys"],[""," "],["Identifier","%base_metaclass"],[""," ) {\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["",";\n        "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$superclass"],[""," ("],["Identifier","@superclasses"],["",") {\n            "],["Identifier","$self"],["","->_check_single_metaclass_compatibility( "],["Identifier","$metaclass_type"],["",",\n                "],["Identifier","$superclass"],[""," );\n        }\n    }\n}\n\n"],["Keyword","sub "],["Function","_check_class_metaclass_compatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$superclass_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," (!"],["Identifier","$self"],["","->_class_metaclass_is_compatible("],["Identifier","$superclass_name"],["",")) {\n        "],["Statement","my"],[""," "],["Identifier","$super_meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$superclass_name"],["",");\n\n        "],["Statement","my"],[""," "],["Identifier","$super_meta_type"],[""," = "],["Identifier","$super_meta"],["","->_real_ref_name;\n\n        confess "],["String","\"The metaclass of \""],[""," . "],["Identifier","$self"],["","->name . "],["String","\" (\""],["","\n              . ("],["Operator","ref"],["","("],["Identifier","$self"],["",")) . "],["String","\")\""],[""," .  "],["String","\" is not compatible with \""],["","\n              . "],["String","\"the metaclass of its superclass, \""],["","\n              . "],["Identifier","$superclass_name"],[""," . "],["String","\" (\""],[""," . ("],["Identifier","$super_meta_type"],["",") . "],["String","\")\""],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_class_metaclass_is_compatible "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$superclass_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$super_meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$superclass_name"],["",")\n        || "],["Statement","return"],[""," "],["Number","1"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$super_meta_name"],[""," = "],["Identifier","$super_meta"],["","->_real_ref_name;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_is_compatible_with("],["Identifier","$super_meta_name"],["",");\n}\n\n"],["Keyword","sub "],["Function","_check_single_metaclass_compatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$metaclass_type"],["",", "],["Identifier","$superclass_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," (!"],["Identifier","$self"],["","->_single_metaclass_is_compatible("],["Identifier","$metaclass_type"],["",", "],["Identifier","$superclass_name"],["",")) {\n        "],["Statement","my"],[""," "],["Identifier","$super_meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$superclass_name"],["",");\n        "],["Statement","my"],[""," "],["Identifier","$metaclass_type_name"],[""," = "],["Identifier","$metaclass_type"],["",";\n        "],["Identifier","$metaclass_type_name"],[""," =~ "],["Statement","s/"],["String","_"],["Special","(?:"],["String","meta"],["Special",")?"],["String","class$"],["Statement","//"],["",";\n        "],["Identifier","$metaclass_type_name"],[""," =~ "],["Statement","s/"],["String","_"],["Statement","/"],["String"," "],["Statement","/g"],["",";\n        confess "],["String","\"The "],["Identifier","$metaclass_type_name"],["String"," metaclass for \""],["","\n              . "],["Identifier","$self"],["","->name . "],["String","\" (\""],[""," . ("],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["",")\n              . "],["String","\")\""],[""," . "],["String","\" is not compatible with the \""],["","\n              . "],["String","\""],["Identifier","$metaclass_type_name"],["String"," metaclass of its \""],["","\n              . "],["String","\"superclass, "],["Identifier","$superclass_name"],["String"," (\""],["","\n              . ("],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",") . "],["String","\")\""],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_single_metaclass_is_compatible "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$metaclass_type"],["",", "],["Identifier","$superclass_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$super_meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$superclass_name"],["",")\n        || "],["Statement","return"],[""," "],["Number","1"],["",";\n\n    "],["Comment","# for instance, Moose::Meta::Class has a error_class attribute, but"],["","\n    "],["Comment","# Class::MOP::Class doesn't - this shouldn't be an error"],["","\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","unless"],[""," "],["Identifier","$super_meta"],["","->can("],["Identifier","$metaclass_type"],["",");\n    "],["Comment","# for instance, Moose::Meta::Class has a destructor_class, but"],["","\n    "],["Comment","# Class::MOP::Class doesn't - this shouldn't be an error"],["","\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",";\n    "],["Comment","# if metaclass is defined in superclass but not here, it's not compatible"],["","\n    "],["Comment","# this is a really odd case"],["","\n    "],["Statement","return"],[""," "],["Number","0"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["","->_is_compatible_with("],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",");\n}\n\n"],["Keyword","sub "],["Function","_fix_metaclass_incompatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@supers"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," Class::MOP::Class->initialize("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$necessary"],[""," = "],["Number","0"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$super"],[""," ("],["Identifier","@supers"],["",") {\n        "],["Identifier","$necessary"],[""," = "],["Number","1"],["","\n            "],["Conditional","if"],[""," "],["Identifier","$self"],["","->_can_fix_metaclass_incompatibility("],["Identifier","$super"],["",");\n    }\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$necessary"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$super"],[""," ("],["Identifier","@supers"],["",") {\n        "],["Conditional","if"],[""," (!"],["Identifier","$self"],["","->_class_metaclass_is_compatible("],["Identifier","$super"],["","->name)) {\n            "],["Identifier","$self"],["","->_fix_class_metaclass_incompatibility("],["Identifier","$super"],["",");\n        }\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","%base_metaclass"],[""," = "],["Identifier","$self"],["","->_base_metaclasses;\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$metaclass_type"],[""," ("],["Statement","keys"],[""," "],["Identifier","%base_metaclass"],["",") {\n        "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$super"],[""," ("],["Identifier","@supers"],["",") {\n            "],["Conditional","if"],[""," (!"],["Identifier","$self"],["","->_single_metaclass_is_compatible("],["Identifier","$metaclass_type"],["",", "],["Identifier","$super"],["","->name)) {\n                "],["Identifier","$self"],["","->_fix_single_metaclass_incompatibility(\n                    "],["Identifier","$metaclass_type"],["",", "],["Identifier","$super"],["","\n                );\n            }\n        }\n    }\n}\n\n"],["Keyword","sub "],["Function","_can_fix_metaclass_incompatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$super_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->_class_metaclass_can_be_made_compatible("],["Identifier","$super_meta"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","%base_metaclass"],[""," = "],["Identifier","$self"],["","->_base_metaclasses;\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$metaclass_type"],[""," ("],["Statement","keys"],[""," "],["Identifier","%base_metaclass"],["",") {\n        "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->_single_metaclass_can_be_made_compatible("],["Identifier","$super_meta"],["",", "],["Identifier","$metaclass_type"],["",");\n    }\n\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","_class_metaclass_can_be_made_compatible "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$super_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_can_be_made_compatible_with("],["Identifier","$super_meta"],["","->_real_ref_name);\n}\n\n"],["Keyword","sub "],["Function","_single_metaclass_can_be_made_compatible "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$super_meta"],["",", "],["Identifier","$metaclass_type"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$specific_meta"],[""," = "],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$super_meta"],["","->can("],["Identifier","$metaclass_type"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$super_specific_meta"],[""," = "],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",";\n\n    "],["Comment","# for instance, Moose::Meta::Class has a destructor_class, but"],["","\n    "],["Comment","# Class::MOP::Class doesn't - this shouldn't be an error"],["","\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$super_specific_meta"],["",";\n\n    "],["Comment","# if metaclass is defined in superclass but not here, it's fixable"],["","\n    "],["Comment","# this is a really odd case"],["","\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$specific_meta"],["",";\n\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$specific_meta"],["","->_can_be_made_compatible_with("],["Identifier","$super_specific_meta"],["",");\n}\n\n"],["Keyword","sub "],["Function","_fix_class_metaclass_incompatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$super_meta"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->_class_metaclass_can_be_made_compatible("],["Identifier","$super_meta"],["",")) {\n        ("],["Identifier","$self"],["","->is_pristine)\n            || confess "],["String","\"Can't fix metaclass incompatibility for \""],["","\n                     . "],["Identifier","$self"],["","->name\n                     . "],["String","\" because it is not pristine.\""],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$super_meta_name"],[""," = "],["Identifier","$super_meta"],["","->_real_ref_name;\n\n        "],["Identifier","$self"],["","->_make_compatible_with("],["Identifier","$super_meta_name"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_fix_single_metaclass_incompatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$metaclass_type"],["",", "],["Identifier","$super_meta"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->_single_metaclass_can_be_made_compatible("],["Identifier","$super_meta"],["",", "],["Identifier","$metaclass_type"],["",")) {\n        ("],["Identifier","$self"],["","->is_pristine)\n            || confess "],["String","\"Can't fix metaclass incompatibility for \""],["","\n                     . "],["Identifier","$self"],["","->name\n                     . "],["String","\" because it is not pristine.\""],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$new_metaclass"],[""," = "],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["","\n            ? "],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["","->_get_compatible_metaclass("],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",")\n            : "],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",";\n        "],["Identifier","$self->{$metaclass_type}"],[""," = "],["Identifier","$new_metaclass"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_restore_metaobjects_from "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$old_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->_restore_metamethods_from("],["Identifier","$old_meta"],["",");\n    "],["Identifier","$self"],["","->_restore_metaattributes_from("],["Identifier","$old_meta"],["",");\n}\n\n"],["Keyword","sub "],["Function","_remove_generated_metaobjects "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$self"],["","->get_attribute("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_attribute_list) {\n        "],["Identifier","$attr"],["","->remove_accessors;\n    }\n}\n\n"],["Comment","# creating classes with MOP ..."],["","\n\n"],["Keyword","sub "],["Function","create "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'package'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","superclasses"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",")\n        || confess "],["String","\"You must pass an ARRAY ref of superclasses\""],["","\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","superclasses"],["Identifier","}"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","attributes"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",")\n        || confess "],["String","\"You must pass an ARRAY ref of attributes\""],["","\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","attributes"],["Identifier","}"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","methods"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",")\n        || confess "],["String","\"You must pass a HASH ref of methods\""],["","\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","methods"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$package"],["","      = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","package"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$superclasses"],[""," = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","superclasses"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$attributes"],["","   = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","attributes"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$methods"],["","      = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","methods"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta_name"],["","    = "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","meta_name"],["Identifier","}"],["","\n                         ? "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","meta_name"],["Identifier","}"],["","\n                         : "],["String","'meta'"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Identifier","$class"],["","->SUPER::create("],["Identifier","$package"],[""," => "],["Identifier","%options"],["",");\n\n    "],["Identifier","$meta"],["","->_add_meta_method("],["Identifier","$meta_name"],["",")\n        "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$meta_name"],["",";\n\n    "],["Identifier","$meta"],["","->superclasses("],["Identifier","@{$superclasses}"],["",")\n        "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$superclasses"],["",";\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# process attributes first, so that they can"],["","\n    "],["Comment","# install accessors, but locally defined methods"],["","\n    "],["Comment","# can then overwrite them. It is maybe a little odd, but"],["","\n    "],["Comment","# I think this should be the order of things."],["","\n    "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$attributes"],["",") {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Identifier","@{$attributes}"],["",") {\n            "],["Identifier","$meta"],["","->add_attribute("],["Identifier","$attr"],["",");\n        }\n    }\n    "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$methods"],["",") {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$method_name"],[""," ("],["Statement","keys"],[""," "],["Identifier","%{$methods}"],["",") {\n            "],["Identifier","$meta"],["","->add_method("],["Identifier","$method_name"],["",", "],["Identifier","$methods->{$method_name}"],["",");\n        }\n    }\n    "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n}\n\n"],["Comment","# "],["Todo","XXX:"],["Comment"," something more intelligent here?"],["","\n"],["Keyword","sub "],["Function","_anon_package_prefix "],["","{ "],["String","'Class::MOP::Class::__ANON__::SERIAL::'"],[""," }\n\n"],["Keyword","sub "],["Function","create_anon_class "],["","{ "],["Statement","shift"],["","->create_anon("],["Identifier","@_"],["",") }\n"],["Keyword","sub "],["Function","is_anon_class     "],["","{ "],["Statement","shift"],["","->is_anon("],["Identifier","@_"],["",")     }\n\n"],["Keyword","sub "],["Function","_anon_cache_key "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n    "],["Comment","# Makes something like Super::Class|Super::Class::2"],["","\n    "],["Statement","return"],[""," "],["Statement","join"],[""," "],["String","'='"],[""," => (\n        "],["Statement","join"],["","( "],["String","'|'"],["",", "],["Statement","sort"],[""," "],["Identifier","@{"],[""," "],["Identifier","$options{"],["String","superclasses"],["Identifier","}"],[""," || [] "],["Identifier","}"],[""," ),\n    );\n}\n\n"],["Comment","# Instance Construction & Cloning"],["","\n\n"],["Keyword","sub "],["Function","new_object "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# we need to protect the integrity of the"],["","\n    "],["Comment","# Class::MOP::Class singletons here, so we"],["","\n    "],["Comment","# delegate this to &construct_class_instance"],["","\n    "],["Comment","# which will deal with the singletons"],["","\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->_construct_class_instance("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],["","->name->isa("],["String","'Class::MOP::Class'"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->_construct_instance("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_construct_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n    "],["Statement","my"],[""," "],["Identifier","$meta_instance"],[""," = "],["Identifier","$class"],["","->get_meta_instance();\n    "],["Comment","# "],["Todo","FIXME:"],["","\n    "],["Comment","# the code below is almost certainly incorrect"],["","\n    "],["Comment","# but this is foreign inheritance, so we might"],["","\n    "],["Comment","# have to kludge it in the end."],["","\n    "],["Statement","my"],[""," "],["Identifier","$instance"],["",";\n    "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$instance_class"],[""," = blessed("],["Identifier","$params->{"],["String","__INSTANCE__"],["Identifier","}"],["",")) {\n        ("],["Identifier","$instance_class"],[""," "],["Operator","eq"],[""," "],["Identifier","$class"],["","->name)\n            || confess "],["String","\"Objects passed as the __INSTANCE__ parameter must \""],["","\n                     . "],["String","\"already be blessed into the correct class, but \""],["","\n                     . "],["String","\""],["Identifier","$params->{"],["String","__INSTANCE__"],["Identifier","}"],["String"," is not a \""],[""," . "],["Identifier","$class"],["","->name;\n        "],["Identifier","$instance"],[""," = "],["Identifier","$params->{"],["String","__INSTANCE__"],["Identifier","}"],["",";\n    }\n    "],["Conditional","elsif"],[""," ("],["Statement","exists"],[""," "],["Identifier","$params->{"],["String","__INSTANCE__"],["Identifier","}"],["",") {\n        confess "],["String","\"The __INSTANCE__ parameter must be a blessed reference, not \""],["","\n              . "],["Identifier","$params->{"],["String","__INSTANCE__"],["Identifier","}"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$instance"],[""," = "],["Identifier","$meta_instance"],["","->create_instance();\n    }\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Identifier","$class"],["","->get_all_attributes()) {\n        "],["Identifier","$attr"],["","->initialize_instance_slot("],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$params"],["",");\n    }\n    "],["Conditional","if"],[""," (Class::MOP::metaclass_is_weak("],["Identifier","$class"],["","->name)) {\n        "],["Identifier","$meta_instance"],["","->_set_mop_slot("],["Identifier","$instance"],["",", "],["Identifier","$class"],["",");\n    }\n    "],["Statement","return"],[""," "],["Identifier","$instance"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_new_object "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," (\n        "],["String","'my $class = shift;'"],["",",\n        "],["String","'$class = Scalar::Util::blessed($class) || $class;'"],["",",\n        "],["Identifier","$self"],["","->_inline_fallback_constructor("],["String","'$class'"],["","),\n        "],["Identifier","$self"],["","->_inline_params("],["String","'$params'"],["",", "],["String","'$class'"],["","),\n        "],["Identifier","$self"],["","->_inline_generate_instance("],["String","'$instance'"],["",", "],["String","'$class'"],["","),\n        "],["Identifier","$self"],["","->_inline_slot_initializers,\n        "],["Identifier","$self"],["","->_inline_preserve_weak_metaclasses,\n        "],["Identifier","$self"],["","->_inline_extra_init,\n        "],["String","'return $instance'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_fallback_constructor "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," (\n        "],["String","'return '"],[""," . "],["Identifier","$self"],["","->_generate_fallback_constructor("],["Identifier","$class"],["","),\n            "],["String","'if '"],[""," . "],["Identifier","$class"],[""," . "],["String","' ne \\''"],[""," . "],["Identifier","$self"],["","->name . "],["String","'\\';'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_generate_fallback_constructor "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["String","'Class::MOP::Class->initialize('"],[""," . "],["Identifier","$class"],[""," . "],["String","')->new_object(@_)'"],["",",\n}\n\n"],["Keyword","sub "],["Function","_inline_params "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$params"],["",", "],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," (\n        "],["String","'my '"],[""," . "],["Identifier","$params"],[""," . "],["String","' = @_ == 1 ? $_[0] : {@_};'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_generate_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$inst"],["",", "],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," (\n        "],["String","'my '"],[""," . "],["Identifier","$inst"],[""," . "],["String","' = '"],[""," . "],["Identifier","$self"],["","->_inline_create_instance("],["Identifier","$class"],["",") . "],["String","';'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_create_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_meta_instance->inline_create_instance("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_inline_slot_initializers "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$idx"],[""," = "],["Number","0"],["",";\n\n    "],["Statement","return"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$self"],["","->_inline_slot_initializer("],["Identifier","$_"],["",", "],["Identifier","$idx"],["","++) "],["Statement","}"],["","\n               "],["Statement","sort"],[""," "],["Statement","{"],[""," "],["Identifier","$a"],["","->name "],["Operator","cmp"],[""," "],["Identifier","$b"],["","->name "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_all_attributes;\n}\n\n"],["Keyword","sub "],["Function","_inline_slot_initializer "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Operator","defined"],["","("],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$attr"],["","->init_arg)) {\n        "],["Statement","my"],[""," "],["Identifier","@source"],[""," = (\n            "],["String","'if (exists $params->{\\''"],[""," . "],["Identifier","$init_arg"],[""," . "],["String","'\\'}) {'"],["",",\n                "],["Identifier","$self"],["","->_inline_init_attr_from_constructor("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["","),\n            "],["String","'}'"],["",",\n        );\n        "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","@default"],[""," = "],["Identifier","$self"],["","->_inline_init_attr_from_default("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",")) {\n            "],["Statement","push"],[""," "],["Identifier","@source"],["",", (\n                "],["String","'else {'"],["",",\n                    "],["Identifier","@default"],["",",\n                "],["String","'}'"],["",",\n            );\n        }\n        "],["Statement","return"],[""," "],["Identifier","@source"],["",";\n    }\n    "],["Conditional","elsif"],[""," ("],["Statement","my"],[""," "],["Identifier","@default"],[""," = "],["Identifier","$self"],["","->_inline_init_attr_from_default("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",")) {\n        "],["Statement","return"],[""," (\n            "],["String","'{'"],["",",\n                "],["Identifier","@default"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," ();\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_init_attr_from_constructor "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@initial_value"],[""," = "],["Identifier","$attr"],["","->_inline_set_value(\n        "],["String","'$instance'"],["",", "],["String","'$params->{\\''"],[""," . "],["Identifier","$attr"],["","->init_arg . "],["String","'\\'}'"],["",",\n    );\n\n    "],["Statement","push"],[""," "],["Identifier","@initial_value"],["",", (\n        "],["String","'$attrs->['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']->set_initial_value('"],["",",\n            "],["String","'$instance,'"],["",",\n            "],["Identifier","$attr"],["","->_inline_instance_get("],["String","'$instance'"],["","),\n        "],["String","');'"],["",",\n    ) "],["Conditional","if"],[""," "],["Identifier","$attr"],["","->has_initializer;\n\n    "],["Statement","return"],[""," "],["Identifier","@initial_value"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_init_attr_from_default "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$default"],[""," = "],["Identifier","$self"],["","->_inline_default_value("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",");\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$default"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@initial_value"],[""," = "],["Identifier","$attr"],["","->_inline_set_value("],["String","'$instance'"],["",", "],["Identifier","$default"],["",");\n\n    "],["Statement","push"],[""," "],["Identifier","@initial_value"],["",", (\n        "],["String","'$attrs->['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']->set_initial_value('"],["",",\n            "],["String","'$instance,'"],["",",\n            "],["Identifier","$attr"],["","->_inline_instance_get("],["String","'$instance'"],["","),\n        "],["String","');'"],["",",\n    ) "],["Conditional","if"],[""," "],["Identifier","$attr"],["","->has_initializer;\n\n    "],["Statement","return"],[""," "],["Identifier","@initial_value"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_default_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$index"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$attr"],["","->has_default) {\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# default values can either be CODE refs"],["","\n        "],["Comment","# in which case we need to call them. Or"],["","\n        "],["Comment","# they can be scalars (strings/numbers)"],["","\n        "],["Comment","# in which case we can just deal with them"],["","\n        "],["Comment","# in the code we eval."],["","\n        "],["Conditional","if"],[""," ("],["Identifier","$attr"],["","->is_default_a_coderef) {\n            "],["Statement","return"],[""," "],["String","'$defaults->['"],[""," . "],["Identifier","$index"],[""," . "],["String","']->($instance)'"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Statement","return"],[""," "],["String","'$defaults->['"],[""," . "],["Identifier","$index"],[""," . "],["String","']'"],["",";\n        }\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","$attr"],["","->has_builder) {\n        "],["Statement","return"],[""," "],["String","'$instance->'"],[""," . "],["Identifier","$attr"],["","->builder;\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_preserve_weak_metaclasses "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Conditional","if"],[""," (Class::MOP::metaclass_is_weak("],["Identifier","$self"],["","->name)) {\n        "],["Statement","return"],[""," (\n            "],["Identifier","$self"],["","->_inline_set_mop_slot(\n                "],["String","'$instance'"],["",", "],["String","'Class::MOP::class_of($class)'"],["","\n            ) . "],["String","';'"],["","\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," ();\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_extra_init "],["","{ }\n\n"],["Keyword","sub "],["Function","_eval_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@attrs"],[""," = "],["Statement","sort"],[""," "],["Statement","{"],[""," "],["Identifier","$a"],["","->name "],["Operator","cmp"],[""," "],["Identifier","$b"],["","->name "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_all_attributes;\n\n    "],["Statement","my"],[""," "],["Identifier","$defaults"],[""," = ["],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->"],["Conditional","default"],[""," "],["Statement","}"],[""," "],["Identifier","@attrs"],["","];\n\n    "],["Statement","return"],[""," {\n        "],["String","'$defaults'"],[""," => \\"],["Identifier","$defaults"],["",",\n    };\n}\n\n\n"],["Keyword","sub "],["Function","get_meta_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self->{"],["String","'_meta_instance'"],["Identifier","}"],[""," ||= "],["Identifier","$self"],["","->_create_meta_instance();\n}\n\n"],["Keyword","sub "],["Function","_create_meta_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$instance"],[""," = "],["Identifier","$self"],["","->instance_metaclass->new(\n        "],["String","associated_metaclass"],[""," => "],["Identifier","$self"],["",",\n        "],["String","attributes"],[""," => [ "],["Identifier","$self"],["","->get_all_attributes() ],\n    );\n\n    "],["Identifier","$self"],["","->add_meta_instance_dependencies()\n        "],["Conditional","if"],[""," "],["Identifier","$instance"],["","->is_dependent_on_superclasses();\n\n    "],["Statement","return"],[""," "],["Identifier","$instance"],["",";\n}\n\n"],["Comment","# "],["Todo","TODO:"],["Comment"," this is actually not being used!"],["","\n"],["Keyword","sub "],["Function","_inline_rebless_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_meta_instance->inline_rebless_instance_structure("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_inline_get_mop_slot "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_meta_instance->_inline_get_mop_slot("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_inline_set_mop_slot "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_meta_instance->_inline_set_mop_slot("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_inline_clear_mop_slot "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_meta_instance->_inline_clear_mop_slot("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","clone_object "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],["","    = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$instance"],[""," = "],["Statement","shift"],["",";\n    (blessed("],["Identifier","$instance"],["",") && "],["Identifier","$instance"],["","->isa("],["Identifier","$class"],["","->name))\n        || confess "],["String","\"You must pass an instance of the metaclass (\""],[""," . ("],["Operator","ref"],[""," "],["Identifier","$class"],[""," ? "],["Identifier","$class"],["","->name : "],["Identifier","$class"],["",") . "],["String","\"), not ("],["Identifier","$instance"],["String",")\""],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# we need to protect the integrity of the"],["","\n    "],["Comment","# Class::MOP::Class singletons here, they"],["","\n    "],["Comment","# should not be cloned."],["","\n    "],["Statement","return"],[""," "],["Identifier","$instance"],[""," "],["Conditional","if"],[""," "],["Identifier","$instance"],["","->isa("],["String","'Class::MOP::Class'"],["",");\n    "],["Identifier","$class"],["","->_clone_instance("],["Identifier","$instance"],["",", "],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_clone_instance "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$instance"],["",", "],["Identifier","%params"],["",") = "],["Identifier","@_"],["",";\n    (blessed("],["Identifier","$instance"],["","))\n        || confess "],["String","\"You can only clone instances, ("],["Identifier","$instance"],["String",") is not a blessed instance\""],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta_instance"],[""," = "],["Identifier","$class"],["","->get_meta_instance();\n    "],["Statement","my"],[""," "],["Identifier","$clone"],[""," = "],["Identifier","$meta_instance"],["","->clone_instance("],["Identifier","$instance"],["",");\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Identifier","$class"],["","->get_all_attributes()) {\n        "],["Conditional","if"],[""," ( "],["Operator","defined"],["","( "],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$attr"],["","->init_arg ) ) {\n            "],["Conditional","if"],[""," ("],["Statement","exists"],[""," "],["Identifier","$params{$init_arg}"],["",") {\n                "],["Identifier","$attr"],["","->set_value("],["Identifier","$clone"],["",", "],["Identifier","$params{$init_arg}"],["",");\n            }\n        }\n    }\n    "],["Statement","return"],[""," "],["Identifier","$clone"],["",";\n}\n\n"],["Keyword","sub "],["Function","_force_rebless_instance "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$instance"],["",", "],["Identifier","%params"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$old_metaclass"],[""," = Class::MOP::class_of("],["Identifier","$instance"],["",");\n\n    "],["Identifier","$old_metaclass"],["","->rebless_instance_away("],["Identifier","$instance"],["",", "],["Identifier","$self"],["",", "],["Identifier","%params"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$old_metaclass"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta_instance"],[""," = "],["Identifier","$self"],["","->get_meta_instance;\n\n    "],["Conditional","if"],[""," (Class::MOP::metaclass_is_weak("],["Identifier","$old_metaclass"],["","->name)) {\n        "],["Identifier","$meta_instance"],["","->_clear_mop_slot("],["Identifier","$instance"],["",");\n    }\n\n    "],["Comment","# rebless!"],["","\n    "],["Comment","# we use $_[1] here because of t/cmop/rebless_overload.t regressions"],["","\n    "],["Comment","# on 5.8.8"],["","\n    "],["Identifier","$meta_instance"],["","->rebless_instance_structure("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",", "],["Identifier","$self"],["",");\n\n    "],["Identifier","$self"],["","->_fixup_attributes_after_rebless("],["Identifier","$instance"],["",", "],["Identifier","$old_metaclass"],["",", "],["Identifier","%params"],["",");\n\n    "],["Conditional","if"],[""," (Class::MOP::metaclass_is_weak("],["Identifier","$self"],["","->name)) {\n        "],["Identifier","$meta_instance"],["","->_set_mop_slot("],["Identifier","$instance"],["",", "],["Identifier","$self"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","rebless_instance "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$instance"],["",", "],["Identifier","%params"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$old_metaclass"],[""," = Class::MOP::class_of("],["Identifier","$instance"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$old_class"],[""," = "],["Identifier","$old_metaclass"],[""," ? "],["Identifier","$old_metaclass"],["","->name : blessed("],["Identifier","$instance"],["",");\n    "],["Identifier","$self"],["","->name->isa("],["Identifier","$old_class"],["",")\n        || confess "],["String","\"You may rebless only into a subclass of ("],["Identifier","$old_class"],["String","), of which (\""],["",". "],["Identifier","$self"],["","->name ."],["String","\") isn't.\""],["",";\n\n    "],["Identifier","$self"],["","->_force_rebless_instance("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",", "],["Identifier","%params"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$instance"],["",";\n}\n\n"],["Keyword","sub "],["Function","rebless_instance_back "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$instance"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$old_metaclass"],[""," = Class::MOP::class_of("],["Identifier","$instance"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$old_class"],["","\n        = "],["Identifier","$old_metaclass"],[""," ? "],["Identifier","$old_metaclass"],["","->name : blessed("],["Identifier","$instance"],["",");\n    "],["Identifier","$old_class"],["","->isa( "],["Identifier","$self"],["","->name )\n        || confess\n        "],["String","\"You may rebless only into a superclass of ("],["Identifier","$old_class"],["String","), of which (\""],["","\n        . "],["Identifier","$self"],["","->name\n        . "],["String","\") isn't.\""],["",";\n\n    "],["Identifier","$self"],["","->_force_rebless_instance("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$instance"],["",";\n}\n\n"],["Keyword","sub "],["Function","rebless_instance_away "],["","{\n    "],["Comment","# this intentionally does nothing, it is just a hook"],["","\n}\n\n"],["Keyword","sub "],["Function","_fixup_attributes_after_rebless "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$rebless_from"],["",", "],["Identifier","%params"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta_instance"],[""," = "],["Identifier","$self"],["","->get_meta_instance;\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ( "],["Identifier","$rebless_from"],["","->get_all_attributes ) {\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->find_attribute_by_name( "],["Identifier","$attr"],["","->name );\n        "],["Identifier","$meta_instance"],["","->deinitialize_slot( "],["Identifier","$instance"],["",", "],["Identifier","$_"],[""," ) "],["Repeat","for"],[""," "],["Identifier","$attr"],["","->slots;\n    }\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ( "],["Identifier","$self"],["","->get_all_attributes ) {\n        "],["Conditional","if"],[""," ( "],["Identifier","$attr"],["","->has_value("],["Identifier","$instance"],["",") ) {\n            "],["Conditional","if"],[""," ( "],["Operator","defined"],["","( "],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$attr"],["","->init_arg ) ) {\n                "],["Identifier","$params{$init_arg}"],[""," = "],["Identifier","$attr"],["","->get_value("],["Identifier","$instance"],["",")\n                    "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$params{$init_arg}"],["",";\n            }\n            "],["Conditional","else"],[""," {\n                "],["Identifier","$attr"],["","->set_value("],["Identifier","$instance"],["",", "],["Identifier","$attr"],["","->get_value("],["Identifier","$instance"],["","));\n            }\n        }\n    }\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Identifier","$self"],["","->get_all_attributes) {\n        "],["Identifier","$attr"],["","->initialize_instance_slot("],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", \\"],["Identifier","%params"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_attach_attribute "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$attribute"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$attribute"],["","->attach_to_class("],["Identifier","$self"],["",");\n}\n\n"],["Keyword","sub "],["Function","_post_add_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$attribute"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->invalidate_meta_instances;\n\n    "],["Comment","# invalidate package flag here"],["","\n    try {\n        "],["Statement","local"],[""," "],["Identifier","$SIG{"],["String","__DIE__"],["Identifier","}"],["",";\n        "],["Identifier","$attribute"],["","->install_accessors;\n    }\n    catch {\n        "],["Identifier","$self"],["","->remove_attribute( "],["Identifier","$attribute"],["","->name );\n        "],["Statement","die"],[""," "],["Identifier","$_"],["",";\n    };\n}\n\n"],["Keyword","sub "],["Function","remove_attribute "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$removed_attribute"],[""," = "],["Identifier","$self"],["","->SUPER::remove_attribute("],["Identifier","@_"],["",")\n        "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Identifier","$self"],["","->invalidate_meta_instances;\n\n    "],["Identifier","$removed_attribute"],["","->remove_accessors;\n    "],["Identifier","$removed_attribute"],["","->detach_from_class;\n\n    "],["Statement","return"],["Identifier","$removed_attribute"],["",";\n}\n\n"],["Keyword","sub "],["Function","find_attribute_by_name "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$attr_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ( "],["Identifier","$self"],["","->linearized_isa ) {\n        "],["Comment","# fetch the meta-class ..."],["","\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$class"],["",");\n        "],["Statement","return"],[""," "],["Identifier","$meta"],["","->get_attribute("],["Identifier","$attr_name"],["",")\n            "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->has_attribute("],["Identifier","$attr_name"],["",");\n    }\n\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_all_attributes "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%attrs"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","%{"],[""," Class::MOP::Class->initialize("],["Identifier","$_"],["",")->_attribute_map "],["Identifier","}"],[""," "],["Statement","}"],["","\n        "],["Statement","reverse"],[""," "],["Identifier","$self"],["","->linearized_isa;\n    "],["Statement","return"],[""," "],["Statement","values"],[""," "],["Identifier","%attrs"],["",";\n}\n\n"],["Comment","# Inheritance"],["","\n\n"],["Keyword","sub "],["Function","superclasses "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","     = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$isa"],[""," = "],["Identifier","$self"],["","->get_or_add_package_symbol("],["String","'@ISA'"],["",");\n\n    "],["Conditional","if"],[""," ("],["Identifier","@_"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","@supers"],[""," = "],["Identifier","@_"],["",";\n        "],["Identifier","@{$isa}"],[""," = "],["Identifier","@supers"],["",";\n\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# on 5.8 and below, we need to call"],["","\n        "],["Comment","# a method to get Perl to detect"],["","\n        "],["Comment","# a cycle in the class hierarchy"],["","\n        "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->name;\n        "],["Identifier","$class"],["","->isa("],["Identifier","$class"],["",");\n\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# we need to check the metaclass"],["","\n        "],["Comment","# compatibility here so that we can"],["","\n        "],["Comment","# be sure that the superclass is"],["","\n        "],["Comment","# not potentially creating an issues"],["","\n        "],["Comment","# we don't know about"],["","\n\n        "],["Identifier","$self"],["","->_check_metaclass_compatibility();\n        "],["Identifier","$self"],["","->_superclasses_updated();\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","@{$isa}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_superclasses_updated "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->update_meta_instance_dependencies();\n    "],["Comment","# keep strong references to all our parents, so they don't disappear if"],["","\n    "],["Comment","# they are anon classes and don't have any direct instances"],["","\n    "],["Identifier","$self"],["","->_superclass_metas(\n        "],["Statement","map"],[""," "],["Statement","{"],[""," Class::MOP::class_of("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","$self"],["","->superclasses\n    );\n}\n\n"],["Keyword","sub "],["Function","_superclass_metas "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self->{"],["String","_superclass_metas"],["Identifier","}"],[""," = ["],["Identifier","@_"],["","];\n}\n\n"],["Keyword","sub "],["Function","subclasses "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$super_class"],[""," = "],["Identifier","$self"],["","->name;\n\n    "],["Statement","return"],[""," "],["Identifier","@{"],[""," "],["Identifier","$super_class"],["","->mro::get_isarev() "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","direct_subclasses "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$super_class"],[""," = "],["Identifier","$self"],["","->name;\n\n    "],["Statement","return"],[""," "],["Statement","grep"],[""," "],["Statement","{"],["","\n        "],["Statement","grep"],[""," "],["Statement","{"],["","\n            "],["Identifier","$_"],[""," "],["Operator","eq"],[""," "],["Identifier","$super_class"],["","\n        "],["Statement","}"],[""," Class::MOP::Class->initialize("],["Identifier","$_"],["",")->superclasses\n    "],["Statement","}"],[""," "],["Identifier","$self"],["","->subclasses;\n}\n\n"],["Keyword","sub "],["Function","linearized_isa "],["","{\n    "],["Statement","return"],[""," "],["Identifier","@{"],[""," mro::get_linear_isa( ("],["Statement","shift"],["",")->name ) "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","class_precedence_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$self"],["","->name;\n\n    "],["Conditional","unless"],[""," (Class::MOP::IS_RUNNING_ON_5_10()) {\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# We need to check for circular inheritance here"],["","\n        "],["Comment","# if we are not on 5.10, cause 5.8 detects it late."],["","\n        "],["Comment","# This will do nothing if all is well, and blow up"],["","\n        "],["Comment","# otherwise. Yes, it's an ugly hack, better"],["","\n        "],["Comment","# suggestions are welcome."],["","\n        "],["Comment","# - SL"],["","\n        ("],["Identifier","$name"],[""," || "],["Statement","return"],["",")->isa("],["String","'This is a test for circular inheritance'"],["",")\n    }\n\n    "],["Comment","# if our mro is c3, we can"],["","\n    "],["Comment","# just grab the linear_isa"],["","\n    "],["Conditional","if"],[""," (mro::get_mro("],["Identifier","$name"],["",") "],["Operator","eq"],[""," "],["String","'c3'"],["",") {\n        "],["Statement","return"],[""," "],["Identifier","@{"],[""," mro::get_linear_isa("],["Identifier","$name"],["",") "],["Identifier","}"],["","\n    }\n    "],["Conditional","else"],[""," {\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# we can't grab the linear_isa for dfs"],["","\n        "],["Comment","# since it has all the duplicates"],["","\n        "],["Comment","# already removed."],["","\n        "],["Statement","return"],[""," (\n            "],["Identifier","$name"],["",",\n            "],["Statement","map"],[""," "],["Statement","{"],["","\n                Class::MOP::Class->initialize("],["Identifier","$_"],["",")->class_precedence_list()\n            "],["Statement","}"],[""," "],["Identifier","$self"],["","->superclasses()\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_method_lookup_order "],["","{\n    "],["Statement","return"],[""," ("],["Statement","shift"],["","->linearized_isa, "],["String","'UNIVERSAL'"],["",");\n}\n\n"],["Comment","## Methods"],["","\n\n{\n    "],["Statement","my"],[""," "],["Identifier","$fetch_and_prepare_method"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$wrapped_metaclass"],[""," = "],["Identifier","$self"],["","->wrapped_method_metaclass;\n        "],["Comment","# fetch it locally"],["","\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->get_method("],["Identifier","$method_name"],["",");\n        "],["Comment","# if we don't have local ..."],["","\n        "],["Conditional","unless"],[""," ("],["Identifier","$method"],["",") {\n            "],["Comment","# try to find the next method"],["","\n            "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->find_next_method_by_name("],["Identifier","$method_name"],["",");\n            "],["Comment","# die if it does not exist"],["","\n            ("],["Operator","defined"],[""," "],["Identifier","$method"],["",")\n                || confess "],["String","\"The method '"],["Identifier","$method_name"],["String","' was not found in the inheritance hierarchy for \""],[""," . "],["Identifier","$self"],["","->name;\n            "],["Comment","# and now make sure to wrap it"],["","\n            "],["Comment","# even if it is already wrapped"],["","\n            "],["Comment","# because we need a new sub ref"],["","\n            "],["Identifier","$method"],[""," = "],["Identifier","$wrapped_metaclass"],["","->wrap("],["Identifier","$method"],["",",\n                "],["String","package_name"],[""," => "],["Identifier","$self"],["","->name,\n                "],["String","name"],["","         => "],["Identifier","$method_name"],["",",\n            );\n        }\n        "],["Conditional","else"],[""," {\n            "],["Comment","# now make sure we wrap it properly"],["","\n            "],["Identifier","$method"],[""," = "],["Identifier","$wrapped_metaclass"],["","->wrap("],["Identifier","$method"],["",",\n                "],["String","package_name"],[""," => "],["Identifier","$self"],["","->name,\n                "],["String","name"],["","         => "],["Identifier","$method_name"],["",",\n            ) "],["Conditional","unless"],[""," "],["Identifier","$method"],["","->isa("],["Identifier","$wrapped_metaclass"],["",");\n        }\n        "],["Identifier","$self"],["","->add_method("],["Identifier","$method_name"],[""," => "],["Identifier","$method"],["",");\n        "],["Statement","return"],[""," "],["Identifier","$method"],["",";\n    };\n\n    "],["Keyword","sub "],["Function","add_before_method_modifier "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method_modifier"],["",") = "],["Identifier","@_"],["",";\n        ("],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],["",")\n            || confess "],["String","\"You must pass in a method name\""],["",";\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$fetch_and_prepare_method"],["","->("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",");\n        "],["Identifier","$method"],["","->add_before_modifier(\n            subname("],["String","':before'"],[""," => "],["Identifier","$method_modifier"],["",")\n        );\n    }\n\n    "],["Keyword","sub "],["Function","add_after_method_modifier "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method_modifier"],["",") = "],["Identifier","@_"],["",";\n        ("],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],["",")\n            || confess "],["String","\"You must pass in a method name\""],["",";\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$fetch_and_prepare_method"],["","->("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",");\n        "],["Identifier","$method"],["","->add_after_modifier(\n            subname("],["String","':after'"],[""," => "],["Identifier","$method_modifier"],["",")\n        );\n    }\n\n    "],["Keyword","sub "],["Function","add_around_method_modifier "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method_modifier"],["",") = "],["Identifier","@_"],["",";\n        ("],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],["",")\n            || confess "],["String","\"You must pass in a method name\""],["",";\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$fetch_and_prepare_method"],["","->("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",");\n        "],["Identifier","$method"],["","->add_around_modifier(\n            subname("],["String","':around'"],[""," => "],["Identifier","$method_modifier"],["",")\n        );\n    }\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# the methods above used to be named like this:"],["","\n    "],["Comment","#    ${pkg}::${method}:(before|after|around)"],["","\n    "],["Comment","# but this proved problematic when using one modifier"],["","\n    "],["Comment","# to wrap multiple methods (something which is likely"],["","\n    "],["Comment","# to happen pretty regularly IMO). So instead of naming"],["","\n    "],["Comment","# it like this, I have chosen to just name them purely"],["","\n    "],["Comment","# with their modifier names, like so:"],["","\n    "],["Comment","#    :(before|after|around)"],["","\n    "],["Comment","# The fact is that in a stack trace, it will be fairly"],["","\n    "],["Comment","# evident from the context what method they are attached"],["","\n    "],["Comment","# to, and so don't need the fully qualified name."],["","\n}\n\n"],["Keyword","sub "],["Function","find_method_by_name "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n    ("],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],["",")\n        || confess "],["String","\"You must define a method name to find\""],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","$self"],["","->_method_lookup_order) {\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = Class::MOP::Class->initialize("],["Identifier","$class"],["",")->get_method("],["Identifier","$method_name"],["",");\n        "],["Statement","return"],[""," "],["Identifier","$method"],[""," "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$method"],["",";\n    }\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_all_methods "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%methods"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ( "],["Statement","reverse"],[""," "],["Identifier","$self"],["","->_method_lookup_order ) {\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$class"],["",");\n\n        "],["Identifier","$methods{"],[""," "],["Identifier","$_"],["","->name "],["Identifier","}"],[""," = "],["Identifier","$_"],[""," "],["Repeat","for"],[""," "],["Identifier","$meta"],["","->_get_local_methods;\n    }\n\n    "],["Statement","return"],[""," "],["Statement","values"],[""," "],["Identifier","%methods"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_all_method_names "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_all_methods;\n}\n\n"],["Keyword","sub "],["Function","find_all_methods_by_name "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n    ("],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],["",")\n        || confess "],["String","\"You must define a method name to find\""],["",";\n    "],["Statement","my"],[""," "],["Identifier","@methods"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","$self"],["","->_method_lookup_order) {\n        "],["Comment","# fetch the meta-class ..."],["","\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$class"],["",");\n        "],["Statement","push"],[""," "],["Identifier","@methods"],[""," => {\n            "],["String","name"],["","  => "],["Identifier","$method_name"],["",",\n            "],["String","class"],[""," => "],["Identifier","$class"],["",",\n            "],["String","code"],["","  => "],["Identifier","$meta"],["","->get_method("],["Identifier","$method_name"],["",")\n        } "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->has_method("],["Identifier","$method_name"],["",");\n    }\n    "],["Statement","return"],[""," "],["Identifier","@methods"],["",";\n}\n\n"],["Keyword","sub "],["Function","find_next_method_by_name "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n    ("],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Statement","length"],[""," "],["Identifier","$method_name"],["",")\n        || confess "],["String","\"You must define a method name to find\""],["",";\n    "],["Statement","my"],[""," "],["Identifier","@cpl"],[""," = ("],["Identifier","$self"],["","->_method_lookup_order);\n    "],["Statement","shift"],[""," "],["Identifier","@cpl"],["","; "],["Comment","# discard ourselves"],["","\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","@cpl"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = Class::MOP::Class->initialize("],["Identifier","$class"],["",")->get_method("],["Identifier","$method_name"],["",");\n        "],["Statement","return"],[""," "],["Identifier","$method"],[""," "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$method"],["",";\n    }\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","update_meta_instance_dependencies "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self->{"],["String","meta_instance_dependencies"],["Identifier","}"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->add_meta_instance_dependencies;\n    }\n}\n\n"],["Keyword","sub "],["Function","add_meta_instance_dependencies "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Identifier","$self"],["","->remove_meta_instance_dependencies;\n\n    "],["Statement","my"],[""," "],["Identifier","@attrs"],[""," = "],["Identifier","$self"],["","->get_all_attributes();\n\n    "],["Statement","my"],[""," "],["Identifier","%seen"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@classes"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Operator","not"],[""," "],["Identifier","$seen{"],[""," "],["Identifier","$_"],["","->name "],["Identifier","}"],["","++ "],["Statement","}"],["","\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->associated_class "],["Statement","}"],[""," "],["Identifier","@attrs"],["",";\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","@classes"],["",") {\n        "],["Identifier","$class"],["","->add_dependent_meta_instance("],["Identifier","$self"],["",");\n    }\n\n    "],["Identifier","$self->{"],["String","meta_instance_dependencies"],["Identifier","}"],[""," = \\"],["Identifier","@classes"],["",";\n}\n\n"],["Keyword","sub "],["Function","remove_meta_instance_dependencies "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$classes"],[""," = "],["Statement","delete"],[""," "],["Identifier","$self->{"],["String","meta_instance_dependencies"],["Identifier","}"],[""," ) {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","@$classes"],["",") {\n            "],["Identifier","$class"],["","->remove_dependent_meta_instance("],["Identifier","$self"],["",");\n        }\n\n        "],["Statement","return"],[""," "],["Identifier","$classes"],["",";\n    }\n\n    "],["Statement","return"],["",";\n\n}\n\n"],["Keyword","sub "],["Function","add_dependent_meta_instance "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$metaclass"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","push"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self->{"],["String","dependent_meta_instances"],["Identifier","}"],[""," "],["Identifier","}"],["",", "],["Identifier","$metaclass"],["",";\n}\n\n"],["Keyword","sub "],["Function","remove_dependent_meta_instance "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$metaclass"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$metaclass"],["","->name;\n    "],["Identifier","@$_"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Operator","ne"],[""," "],["Identifier","$name"],[""," "],["Statement","}"],[""," "],["Identifier","@$_"],["","\n        "],["Repeat","for"],[""," "],["Identifier","$self->{"],["String","dependent_meta_instances"],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","invalidate_meta_instances "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$_"],["","->invalidate_meta_instance()\n        "],["Repeat","for"],[""," "],["Identifier","$self"],["",", "],["Identifier","@{"],[""," "],["Identifier","$self->{"],["String","dependent_meta_instances"],["Identifier","}"],[""," "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","invalidate_meta_instance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Operator","undef"],[""," "],["Identifier","$self->{"],["String","_meta_instance"],["Identifier","}"],["",";\n}\n\n"],["Comment","# check if we can reinitialize"],["","\n"],["Keyword","sub "],["Function","is_pristine "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Comment","# if any local attr is defined"],["","\n    "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->get_attribute_list;\n\n    "],["Comment","# or any non-declared methods"],["","\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," ( "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$self"],["","->get_method("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_method_list ) {\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$method"],["","->isa("],["String","\"Class::MOP::Method::Generated\""],["",");\n        "],["Comment","# "],["Todo","FIXME"],["Comment"," do we need to enforce this too? return unless $method->isa( $self->method_metaclass );"],["","\n    }\n\n    "],["Statement","return"],[""," "],["Number","1"],["",";\n}\n\n"],["Comment","## Class closing"],["","\n\n"],["Keyword","sub "],["Function","is_mutable   "],["","{ "],["Number","1"],[""," }\n"],["Keyword","sub "],["Function","is_immutable "],["","{ "],["Number","0"],[""," }\n\n"],["Keyword","sub "],["Function","immutable_options "],["","{ "],["Identifier","%{"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]{"],["String","__immutable"],["Identifier","}{"],["String","options"],["Identifier","}"],[""," || {} "],["Identifier","}"],[""," }\n\n"],["Keyword","sub "],["Function","_immutable_options "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," (\n        "],["String","inline_accessors"],["","   => "],["Number","1"],["",",\n        "],["String","inline_constructor"],[""," => "],["Number","1"],["",",\n        "],["String","inline_destructor"],["","  => "],["Number","0"],["",",\n        "],["String","debug"],["","              => "],["Number","0"],["",",\n        "],["String","immutable_trait"],["","    => "],["Identifier","$self"],["","->immutable_trait,\n        "],["String","constructor_name"],["","   => "],["Identifier","$self"],["","->constructor_name,\n        "],["String","constructor_class"],["","  => "],["Identifier","$self"],["","->constructor_class,\n        "],["String","destructor_class"],["","   => "],["Identifier","$self"],["","->destructor_class,\n        "],["Identifier","@args"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","make_immutable "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->is_mutable;\n\n    "],["Statement","my"],[""," ("],["Identifier","$file"],["",", "],["Identifier","$line"],["",") = ("],["Statement","caller"],["",")["],["Float","1..2"],["","];\n\n    "],["Identifier","$self"],["","->_initialize_immutable(\n        "],["String","file"],[""," => "],["Identifier","$file"],["",",\n        "],["String","line"],[""," => "],["Identifier","$line"],["",",\n        "],["Identifier","$self"],["","->_immutable_options("],["Identifier","@args"],["","),\n    );\n    "],["Identifier","$self"],["","->_rebless_as_immutable("],["Identifier","@args"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","make_mutable "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->is_immutable ) {\n        "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","$self"],["","->immutable_options;\n        "],["Identifier","$self"],["","->_rebless_as_mutable();\n        "],["Identifier","$self"],["","->_remove_inlined_code("],["Identifier","@args"],["",");\n        "],["Statement","delete"],[""," "],["Identifier","$self->{"],["String","__immutable"],["Identifier","}"],["",";\n        "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_rebless_as_immutable "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self->{"],["String","__immutable"],["Identifier","}{"],["String","original_class"],["Identifier","}"],[""," = "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n\n    "],["Operator","bless"],[""," "],["Identifier","$self"],[""," => "],["Identifier","$self"],["","->_immutable_metaclass("],["Identifier","@args"],["",");\n}\n\n"],["Keyword","sub "],["Function","_immutable_metaclass "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$args{"],["String","immutable_metaclass"],["Identifier","}"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$class"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$trait"],[""," = "],["Identifier","$args{"],["String","immutable_trait"],["Identifier","}"],[""," = "],["Identifier","$self"],["","->immutable_trait\n        || confess "],["String","\"no immutable trait specified for "],["Identifier","$self"],["String","\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],["","      = "],["Identifier","$self"],["","->meta;\n    "],["Statement","my"],[""," "],["Identifier","$meta_attr"],[""," = "],["Identifier","$meta"],["","->find_attribute_by_name("],["String","\"immutable_trait\""],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$class_name"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$meta_attr"],[""," "],["Operator","and"],[""," "],["Identifier","$trait"],[""," "],["Operator","eq"],[""," "],["Identifier","$meta_attr"],["","->"],["Conditional","default"],[""," ) {\n        "],["Comment","# if the trait is the same as the default we try and pick a"],["","\n        "],["Comment","# predictable name for the immutable metaclass"],["","\n        "],["Identifier","$class_name"],[""," = "],["String","'Class::MOP::Class::Immutable::'"],[""," . "],["Operator","ref"],["","("],["Identifier","$self"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$class_name"],[""," = "],["Statement","join"],[""," "],["String","'::'"],["",", "],["String","'Class::MOP::Class::Immutable::CustomTrait'"],["",",\n            "],["Identifier","$trait"],["",", "],["String","'ForMetaClass'"],["",", "],["Operator","ref"],["","("],["Identifier","$self"],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$class_name"],["","\n        "],["Conditional","if"],[""," is_class_loaded("],["Identifier","$class_name"],["",");\n\n    "],["Comment","# If the metaclass is a subclass of CMOP::Class which has had"],["","\n    "],["Comment","# metaclass roles applied (via Moose), then we want to make sure"],["","\n    "],["Comment","# that we preserve that anonymous class (see Fey::ORM for an"],["","\n    "],["Comment","# example of where this matters)."],["","\n    "],["Statement","my"],[""," "],["Identifier","$meta_name"],[""," = "],["Identifier","$meta"],["","->_real_ref_name;\n\n    "],["Statement","my"],[""," "],["Identifier","$immutable_meta"],[""," = "],["Identifier","$meta_name"],["","->create(\n        "],["Identifier","$class_name"],["",",\n        "],["String","superclasses"],[""," => [ "],["Operator","ref"],[""," "],["Identifier","$self"],[""," ],\n    );\n\n    Class::MOP::MiniTrait::apply( "],["Identifier","$immutable_meta"],["",", "],["Identifier","$trait"],[""," );\n\n    "],["Identifier","$immutable_meta"],["","->make_immutable(\n        "],["String","inline_constructor"],[""," => "],["Number","0"],["",",\n        "],["String","inline_accessors"],["","   => "],["Number","0"],["",",\n    );\n\n    "],["Statement","return"],[""," "],["Identifier","$class_name"],["",";\n}\n\n"],["Keyword","sub "],["Function","_remove_inlined_code "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Identifier","$self"],["","->remove_method( "],["Identifier","$_"],["","->name ) "],["Repeat","for"],[""," "],["Identifier","$self"],["","->_inlined_methods;\n\n    "],["Statement","delete"],[""," "],["Identifier","$self->{"],["String","__immutable"],["Identifier","}{"],["String","inlined_methods"],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inlined_methods "],["","{ "],["Identifier","@{"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]{"],["String","__immutable"],["Identifier","}{"],["String","inlined_methods"],["Identifier","}"],[""," || [] "],["Identifier","}"],[""," }\n\n"],["Keyword","sub "],["Function","_add_inlined_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$method"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","push"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self->{"],["String","__immutable"],["Identifier","}{"],["String","inlined_methods"],["Identifier","}"],[""," ||= [] "],["Identifier","}"],["",", "],["Identifier","$method"],["",";\n}\n\n"],["Keyword","sub "],["Function","_initialize_immutable "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self->{"],["String","__immutable"],["Identifier","}{"],["String","options"],["Identifier","}"],[""," = \\"],["Identifier","%args"],["",";\n    "],["Identifier","$self"],["","->_install_inlined_code("],["Identifier","%args"],["",");\n}\n\n"],["Keyword","sub "],["Function","_install_inlined_code "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Comment","# "],["Todo","FIXME"],["","\n    "],["Identifier","$self"],["","->_inline_accessors("],["Identifier","%args"],["",")   "],["Conditional","if"],[""," "],["Identifier","$args{"],["String","inline_accessors"],["Identifier","}"],["",";\n    "],["Identifier","$self"],["","->_inline_constructor("],["Identifier","%args"],["",") "],["Conditional","if"],[""," "],["Identifier","$args{"],["String","inline_constructor"],["Identifier","}"],["",";\n    "],["Identifier","$self"],["","->_inline_destructor("],["Identifier","%args"],["",")  "],["Conditional","if"],[""," "],["Identifier","$args{"],["String","inline_destructor"],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_rebless_as_mutable "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Operator","bless"],[""," "],["Identifier","$self"],["",", "],["Identifier","$self"],["","->_get_mutable_metaclass_name;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_accessors "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr_name"],[""," ( "],["Identifier","$self"],["","->get_attribute_list ) {\n        "],["Identifier","$self"],["","->get_attribute("],["Identifier","$attr_name"],["",")->install_accessors("],["Number","1"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_constructor "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$args{"],["String","constructor_name"],["Identifier","}"],["",";\n    "],["Comment","# A class may not even have a constructor, and that's okay."],["","\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$name"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_method("],["Identifier","$name"],["",") && !"],["Identifier","$args{"],["String","replace_constructor"],["Identifier","}"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->name;\n        "],["Statement","warn"],[""," "],["String","\"Not inlining a constructor for "],["Identifier","$class"],["String"," since it defines\""],["","\n            . "],["String","\" its own constructor."],["Special","\\n"],["String","\""],["","\n            . "],["String","\"If you are certain you don't need to inline your\""],["","\n            . "],["String","\" constructor, specify inline_constructor => 0 in your\""],["","\n            . "],["String","\" call to "],["Identifier","$class"],["String","->meta->make_immutable"],["Special","\\n"],["String","\""],["",";\n        "],["Statement","return"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$constructor_class"],[""," = "],["Identifier","$args{"],["String","constructor_class"],["Identifier","}"],["",";\n\n    load_class("],["Identifier","$constructor_class"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$constructor"],[""," = "],["Identifier","$constructor_class"],["","->new(\n        "],["String","options"],["","      => \\"],["Identifier","%args"],["",",\n        "],["String","metaclass"],["","    => "],["Identifier","$self"],["",",\n        "],["String","is_inline"],["","    => "],["Number","1"],["",",\n        "],["String","package_name"],[""," => "],["Identifier","$self"],["","->name,\n        "],["String","name"],["","         => "],["Identifier","$name"],["",",\n        "],["String","definition_context"],[""," => {\n            "],["String","description"],[""," => "],["String","\"constructor \""],[""," . "],["Identifier","$self"],["","->name . "],["String","\"::\""],[""," . "],["Identifier","$name"],["",",\n            "],["String","file"],["","        => "],["Identifier","$args{"],["String","file"],["Identifier","}"],["",",\n            "],["String","line"],["","        => "],["Identifier","$args{"],["String","line"],["Identifier","}"],["",",\n        },\n    );\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$args{"],["String","replace_constructor"],["Identifier","}"],[""," "],["Operator","or"],[""," "],["Identifier","$constructor"],["","->can_be_inlined ) {\n        "],["Identifier","$self"],["","->add_method( "],["Identifier","$name"],[""," => "],["Identifier","$constructor"],[""," );\n        "],["Identifier","$self"],["","->_add_inlined_method("],["Identifier","$constructor"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_destructor "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    ( "],["Statement","exists"],[""," "],["Identifier","$args{"],["String","destructor_class"],["Identifier","}"],[""," && "],["Operator","defined"],[""," "],["Identifier","$args{"],["String","destructor_class"],["Identifier","}"],[""," )\n        || confess "],["String","\"The 'inline_destructor' option is present, but \""],["","\n        . "],["String","\"no destructor class was specified\""],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_method("],["String","'DESTROY'"],["",") && ! "],["Identifier","$args{"],["String","replace_destructor"],["Identifier","}"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->name;\n        "],["Statement","warn"],[""," "],["String","\"Not inlining a destructor for "],["Identifier","$class"],["String"," since it defines\""],["","\n            . "],["String","\" its own destructor."],["Special","\\n"],["String","\""],["",";\n        "],["Statement","return"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$destructor_class"],[""," = "],["Identifier","$args{"],["String","destructor_class"],["Identifier","}"],["",";\n\n    load_class("],["Identifier","$destructor_class"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$destructor_class"],["","->is_needed("],["Identifier","$self"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$destructor"],[""," = "],["Identifier","$destructor_class"],["","->new(\n        "],["String","options"],["","      => \\"],["Identifier","%args"],["",",\n        "],["String","metaclass"],["","    => "],["Identifier","$self"],["",",\n        "],["String","package_name"],[""," => "],["Identifier","$self"],["","->name,\n        "],["String","name"],["","         => "],["String","'DESTROY'"],["",",\n        "],["String","definition_context"],[""," => {\n            "],["String","description"],[""," => "],["String","\"destructor \""],[""," . "],["Identifier","$self"],["","->name . "],["String","\"::DESTROY\""],["",",\n            "],["String","file"],["","        => "],["Identifier","$args{"],["String","file"],["Identifier","}"],["",",\n            "],["String","line"],["","        => "],["Identifier","$args{"],["String","line"],["Identifier","}"],["",",\n        },\n    );\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$args{"],["String","replace_destructor"],["Identifier","}"],[""," "],["Operator","or"],[""," "],["Identifier","$destructor"],["","->can_be_inlined ) {\n        "],["Identifier","$self"],["","->add_method( "],["String","'DESTROY'"],[""," => "],["Identifier","$destructor"],[""," );\n        "],["Identifier","$self"],["","->_add_inlined_method("],["Identifier","$destructor"],["",");\n    }\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Class Meta Object"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Class - Class Meta Object\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  # assuming that class Foo"],["","\n"],["PreProc","  # has been defined, you can"],["","\n\n"],["PreProc","  # use this for introspection ..."],["","\n\n"],["PreProc","  # add a method to Foo ..."],["","\n"],["PreProc","  Foo->meta->add_method( 'bar' => sub {...} )"],["","\n\n"],["PreProc","  # get a list of all the classes searched"],["","\n"],["PreProc","  # the method dispatcher in the correct order"],["","\n"],["PreProc","  Foo->meta->class_precedence_list()"],["","\n\n"],["PreProc","  # remove a method from Foo"],["","\n"],["PreProc","  Foo->meta->remove_method('bar');"],["","\n\n"],["PreProc","  # or use this to actually create classes ..."],["","\n\n"],["PreProc","  Class::MOP::Class->create("],["","\n"],["PreProc","      'Bar' => ("],["","\n"],["PreProc","          version      => '0.01',"],["","\n"],["PreProc","          superclasses => ['Foo'],"],["","\n"],["PreProc","          attributes   => ["],["","\n"],["PreProc","              Class::MOP::Attribute->new('$bar'),"],["","\n"],["PreProc","              Class::MOP::Attribute->new('$baz'),"],["","\n"],["PreProc","          ],"],["","\n"],["PreProc","          methods => {"],["","\n"],["PreProc","              calculate_bar => sub {...},"],["","\n"],["PreProc","              construct_baz => sub {...}"],["","\n"],["PreProc","          }"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThe Class Protocol is the largest and most complex part of the\nClass::MOP meta-object protocol. It controls the introspection and\nmanipulation of Perl 5 classes, and it can create them as well. The\nbest way to understand what this module can do is to read the\ndocumentation for each of its methods.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Class::MOP::Class>"],[""," is a subclass of "],["Identifier","L<Class::MOP::Module>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=head2"],[""," "],["String","Class construction"],["","\n\nThese methods all create new "],["Identifier","C<Class::MOP::Class>"],[""," objects. These\nobjects can represent existing classes or they can be used to create\nnew classes from scratch.\n\nThe metaclass object for a given class is a singleton. If you attempt\nto create a metaclass for the same class twice, you will just get the\nexisting object.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Class->create($package_name, %options) >>"],["","\n\nThis method creates a new "],["Identifier","C<Class::MOP::Class>"],[""," object with the given\npackage name. It accepts a number of options:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* version"],["","\n\nAn optional version number for the newly created package.\n\n"],["Statement","=item"],[""," "],["String","* authority"],["","\n\nAn optional authority for the newly created package.\n\n"],["Statement","=item"],[""," "],["String","* superclasses"],["","\n\nAn optional array reference of superclass names.\n\n"],["Statement","=item"],[""," "],["String","* methods"],["","\n\nAn optional hash reference of methods for the class. The keys of the\nhash reference are method names and values are subroutine references.\n\n"],["Statement","=item"],[""," "],["String","* attributes"],["","\n\nAn optional array reference of "],["Identifier","L<Class::MOP::Attribute>"],[""," objects.\n\n"],["Statement","=item"],[""," "],["String","* meta_name"],["","\n\nSpecifies the name to install the "],["Identifier","C<meta>"],[""," method for this class under.\nIf it is not passed, "],["Identifier","C<meta>"],[""," is assumed, and if "],["Identifier","C<undef>"],[""," is explicitly\ngiven, no meta method will be installed.\n\n"],["Statement","=item"],[""," "],["String","* weaken"],["","\n\nIf true, the metaclass that is stored in the global cache will be a\nweak reference.\n\nClasses created in this way are destroyed once the metaclass they are\nattached to goes out of scope, and will be removed from Perl's internal\nsymbol table.\n\nAll instances of a class with a weakened metaclass keep a special\nreference to the metaclass object, which prevents the metaclass from\ngoing out of scope while any instances exist.\n\nThis only works if the instance is based on a hash reference, however.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Class->create_anon_class(%options) >>"],["","\n\nThis method works just like "],["Identifier","C<< Class::MOP::Class->create >>"],[""," but it\ncreates an \"anonymous\" class. In fact, the class does have a name, but\nthat name is a unique name generated internally by this module.\n\nIt accepts the same "],["Identifier","C<superclasses>"],["",", "],["Identifier","C<methods>"],["",", and "],["Identifier","C<attributes>"],["","\nparameters that "],["Identifier","C<create>"],[""," accepts.\n\nAnonymous classes default to "],["Identifier","C<< weaken => 1 >>"],["",", although this can be\noverridden.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Class->initialize($package_name, %options) >>"],["","\n\nThis method will initialize a "],["Identifier","C<Class::MOP::Class>"],[""," object for the\nnamed package. Unlike "],["Identifier","C<create>"],["",", this method "],["Identifier","I<will not>"],[""," create a new\nclass.\n\nThe purpose of this method is to retrieve a "],["Identifier","C<Class::MOP::Class>"],["","\nobject for introspecting an existing class.\n\nIf an existing "],["Identifier","C<Class::MOP::Class>"],[""," object exists for the named\npackage, it will be returned, and any options provided will be\nignored!\n\nIf the object does not yet exist, it will be created.\n\nThe valid options that can be passed to this method are\n"],["Identifier","C<attribute_metaclass>"],["",", "],["Identifier","C<method_metaclass>"],["",",\n"],["Identifier","C<wrapped_method_metaclass>"],["",", and "],["Identifier","C<instance_metaclass>"],["",". These are all\noptional, and default to the appropriate class in the "],["Identifier","C<Class::MOP>"],["","\ndistribution.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Object instance construction and cloning"],["","\n\nThese methods are all related to creating and/or cloning object\ninstances.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->clone_object($instance, %params) >>"],["","\n\nThis method clones an existing object instance. Any parameters you\nprovide are will override existing attribute values in the object.\n\nThis is a convenience method for cloning an object instance, then\nblessing it into the appropriate package.\n\nYou could implement a clone method in your class, using this method:\n\n"],["PreProc","  sub clone {"],["","\n"],["PreProc","      my ($self, %params) = @_;"],["","\n"],["PreProc","      $self->meta->clone_object($self, %params);"],["","\n"],["PreProc","  }"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->rebless_instance($instance, %params) >>"],["","\n\nThis method changes the class of "],["Identifier","C<$instance>"],[""," to the metaclass's class.\n\nYou can only rebless an instance into a subclass of its current\nclass. If you pass any additional parameters, these will be treated\nlike constructor parameters and used to initialize the object's\nattributes. Any existing attributes that are already set will be\noverwritten.\n\nBefore reblessing the instance, this method will call\n"],["Identifier","C<rebless_instance_away>"],[""," on the instance's current metaclass. This method\nwill be passed the instance, the new metaclass, and any parameters\nspecified to "],["Identifier","C<rebless_instance>"],["",". By default, "],["Identifier","C<rebless_instance_away>"],["","\ndoes nothing; it is merely a hook.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->rebless_instance_back($instance) >>"],["","\n\nDoes the same thing as "],["Identifier","C<rebless_instance>"],["",", except that you can only\nrebless an instance into one of its superclasses. Any attributes that\ndo not exist in the superclass will be deinitialized.\n\nThis is a much more dangerous operation than "],["Identifier","C<rebless_instance>"],["",",\nespecially when multiple inheritance is involved, so use this carefully!\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->new_object(%params) >>"],["","\n\nThis method is used to create a new object of the metaclass's\nclass. Any parameters you provide are used to initialize the\ninstance's attributes. A special "],["Identifier","C<__INSTANCE__>"],[""," key can be passed to\nprovide an already generated instance, rather than having Class::MOP\ngenerate it for you. This is mostly useful for using Class::MOP with\nforeign classes which generate instances using their own constructors.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->instance_metaclass >>"],["","\n\nReturns the class name of the instance metaclass. See\n"],["Identifier","L<Class::MOP::Instance>"],[""," for more information on the instance\nmetaclass.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_meta_instance >>"],["","\n\nReturns an instance of the "],["Identifier","C<instance_metaclass>"],[""," to be used in the\nconstruction of a new instance of the class.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Informational predicates"],["","\n\nThese are a few predicate methods for asking information about the\nclass itself.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->is_anon_class >>"],["","\n\nThis returns true if the class was created by calling "],["Identifier","C<<"],["","\n"],["Identifier","Class::MOP::Class->create_anon_class >>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->is_mutable >>"],["","\n\nThis returns true if the class is still mutable.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->is_immutable >>"],["","\n\nThis returns true if the class has been made immutable.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->is_pristine >>"],["","\n\nA class is "],["Identifier","I<not>"],[""," pristine if it has non-inherited attributes or if it\nhas any generated methods.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Inheritance Relationships"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->superclasses(@superclasses) >>"],["","\n\nThis is a read-write accessor which represents the superclass\nrelationships of the metaclass's class.\n\nThis is basically sugar around getting and setting "],["Identifier","C<@ISA>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->class_precedence_list >>"],["","\n\nThis returns a list of all of the class's ancestor classes. The\nclasses are returned in method dispatch order.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->linearized_isa >>"],["","\n\nThis returns a list based on "],["Identifier","C<class_precedence_list>"],[""," but with all\nduplicates removed.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->subclasses >>"],["","\n\nThis returns a list of all subclasses for this class, even indirect\nsubclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->direct_subclasses >>"],["","\n\nThis returns a list of immediate subclasses for this class, which does not\ninclude indirect subclasses.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Method introspection and creation"],["","\n\nThese methods allow you to introspect a class's methods, as well as\nadd, remove, or change methods.\n\nDetermining what is truly a method in a Perl 5 class requires some\nheuristics (aka guessing).\n\nMethods defined outside the package with a fully qualified name ("],["Identifier","C<sub"],["","\n"],["Identifier","Package::name { ... }>"],["",") will be included. Similarly, methods named\nwith a fully qualified name using "],["Identifier","L<Sub::Name>"],[""," are also included.\n\nHowever, we attempt to ignore imported functions.\n\nUltimately, we are using heuristics to determine what truly is a\nmethod in a class, and these heuristics may get the wrong answer in\nsome edge cases. However, for most \"normal\" cases the heuristics work\ncorrectly.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_method($method_name) >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Method>"],[""," for the specified\n"],["Identifier","C<$method_name>"],["",". If the class does not have the specified method, it\nreturns "],["Identifier","C<undef>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->has_method($method_name) >>"],["","\n\nReturns a boolean indicating whether or not the class defines the\nnamed method. It does not include methods inherited from parent\nclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_method_list >>"],["","\n\nThis will return a list of method "],["Identifier","I<names>"],[""," for all methods defined in\nthis class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_method($method_name, $method) >>"],["","\n\nThis method takes a method name and a subroutine reference, and adds\nthe method to the class.\n\nThe subroutine reference can be a "],["Identifier","L<Class::MOP::Method>"],["",", and you are\nstrongly encouraged to pass a meta method object instead of a code\nreference. If you do so, that object gets stored as part of the\nclass's method map directly. If not, the meta information will have to\nbe recreated later, and may be incorrect.\n\nIf you provide a method object, this method will clone that object if\nthe object's package name does not match the class name. This lets us\ntrack the original source of any methods added from other classes\n(notably Moose roles).\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->remove_method($method_name) >>"],["","\n\nRemove the named method from the class. This method returns the\n"],["Identifier","L<Class::MOP::Method>"],[""," object for the method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->method_metaclass >>"],["","\n\nReturns the class name of the method metaclass, see\n"],["Identifier","L<Class::MOP::Method>"],[""," for more information on the method metaclass.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->wrapped_method_metaclass >>"],["","\n\nReturns the class name of the wrapped method metaclass, see\n"],["Identifier","L<Class::MOP::Method::Wrapped>"],[""," for more information on the wrapped\nmethod metaclass.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_all_methods >>"],["","\n\nThis will traverse the inheritance hierarchy and return a list of all\nthe "],["Identifier","L<Class::MOP::Method>"],[""," objects for this class and its parents.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->find_method_by_name($method_name) >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Method>"],[""," for the specified\n"],["Identifier","C<$method_name>"],["",". If the class does not have the specified method, it\nreturns "],["Identifier","C<undef>"],["","\n\nUnlike "],["Identifier","C<get_method>"],["",", this method "],["Identifier","I<will>"],[""," look for the named method in\nsuperclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_all_method_names >>"],["","\n\nThis will return a list of method "],["Identifier","I<names>"],[""," for all of this class's\nmethods, including inherited methods.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->find_all_methods_by_name($method_name) >>"],["","\n\nThis method looks for the named method in the class and all of its\nparents. It returns every matching method it finds in the inheritance\ntree, so it returns a list of methods.\n\nEach method is returned as a hash reference with three keys. The keys\nare "],["Identifier","C<name>"],["",", "],["Identifier","C<class>"],["",", and "],["Identifier","C<code>"],["",". The "],["Identifier","C<code>"],[""," key has a\n"],["Identifier","L<Class::MOP::Method>"],[""," object as its value.\n\nThe list of methods is distinct.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->find_next_method_by_name($method_name) >>"],["","\n\nThis method returns the first method in any superclass matching the\ngiven name. It is effectively the method that "],["Identifier","C<SUPER::$method_name>"],["","\nwould dispatch to.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Attribute introspection and creation"],["","\n\nBecause Perl 5 does not have a core concept of attributes in classes,\nwe can only return information about attributes which have been added\nvia this class's methods. We cannot discover information about\nattributes which are defined in terms of \"regular\" Perl 5 methods.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_attribute($attribute_name) >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Attribute>"],[""," for the specified\n"],["Identifier","C<$attribute_name>"],["",". If the class does not have the specified\nattribute, it returns "],["Identifier","C<undef>"],["",".\n\n"],["Todo","NOTE"],[""," that get_attribute does not search superclasses, for that you\nneed to use "],["Identifier","C<find_attribute_by_name>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->has_attribute($attribute_name) >>"],["","\n\nReturns a boolean indicating whether or not the class defines the\nnamed attribute. It does not include attributes inherited from parent\nclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_attribute_list >>"],["","\n\nThis will return a list of attributes "],["Identifier","I<names>"],[""," for all attributes\ndefined in this class.  Note that this operates on the current class\nonly, it does not traverse the inheritance hierarchy.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_all_attributes >>"],["","\n\nThis will traverse the inheritance hierarchy and return a list of all\nthe "],["Identifier","L<Class::MOP::Attribute>"],[""," objects for this class and its parents.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->find_attribute_by_name($attribute_name) >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Attribute>"],[""," for the specified\n"],["Identifier","C<$attribute_name>"],["",". If the class does not have the specified\nattribute, it returns "],["Identifier","C<undef>"],["",".\n\nUnlike "],["Identifier","C<get_attribute>"],["",", this attribute "],["Identifier","I<will>"],[""," look for the named\nattribute in superclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_attribute(...) >>"],["","\n\nThis method accepts either an existing "],["Identifier","L<Class::MOP::Attribute>"],["","\nobject or parameters suitable for passing to that class's "],["Identifier","C<new>"],["","\nmethod.\n\nThe attribute provided will be added to the class.\n\nAny accessor methods defined by the attribute will be added to the\nclass when the attribute is added.\n\nIf an attribute of the same name already exists, the old attribute\nwill be removed first.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->remove_attribute($attribute_name) >>"],["","\n\nThis will remove the named attribute from the class, and\n"],["Identifier","L<Class::MOP::Attribute>"],[""," object.\n\nRemoving an attribute also removes any accessor methods defined by the\nattribute.\n\nHowever, note that removing an attribute will only affect "],["Identifier","I<future>"],["","\nobject instances created for this class, not existing instances.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->attribute_metaclass >>"],["","\n\nReturns the class name of the attribute metaclass for this class. By\ndefault, this is "],["Identifier","L<Class::MOP::Attribute>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Overload introspection and creation"],["","\n\nThese methods provide an API to the core "],["Identifier","L<overload>"],[""," functionality.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->is_overloaded >>"],["","\n\nReturns true if overloading is enabled for this class. Corresponds to\n"],["Identifier","L<overload::Overloaded|overload/Public Functions>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_overloaded_operator($op) >>"],["","\n\nReturns the "],["Identifier","L<Class::MOP::Method::Overload>"],[""," object corresponding to the\noperator named "],["Identifier","C<$op>"],["",", if one exists for this class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->has_overloaded_operator($op) >>"],["","\n\nReturns whether or not the operator "],["Identifier","C<$op>"],[""," is overloaded for this class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_overload_list >>"],["","\n\nReturns a list of operator names which have been overloaded (see\n"],["Identifier","L<overload/Overloadable Operations>"],[""," for the list of valid operator names).\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->get_all_overloaded_operators >>"],["","\n\nReturns a list of "],["Identifier","L<Class::MOP::Method::Overload>"],[""," objects corresponding to the\noperators that have been overloaded.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_overloaded_operator($op, $impl) >>"],["","\n\nOverloads the operator "],["Identifier","C<$op>"],[""," for this class, with the implementation "],["Identifier","C<$impl>"],["",".\n"],["Identifier","C<$impl>"],[""," can be either a coderef or a method name. Corresponds to\n"],["Identifier","C<< use overload $op => $impl; >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->remove_overloaded_operator($op) >>"],["","\n\nRemove overloading for operator "],["Identifier","C<$op>"],["",". Corresponds to "],["Identifier","C<< no overload $op; >>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Class Immutability"],["","\n\nMaking a class immutable \"freezes\" the class definition. You can no\nlonger call methods which alter the class, such as adding or removing\nmethods or attributes.\n\nMaking a class immutable lets us optimize the class by inlining some\nmethods, and also allows us to optimize some methods on the metaclass\nobject itself.\n\nAfter immutabilization, the metaclass object will cache most informational\nmethods that returns information about methods or attributes. Methods which\nwould alter the class, such as "],["Identifier","C<add_attribute>"],[""," and "],["Identifier","C<add_method>"],["",", will\nthrow an error on an immutable metaclass object.\n\nThe immutabilization system in "],["Identifier","L<Moose>"],[""," takes much greater advantage\nof the inlining features than Class::MOP itself does.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->make_immutable(%options) >>"],["","\n\nThis method will create an immutable transformer and use it to make\nthe class and its metaclass object immutable, and returns true\n(you should not rely on the details of this value apart from its truth).\n\nThis method accepts the following options:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* inline_accessors"],["","\n\n"],["Statement","=item"],[""," "],["String","* inline_constructor"],["","\n\n"],["Statement","=item"],[""," "],["String","* inline_destructor"],["","\n\nThese are all booleans indicating whether the specified "],["Identifier","method(s)"],["","\nshould be inlined.\n\nBy default, accessors and the constructor are inlined, but not the\ndestructor.\n\n"],["Statement","=item"],[""," "],["String","* immutable_trait"],["","\n\nThe name of a class which will be used as a parent class for the\nmetaclass object being made immutable. This \"trait\" implements the\npost-immutability functionality of the metaclass (but not the\ntransformation itself).\n\nThis defaults to "],["Identifier","L<Class::MOP::Class::Immutable::Trait>"],["",".\n\n"],["Statement","=item"],[""," "],["String","* constructor_name"],["","\n\nThis is the constructor method name. This defaults to \"new\".\n\n"],["Statement","=item"],[""," "],["String","* constructor_class"],["","\n\nThe name of the method metaclass for constructors. It will be used to\ngenerate the inlined constructor. This defaults to\n\"Class::MOP::Method::Constructor\".\n\n"],["Statement","=item"],[""," "],["String","* replace_constructor"],["","\n\nThis is a boolean indicating whether an existing constructor should be\nreplaced when inlining a constructor. This defaults to false.\n\n"],["Statement","=item"],[""," "],["String","* destructor_class"],["","\n\nThe name of the method metaclass for destructors. It will be used to\ngenerate the inlined destructor. This defaults to\n\"Class::MOP::Method::Denstructor\".\n\n"],["Statement","=item"],[""," "],["String","* replace_destructor"],["","\n\nThis is a boolean indicating whether an existing destructor should be\nreplaced when inlining a destructor. This defaults to false.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->immutable_options >>"],["","\n\nReturns a hash of the options used when making the class immutable, including\nboth defaults and anything supplied by the user in the call to "],["Identifier","C<<"],["","\n"],["Identifier","$metaclass->make_immutable >>"],["",". This is useful if you need to temporarily make\na class mutable and then restore immutability as it was before.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->make_mutable >>"],["","\n\nCalling this method reverse the immutabilization transformation.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Method Modifiers"],["","\n\nMethod modifiers are hooks which allow a method to be wrapped with\n"],["Identifier","I<before>"],["",", "],["Identifier","I<after>"],[""," and "],["Identifier","I<around>"],[""," method modifiers. Every time a\nmethod is called, its modifiers are also called.\n\nA class can modify its own methods, as well as methods defined in\nparent classes.\n\n"],["Statement","=head3"],[""," "],["String","How method modifiers work?"],["","\n\nMethod modifiers work by wrapping the original method and then\nreplacing it in the class's symbol table. The wrappers will handle\ncalling all the modifiers in the appropriate order and preserving the\ncalling context for the original method.\n\nThe return values of "],["Identifier","C<before>"],[""," and "],["Identifier","C<after>"],[""," modifiers are\nignored. This is because their purpose is "],["Identifier","B<not>"],[""," to filter the input\nand output of the primary method (this is done with an "],["Identifier","I<around>"],["","\nmodifier).\n\nThis may seem like an odd restriction to some, but doing this allows\nfor simple code to be added at the beginning or end of a method call\nwithout altering the function of the wrapped method or placing any\nextra responsibility on the code of the modifier.\n\nOf course if you have more complex needs, you can use the "],["Identifier","C<around>"],["","\nmodifier which allows you to change both the parameters passed to the\nwrapped method, as well as its return value.\n\nBefore and around modifiers are called in last-defined-first-called\norder, while after modifiers are called in first-defined-first-called\norder. So the call tree might looks something like this:\n\n"],["PreProc","  before 2"],["","\n"],["PreProc","   before 1"],["","\n"],["PreProc","    around 2"],["","\n"],["PreProc","     around 1"],["","\n"],["PreProc","      primary"],["","\n"],["PreProc","     around 1"],["","\n"],["PreProc","    around 2"],["","\n"],["PreProc","   after 1"],["","\n"],["PreProc","  after 2"],["","\n\n"],["Statement","=head3"],[""," "],["String","What is the performance impact?"],["","\n\nOf course there is a performance cost associated with method\nmodifiers, but we have made every effort to make that cost directly\nproportional to the number of modifier features you use.\n\nThe wrapping method does its best to "],["Identifier","B<only>"],[""," do as much work as it\nabsolutely needs to. In order to do this we have moved some of the\nperformance costs to set-up time, where they are easier to amortize.\n\nAll this said, our benchmarks have indicated the following:\n\n"],["PreProc","  simple wrapper with no modifiers             100% slower"],["","\n"],["PreProc","  simple wrapper with simple before modifier   400% slower"],["","\n"],["PreProc","  simple wrapper with simple after modifier    450% slower"],["","\n"],["PreProc","  simple wrapper with simple around modifier   500-550% slower"],["","\n"],["PreProc","  simple wrapper with all 3 modifiers          1100% slower"],["","\n\nThese numbers may seem daunting, but you must remember, every feature\ncomes with some cost. To put things in perspective, just doing a\nsimple "],["Identifier","C<AUTOLOAD>"],[""," which does nothing but extract the name of the\nmethod called and return it costs about 400% over a normal method\ncall.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_before_method_modifier($method_name, $code) >>"],["","\n\nThis wraps the specified method with the supplied subroutine\nreference. The modifier will be called as a method itself, and will\nreceive the same arguments as are passed to the method.\n\nWhen the modifier exits, the wrapped method will be called.\n\nThe return value of the modifier will be ignored.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_after_method_modifier($method_name, $code) >>"],["","\n\nThis wraps the specified method with the supplied subroutine\nreference. The modifier will be called as a method itself, and will\nreceive the same arguments as are passed to the method.\n\nWhen the wrapped methods exits, the modifier will be called.\n\nThe return value of the modifier will be ignored.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_around_method_modifier($method_name, $code) >>"],["","\n\nThis wraps the specified method with the supplied subroutine\nreference.\n\nThe first argument passed to the modifier will be a subroutine\nreference to the wrapped method. The second argument is the object,\nand after that come any arguments passed when the method is called.\n\nThe around modifier can choose to call the original method, as well as\nwhat arguments to pass if it does so.\n\nThe return value of the modifier is what will be seen by the caller.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Introspection"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Class->meta >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Class>"],[""," instance for this class.\n\nIt should also be noted that "],["Identifier","L<Class::MOP>"],[""," will actually bootstrap\nthis module by installing a number of attribute meta-objects into its\nmetaclass.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]