[["","\n"],["Statement","package"],["Type"," Class::MOP::Attribute"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Attribute::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Attribute::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Class::MOP::Method::Accessor;\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'weaken'"],["",";\n"],["Statement","use "],["","Try::Tiny;\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Object'"],["",", "],["String","'Class::MOP::Mixin::AttributeCore'"],["",";\n\n"],["Comment","# "],["Todo","NOTE:"],["Comment"," (meta-circularity)"],["","\n"],["Comment","# This method will be replaced in the"],["","\n"],["Comment","# boostrap section of Class::MOP, by"],["","\n"],["Comment","# a new version which uses the"],["","\n"],["Comment","# &Class::MOP::Class::construct_instance"],["","\n"],["Comment","# method to build an attribute meta-object"],["","\n"],["Comment","# which itself is described with attribute"],["","\n"],["Comment","# meta-objects."],["","\n"],["Comment","#     - Ain't meta-circularity grand? :)"],["","\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","\"name\""],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$options{"],["String","name"],["Identifier","}"],["",";\n\n    ("],["Operator","defined"],[""," "],["Identifier","$name"],["",")\n        || confess "],["String","\"You must provide a name for the attribute\""],["",";\n\n    "],["Identifier","$options{"],["String","init_arg"],["Identifier","}"],[""," = "],["Identifier","$name"],["","\n        "],["Conditional","if"],[""," "],["Operator","not"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","init_arg"],["Identifier","}"],["",";\n    "],["Conditional","if"],["","("],["Statement","exists"],[""," "],["Identifier","$options{"],["String","builder"],["Identifier","}"],["","){\n        confess("],["String","\"builder must be a defined scalar value which is a method name\""],["",")\n            "],["Conditional","if"],[""," "],["Operator","ref"],[""," "],["Identifier","$options{"],["String","builder"],["Identifier","}"],[""," || !("],["Operator","defined"],[""," "],["Identifier","$options{"],["String","builder"],["Identifier","}"],["",");\n        confess("],["String","\"Setting both default and builder is not allowed.\""],["",")\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","default"],["Identifier","}"],["",";\n    } "],["Conditional","else"],[""," {\n        ("],["Identifier","$class"],["","->is_default_a_coderef(\\"],["Identifier","%options"],["","))\n            || confess("],["String","\"References are not allowed as default values, you must \""],["",".\n                       "],["String","\"wrap the default of '"],["Identifier","$name"],["String","' in a CODE reference (ex: sub { [] } and not [])\""],["",")\n                "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","default"],["Identifier","}"],[""," && "],["Operator","ref"],[""," "],["Identifier","$options{"],["String","default"],["Identifier","}"],["",";\n    }\n    "],["Conditional","if"],["","( "],["Identifier","$options{"],["String","required"],["Identifier","}"],[""," "],["Operator","and"],[""," "],["Operator","not"],["","( "],["Operator","defined"],["","("],["Identifier","$options{"],["String","builder"],["Identifier","}"],["",") || "],["Operator","defined"],["","("],["Identifier","$options{"],["String","init_arg"],["Identifier","}"],["",") || "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","default"],["Identifier","}"],[""," ) ) {\n        confess("],["String","\"A required attribute must have either 'init_arg', 'builder', or 'default'\""],["",");\n    }\n\n    "],["Identifier","$class"],["","->_new(\\"],["Identifier","%options"],["",");\n}\n\n"],["Keyword","sub "],["Function","_new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," __PACKAGE__;\n\n    "],["Statement","my"],[""," "],["Identifier","$options"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n\n    "],["Operator","bless"],[""," {\n        "],["String","'name'"],["","               => "],["Identifier","$options->{"],["String","name"],["Identifier","}"],["",",\n        "],["String","'accessor'"],["","           => "],["Identifier","$options->{"],["String","accessor"],["Identifier","}"],["",",\n        "],["String","'reader'"],["","             => "],["Identifier","$options->{"],["String","reader"],["Identifier","}"],["",",\n        "],["String","'writer'"],["","             => "],["Identifier","$options->{"],["String","writer"],["Identifier","}"],["",",\n        "],["String","'predicate'"],["","          => "],["Identifier","$options->{"],["String","predicate"],["Identifier","}"],["",",\n        "],["String","'clearer'"],["","            => "],["Identifier","$options->{"],["String","clearer"],["Identifier","}"],["",",\n        "],["String","'builder'"],["","            => "],["Identifier","$options->{"],["String","builder"],["Identifier","}"],["",",\n        "],["String","'init_arg'"],["","           => "],["Identifier","$options->{"],["String","init_arg"],["Identifier","}"],["",",\n        "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","default"],["Identifier","}"],["","\n            ? ("],["String","'default'"],["","     => "],["Identifier","$options->{"],["String","default"],["Identifier","}"],["",")\n            : (),\n        "],["String","'initializer'"],["","        => "],["Identifier","$options->{"],["String","initializer"],["Identifier","}"],["",",\n        "],["String","'definition_context'"],[""," => "],["Identifier","$options->{"],["String","definition_context"],["Identifier","}"],["",",\n        "],["Comment","# keep a weakened link to the"],["","\n        "],["Comment","# class we are associated with"],["","\n        "],["String","'associated_class'"],[""," => "],["Operator","undef"],["",",\n        "],["Comment","# and a list of the methods"],["","\n        "],["Comment","# associated with this attr"],["","\n        "],["String","'associated_methods'"],[""," => [],\n        "],["Comment","# this let's us keep track of"],["","\n        "],["Comment","# our order inside the associated"],["","\n        "],["Comment","# class"],["","\n        "],["String","'insertion_order'"],["","    => "],["Operator","undef"],["",",\n    }, "],["Identifier","$class"],["",";\n}\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# this is a primitive (and kludgy) clone operation"],["","\n"],["Comment","# for now, it will be replaced in the Class::MOP"],["","\n"],["Comment","# bootstrap with a proper one, however we know"],["","\n"],["Comment","# that this one will work fine for now."],["","\n"],["Keyword","sub "],["Function","clone "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","    = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n    (blessed("],["Identifier","$self"],["","))\n        || confess "],["String","\"Can only clone an instance\""],["",";\n    "],["Statement","return"],[""," "],["Operator","bless"],[""," { "],["Identifier","%{$self}"],["",", "],["Identifier","%options"],[""," } => "],["Operator","ref"],["","("],["Identifier","$self"],["",");\n}\n\n"],["Keyword","sub "],["Function","initialize_instance_slot "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$self->{"],["String","'init_arg'"],["Identifier","}"],["",";\n\n    "],["Comment","# try to fetch the init arg from the %params ..."],["","\n\n    "],["Comment","# if nothing was in the %params, we can use the"],["","\n    "],["Comment","# attribute's default value (if it has one)"],["","\n    "],["Conditional","if"],["","("],["Operator","defined"],[""," "],["Identifier","$init_arg"],[""," "],["Operator","and"],[""," "],["Statement","exists"],[""," "],["Identifier","$params->{$init_arg}"],["","){\n        "],["Identifier","$self"],["","->_set_initial_slot_value(\n            "],["Identifier","$meta_instance"],["",",\n            "],["Identifier","$instance"],["",",\n            "],["Identifier","$params->{$init_arg}"],["",",\n        );\n    }\n    "],["Conditional","elsif"],[""," ("],["Statement","exists"],[""," "],["Identifier","$self->{"],["String","'default'"],["Identifier","}"],["",") {\n        "],["Identifier","$self"],["","->_set_initial_slot_value(\n            "],["Identifier","$meta_instance"],["",",\n            "],["Identifier","$instance"],["",",\n            "],["Identifier","$self"],["","->"],["Conditional","default"],["","("],["Identifier","$instance"],["","),\n        );\n    }\n    "],["Conditional","elsif"],[""," ("],["Operator","defined"],["","( "],["Statement","my"],[""," "],["Identifier","$builder"],[""," = "],["Identifier","$self->{"],["String","'builder'"],["Identifier","}"],["",")) {\n        "],["Conditional","if"],[""," ("],["Identifier","$builder"],[""," = "],["Identifier","$instance"],["","->can("],["Identifier","$builder"],["",")) {\n            "],["Identifier","$self"],["","->_set_initial_slot_value(\n                "],["Identifier","$meta_instance"],["",",\n                "],["Identifier","$instance"],["",",\n                "],["Identifier","$instance"],["","->"],["Identifier","$builder"],["",",\n            );\n        }\n        "],["Conditional","else"],[""," {\n            confess("],["Operator","ref"],["","("],["Identifier","$instance"],["",")."],["String","\" does not support builder method '\""],["",". "],["Identifier","$self->{"],["String","'builder'"],["Identifier","}"],[""," ."],["String","\"' for attribute '\""],[""," . "],["Identifier","$self"],["","->name . "],["String","\"'\""],["",");\n        }\n    }\n}\n\n"],["Keyword","sub "],["Function","_set_initial_slot_value "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$slot_name"],[""," = "],["Identifier","$self"],["","->name;\n\n    "],["Statement","return"],[""," "],["Identifier","$meta_instance"],["","->set_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$slot_name"],["",", "],["Identifier","$value"],["",")\n        "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_initializer;\n\n    "],["Statement","my"],[""," "],["Identifier","$callback"],[""," = "],["Identifier","$self"],["","->_make_initializer_writer_callback(\n        "],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$slot_name"],["","\n    );\n\n    "],["Statement","my"],[""," "],["Identifier","$initializer"],[""," = "],["Identifier","$self"],["","->initializer;\n\n    "],["Comment","# most things will just want to set a value, so make it first arg"],["","\n    "],["Identifier","$instance"],["","->"],["Identifier","$initializer"],["","("],["Identifier","$value"],["",", "],["Identifier","$callback"],["",", "],["Identifier","$self"],["",");\n}\n\n"],["Keyword","sub "],["Function","_make_initializer_writer_callback "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$slot_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n        "],["Identifier","$meta_instance"],["","->set_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$slot_name"],["",", "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",");\n    };\n}\n\n"],["Keyword","sub "],["Function","get_read_method  "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$reader"],[""," = "],["Identifier","$self"],["","->reader || "],["Identifier","$self"],["","->accessor;\n    "],["Comment","# normal case ..."],["","\n    "],["Statement","return"],[""," "],["Identifier","$reader"],[""," "],["Conditional","unless"],[""," "],["Operator","ref"],[""," "],["Identifier","$reader"],["",";\n    "],["Comment","# the HASH ref case"],["","\n    "],["Statement","my"],[""," ("],["Identifier","$name"],["",") = "],["Identifier","%$reader"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$name"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_write_method "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$writer"],[""," = "],["Identifier","$self"],["","->writer || "],["Identifier","$self"],["","->accessor;\n    "],["Comment","# normal case ..."],["","\n    "],["Statement","return"],[""," "],["Identifier","$writer"],[""," "],["Conditional","unless"],[""," "],["Operator","ref"],[""," "],["Identifier","$writer"],["",";\n    "],["Comment","# the HASH ref case"],["","\n    "],["Statement","my"],[""," ("],["Identifier","$name"],["",") = "],["Identifier","%$writer"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$name"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_read_method_ref "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Conditional","if"],[""," (("],["Statement","my"],[""," "],["Identifier","$reader"],[""," = "],["Identifier","$self"],["","->get_read_method) && "],["Identifier","$self"],["","->associated_class) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->associated_class->get_method("],["Identifier","$reader"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Keyword","sub "],["","{ "],["Identifier","$self"],["","->get_value("],["Identifier","@_"],["",") };\n        "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->associated_class) {\n            "],["Statement","return"],[""," "],["Identifier","$class"],["","->method_metaclass->wrap(\n                "],["Identifier","$code"],["",",\n                "],["String","package_name"],[""," => "],["Identifier","$class"],["","->name,\n                "],["String","name"],["","         => "],["String","'__ANON__'"],["","\n            );\n        }\n        "],["Conditional","else"],[""," {\n            "],["Statement","return"],[""," "],["Identifier","$code"],["",";\n        }\n    }\n}\n\n"],["Keyword","sub "],["Function","get_write_method_ref "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Conditional","if"],[""," (("],["Statement","my"],[""," "],["Identifier","$writer"],[""," = "],["Identifier","$self"],["","->get_write_method) && "],["Identifier","$self"],["","->associated_class) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->associated_class->get_method("],["Identifier","$writer"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Keyword","sub "],["","{ "],["Identifier","$self"],["","->set_value("],["Identifier","@_"],["",") };\n        "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->associated_class) {\n            "],["Statement","return"],[""," "],["Identifier","$class"],["","->method_metaclass->wrap(\n                "],["Identifier","$code"],["",",\n                "],["String","package_name"],[""," => "],["Identifier","$class"],["","->name,\n                "],["String","name"],["","         => "],["String","'__ANON__'"],["","\n            );\n        }\n        "],["Conditional","else"],[""," {\n            "],["Statement","return"],[""," "],["Identifier","$code"],["",";\n        }\n    }\n}\n\n"],["Comment","# slots"],["","\n\n"],["Keyword","sub "],["Function","slots "],["","{ ("],["Statement","shift"],["",")->name }\n\n"],["Comment","# class association"],["","\n\n"],["Keyword","sub "],["Function","attach_to_class "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    (blessed("],["Identifier","$class"],["",") && "],["Identifier","$class"],["","->isa("],["String","'Class::MOP::Class'"],["","))\n        || confess "],["String","\"You must pass a Class::MOP::Class instance (or a subclass)\""],["",";\n    weaken("],["Identifier","$self->{"],["String","'associated_class'"],["Identifier","}"],[""," = "],["Identifier","$class"],["",");\n}\n\n"],["Keyword","sub "],["Function","detach_from_class "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self->{"],["String","'associated_class'"],["Identifier","}"],[""," = "],["Operator","undef"],["",";\n}\n\n"],["Comment","# method association"],["","\n\n"],["Keyword","sub "],["Function","associate_method "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","push"],[""," "],["Identifier","@{$self->{"],["String","'associated_methods'"],["Identifier","}}"],[""," => "],["Identifier","$method"],["",";\n}\n\n"],["Comment","## Slot management"],["","\n\n"],["Keyword","sub "],["Function","set_initial_value "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$self"],["","->_set_initial_slot_value(\n        Class::MOP::Class->initialize("],["Operator","ref"],["","("],["Identifier","$instance"],["","))->get_meta_instance,\n        "],["Identifier","$instance"],["",",\n        "],["Identifier","$value"],["","\n    );\n}\n\n"],["Keyword","sub "],["Function","set_value "],["","{ "],["Statement","shift"],["","->set_raw_value("],["Identifier","@_"],["",") }\n\n"],["Keyword","sub "],["Function","set_raw_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = Class::MOP::Class->initialize("],["Operator","ref"],["","("],["Identifier","$instance"],["","))->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->set_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name, "],["Identifier","$value"],["",");\n}\n\n"],["Keyword","sub "],["Function","_inline_set_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_inline_instance_set("],["Identifier","@_"],["",") . "],["String","';'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_instance_set "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = "],["Identifier","$self"],["","->associated_class->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->inline_set_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name, "],["Identifier","$value"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_value "],["","{ "],["Statement","shift"],["","->get_raw_value("],["Identifier","@_"],["",") }\n\n"],["Keyword","sub "],["Function","get_raw_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = Class::MOP::Class->initialize("],["Operator","ref"],["","("],["Identifier","$instance"],["","))->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->get_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name);\n}\n\n"],["Keyword","sub "],["Function","_inline_get_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_inline_instance_get("],["Identifier","@_"],["",") . "],["String","';'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_instance_get "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = "],["Identifier","$self"],["","->associated_class->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->inline_get_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name);\n}\n\n"],["Keyword","sub "],["Function","has_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = Class::MOP::Class->initialize("],["Operator","ref"],["","("],["Identifier","$instance"],["","))->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->is_slot_initialized("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name);\n}\n\n"],["Keyword","sub "],["Function","_inline_has_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_inline_instance_has("],["Identifier","@_"],["",") . "],["String","';'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_instance_has "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = "],["Identifier","$self"],["","->associated_class->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->inline_is_slot_initialized("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name);\n}\n\n"],["Keyword","sub "],["Function","clear_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = Class::MOP::Class->initialize("],["Operator","ref"],["","("],["Identifier","$instance"],["","))->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->deinitialize_slot("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name);\n}\n\n"],["Keyword","sub "],["Function","_inline_clear_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_inline_instance_clear("],["Identifier","@_"],["",") . "],["String","';'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_instance_clear "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = "],["Identifier","$self"],["","->associated_class->get_meta_instance;\n    "],["Statement","return"],[""," "],["Identifier","$mi"],["","->inline_deinitialize_slot("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name);\n}\n\n"],["Comment","## load em up ..."],["","\n\n"],["Keyword","sub "],["Function","accessor_metaclass "],["","{ "],["String","'Class::MOP::Method::Accessor'"],[""," }\n\n"],["Keyword","sub "],["Function","_process_accessors "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type"],["",", "],["Identifier","$accessor"],["",", "],["Identifier","$generate_as_inline_methods"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$method_ctx"],[""," = { "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->definition_context || {} "],["Identifier","}"],[""," };\n\n    "],["Conditional","if"],[""," ("],["Operator","ref"],["","("],["Identifier","$accessor"],["",")) {\n        ("],["Operator","ref"],["","("],["Identifier","$accessor"],["",") "],["Operator","eq"],[""," "],["String","'HASH'"],["",")\n            || confess "],["String","\"bad accessor/reader/writer/predicate/clearer format, must be a HASH ref\""],["",";\n        "],["Statement","my"],[""," ("],["Identifier","$name"],["",", "],["Identifier","$method"],["",") = "],["Identifier","%{$accessor}"],["",";\n\n        "],["Identifier","$method_ctx->{"],["String","description"],["Identifier","}"],[""," = "],["Identifier","$self"],["","->_accessor_description("],["Identifier","$name"],["",", "],["Identifier","$type"],["",");\n\n        "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->accessor_metaclass->wrap(\n            "],["Identifier","$method"],["",",\n            "],["String","attribute"],["","    => "],["Identifier","$self"],["",",\n            "],["String","package_name"],[""," => "],["Identifier","$self"],["","->associated_class->name,\n            "],["String","name"],["","         => "],["Identifier","$name"],["",",\n            "],["String","associated_metaclass"],[""," => "],["Identifier","$self"],["","->associated_class,\n            "],["String","definition_context"],[""," => "],["Identifier","$method_ctx"],["",",\n        );\n        "],["Identifier","$self"],["","->associate_method("],["Identifier","$method"],["",");\n        "],["Statement","return"],[""," ("],["Identifier","$name"],["",", "],["Identifier","$method"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","my"],[""," "],["Identifier","$inline_me"],[""," = ("],["Identifier","$generate_as_inline_methods"],[""," && "],["Identifier","$self"],["","->associated_class->instance_metaclass->is_inlinable);\n        "],["Statement","my"],[""," "],["Identifier","$method"],["",";\n        try {\n            "],["Identifier","$method_ctx->{"],["String","description"],["Identifier","}"],[""," = "],["Identifier","$self"],["","->_accessor_description("],["Identifier","$accessor"],["",", "],["Identifier","$type"],["",");\n\n            "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->accessor_metaclass->new(\n                "],["String","attribute"],["","     => "],["Identifier","$self"],["",",\n                "],["String","is_inline"],["","     => "],["Identifier","$inline_me"],["",",\n                "],["String","accessor_type"],[""," => "],["Identifier","$type"],["",",\n                "],["String","package_name"],["","  => "],["Identifier","$self"],["","->associated_class->name,\n                "],["String","name"],["","          => "],["Identifier","$accessor"],["",",\n                "],["String","associated_metaclass"],[""," => "],["Identifier","$self"],["","->associated_class,\n                "],["String","definition_context"],[""," => "],["Identifier","$method_ctx"],["",",\n            );\n        }\n        catch {\n            confess "],["String","\"Could not create the '"],["Identifier","$type"],["String","' method for \""],[""," . "],["Identifier","$self"],["","->name . "],["String","\" because : "],["Identifier","$_"],["String","\""],["",";\n        };\n        "],["Identifier","$self"],["","->associate_method("],["Identifier","$method"],["",");\n        "],["Statement","return"],[""," ("],["Identifier","$accessor"],["",", "],["Identifier","$method"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_accessor_description "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$name"],["",", "],["Identifier","$type"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$desc"],[""," = "],["String","\""],["Identifier","$type"],["String"," \""],[""," . "],["Identifier","$self"],["","->associated_class->name . "],["String","\"::"],["Identifier","$name"],["String","\""],["",";\n    "],["Conditional","if"],[""," ( "],["Identifier","$name"],[""," "],["Operator","ne"],[""," "],["Identifier","$self"],["","->name ) {\n        "],["Identifier","$desc"],[""," .= "],["String","\" of attribute \""],[""," . "],["Identifier","$self"],["","->name;\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$desc"],["",";\n}\n\n"],["Keyword","sub "],["Function","install_accessors "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$inline"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$class"],["","  = "],["Identifier","$self"],["","->associated_class;\n\n    "],["Identifier","$class"],["","->add_method(\n        "],["Identifier","$self"],["","->_process_accessors("],["String","'accessor'"],[""," => "],["Identifier","$self"],["","->accessor(), "],["Identifier","$inline"],["",")\n    ) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_accessor();\n\n    "],["Identifier","$class"],["","->add_method(\n        "],["Identifier","$self"],["","->_process_accessors("],["String","'reader'"],[""," => "],["Identifier","$self"],["","->reader(), "],["Identifier","$inline"],["",")\n    ) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_reader();\n\n    "],["Identifier","$class"],["","->add_method(\n        "],["Identifier","$self"],["","->_process_accessors("],["String","'writer'"],[""," => "],["Identifier","$self"],["","->writer(), "],["Identifier","$inline"],["",")\n    ) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_writer();\n\n    "],["Identifier","$class"],["","->add_method(\n        "],["Identifier","$self"],["","->_process_accessors("],["String","'predicate'"],[""," => "],["Identifier","$self"],["","->predicate(), "],["Identifier","$inline"],["",")\n    ) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_predicate();\n\n    "],["Identifier","$class"],["","->add_method(\n        "],["Identifier","$self"],["","->_process_accessors("],["String","'clearer'"],[""," => "],["Identifier","$self"],["","->clearer(), "],["Identifier","$inline"],["",")\n    ) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_clearer();\n\n    "],["Statement","return"],["",";\n}\n\n{\n    "],["Statement","my"],[""," "],["Identifier","$_remove_accessor"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$accessor"],["",", "],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n        "],["Conditional","if"],[""," ("],["Operator","ref"],["","("],["Identifier","$accessor"],["",") && "],["Operator","ref"],["","("],["Identifier","$accessor"],["",") "],["Operator","eq"],[""," "],["String","'HASH'"],["",") {\n            ("],["Identifier","$accessor"],["",") = "],["Statement","keys"],[""," "],["Identifier","%{$accessor}"],["",";\n        }\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$class"],["","->get_method("],["Identifier","$accessor"],["",");\n        "],["Identifier","$class"],["","->remove_method("],["Identifier","$accessor"],["",")\n            "],["Conditional","if"],[""," ("],["Operator","ref"],["","("],["Identifier","$method"],["",") && "],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method::Accessor'"],["","));\n    };\n\n    "],["Keyword","sub "],["Function","remove_accessors "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n        "],["Comment","# "],["Todo","TODO:"],["","\n        "],["Comment","# we really need to make sure to remove from the"],["","\n        "],["Comment","# associates methods here as well. But this is"],["","\n        "],["Comment","# such a slimly used method, I am not worried"],["","\n        "],["Comment","# about it right now."],["","\n        "],["Identifier","$_remove_accessor"],["","->("],["Identifier","$self"],["","->accessor(),  "],["Identifier","$self"],["","->associated_class()) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_accessor();\n        "],["Identifier","$_remove_accessor"],["","->("],["Identifier","$self"],["","->reader(),    "],["Identifier","$self"],["","->associated_class()) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_reader();\n        "],["Identifier","$_remove_accessor"],["","->("],["Identifier","$self"],["","->writer(),    "],["Identifier","$self"],["","->associated_class()) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_writer();\n        "],["Identifier","$_remove_accessor"],["","->("],["Identifier","$self"],["","->predicate(), "],["Identifier","$self"],["","->associated_class()) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_predicate();\n        "],["Identifier","$_remove_accessor"],["","->("],["Identifier","$self"],["","->clearer(),   "],["Identifier","$self"],["","->associated_class()) "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_clearer();\n        "],["Statement","return"],["",";\n    }\n\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Attribute Meta Object"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Attribute - Attribute Meta Object\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      foo => ("],["","\n"],["PreProc","          accessor  => 'foo',           # dual purpose get/set accessor"],["","\n"],["PreProc","          predicate => 'has_foo',       # predicate check for defined-ness"],["","\n"],["PreProc","          init_arg  => '-foo',          # class->new will look for a -foo key"],["","\n"],["PreProc","          default   => 'BAR IS BAZ!'    # if no -foo key is provided, use this"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      bar => ("],["","\n"],["PreProc","          reader    => 'bar',           # getter"],["","\n"],["PreProc","          writer    => 'set_bar',       # setter"],["","\n"],["PreProc","          predicate => 'has_bar',       # predicate check for defined-ness"],["","\n"],["PreProc","          init_arg  => ':bar',          # class->new will look for a :bar key"],["","\n"],["PreProc","                                        # no default value means it is undef"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThe Attribute Protocol is almost entirely an invention of\n"],["Identifier","C<Class::MOP>"],["",". Perl 5 does not have a consistent notion of\nattributes. There are so many ways in which this is done, and very few\n(if any) are easily discoverable by this module.\n\nWith that said, this module attempts to inject some order into this\nchaos, by introducing a consistent API which can be used to create\nobject attributes.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=head2"],[""," "],["String","Creation"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Attribute->new($name, ?%options) >>"],["","\n\nAn attribute must (at the very least), have a "],["Identifier","C<$name>"],["",". All other\n"],["Identifier","C<%options>"],[""," are added as key-value pairs.\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* init_arg"],["","\n\nThis is a string value representing the expected key in an\ninitialization hash. For instance, if we have an "],["Identifier","C<init_arg>"],[""," value of\n"],["Identifier","C<-foo>"],["",", then the following code will Just Work.\n\n"],["PreProc","  MyClass->meta->new_object( -foo => 'Hello There' );"],["","\n\nIf an init_arg is not assigned, it will automatically use the\nattribute's name. If "],["Identifier","C<init_arg>"],[""," is explicitly set to "],["Identifier","C<undef>"],["",", the\nattribute cannot be specified during initialization.\n\n"],["Statement","=item"],[""," "],["String","* builder"],["","\n\nThis provides the name of a method that will be called to initialize\nthe attribute. This method will be called on the object after it is\nconstructed. It is expected to return a valid value for the attribute.\n\n"],["Statement","=item"],[""," "],["String","* default"],["","\n\nThis can be used to provide an explicit default for initializing the\nattribute. If the default you provide is a subroutine reference, then\nthis reference will be called "],["Identifier","I<as a method>"],[""," on the object.\n\nIf the value is a simple scalar (string or number), then it can be\njust passed as is. However, if you wish to initialize it with a HASH\nor ARRAY ref, then you need to wrap that inside a subroutine\nreference:\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      'foo' => ("],["","\n"],["PreProc","          default => sub { [] },"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  # or ..."],["","\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      'foo' => ("],["","\n"],["PreProc","          default => sub { {} },"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\nIf you wish to initialize an attribute with a subroutine reference\nitself, then you need to wrap that in a subroutine as well:\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      'foo' => ("],["","\n"],["PreProc","          default => sub {"],["","\n"],["PreProc","              sub { print \"Hello World\" }"],["","\n"],["PreProc","          },"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\nAnd lastly, if the value of your attribute is dependent upon some\nother aspect of the instance structure, then you can take advantage of\nthe fact that when the "],["Identifier","C<default>"],[""," value is called as a method:\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      'object_identity' => ("],["","\n"],["PreProc","          default => sub { Scalar::Util::refaddr( $_[0] ) },"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\nNote that there is no guarantee that attributes are initialized in any\nparticular order, so you cannot rely on the value of some other\nattribute when generating the default.\n\n"],["Statement","=item"],[""," "],["String","* initializer"],["","\n\nThis option can be either a method name or a subroutine\nreference. This method will be called when setting the attribute's\nvalue in the constructor. Unlike "],["Identifier","C<default>"],[""," and "],["Identifier","C<builder>"],["",", the\ninitializer is only called when a value is provided to the\nconstructor. The initializer allows you to munge this value during\nobject construction.\n\nThe initializer is called as a method with three arguments. The first\nis the value that was passed to the constructor. The second is a\nsubroutine reference that can be called to actually set the\nattribute's value, and the last is the associated\n"],["Identifier","C<Class::MOP::Attribute>"],[""," object.\n\nThis contrived example shows an initializer that sets the attribute to\ntwice the given value.\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      'doubled' => ("],["","\n"],["PreProc","          initializer => sub {"],["","\n"],["PreProc","              my ( $self, $value, $set, $attr ) = @_;"],["","\n"],["PreProc","              $set->( $value * 2 );"],["","\n"],["PreProc","          },"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\nSince an initializer can be a method name, you can easily make\nattribute initialization use the writer:\n\n"],["PreProc","  Class::MOP::Attribute->new("],["","\n"],["PreProc","      'some_attr' => ("],["","\n"],["PreProc","          writer      => 'some_attr',"],["","\n"],["PreProc","          initializer => 'some_attr',"],["","\n"],["PreProc","      )"],["","\n"],["PreProc","  );"],["","\n\nYour writer (actually, a wrapper around the writer, using\n"],["Identifier","L<method modifications|Moose::Manual::MethodModifiers>"],["",") will need to examine\n"],["Identifier","C<@_>"],[""," and determine under which\ncontext it is being called:\n\n"],["PreProc","  around 'some_attr' => sub {"],["","\n"],["PreProc","      my $orig = shift;"],["","\n"],["PreProc","      my $self = shift;"],["","\n"],["PreProc","      # $value is not defined if being called as a reader"],["","\n"],["PreProc","      # $setter and $attr are only defined if being called as an initializer"],["","\n"],["PreProc","      my ($value, $setter, $attr) = @_;"],["","\n\n"],["PreProc","      # the reader behaves normally"],["","\n"],["PreProc","      return $self->$orig if not @_;"],["","\n\n"],["PreProc","      # mutate $value as desired"],["","\n"],["PreProc","      # $value = <something($value);"],["","\n\n"],["PreProc","      # if called as an initializer, set the value and we're done"],["","\n"],["PreProc","      return $setter->($row) if $setter;"],["","\n\n"],["PreProc","      # otherwise, call the real writer with the new value"],["","\n"],["PreProc","      $self->$orig($row);"],["","\n"],["PreProc","  };"],["","\n\n"],["Statement","=back"],["","\n\nThe "],["Identifier","C<accessor>"],["",", "],["Identifier","C<reader>"],["",", "],["Identifier","C<writer>"],["",", "],["Identifier","C<predicate>"],[""," and "],["Identifier","C<clearer>"],["","\noptions all accept the same parameters. You can provide the name of\nthe method, in which case an appropriate default method will be\ngenerated for you. Or instead you can also provide hash reference\ncontaining exactly one key (the method name) and one value. The value\nshould be a subroutine reference, which will be installed as the\nmethod itself.\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* accessor"],["","\n\nAn "],["Identifier","C<accessor>"],[""," is a standard Perl-style read/write accessor. It will\nreturn the value of the attribute, and if a value is passed as an\nargument, it will assign that value to the attribute.\n\nNote that "],["Identifier","C<undef>"],[""," is a legitimate value, so this will work:\n\n"],["PreProc","  $object->set_something(undef);"],["","\n\n"],["Statement","=item"],[""," "],["String","* reader"],["","\n\nThis is a basic read-only accessor. It returns the value of the\nattribute.\n\n"],["Statement","=item"],[""," "],["String","* writer"],["","\n\nThis is a basic write accessor, it accepts a single argument, and\nassigns that value to the attribute.\n\nNote that "],["Identifier","C<undef>"],[""," is a legitimate value, so this will work:\n\n"],["PreProc","  $object->set_something(undef);"],["","\n\n"],["Statement","=item"],[""," "],["String","* predicate"],["","\n\nThe predicate method returns a boolean indicating whether or not the\nattribute has been explicitly set.\n\nNote that the predicate returns true even if the attribute was set to\na false value ("],["Identifier","C<0>"],[""," or "],["Identifier","C<undef>"],["",").\n\n"],["Statement","=item"],[""," "],["String","* clearer"],["","\n\nThis method will uninitialize the attribute. After an attribute is\ncleared, its "],["Identifier","C<predicate>"],[""," will return false.\n\n"],["Statement","=item"],[""," "],["String","* definition_context"],["","\n\nMostly, this exists as a hook for the benefit of Moose.\n\nThis option should be a hash reference containing several keys which\nwill be used when inlining the attribute's accessors. The keys should\ninclude "],["Identifier","C<line>"],["",", the line number where the attribute was created, and\neither "],["Identifier","C<file>"],[""," or "],["Identifier","C<description>"],["",".\n\nThis information will ultimately be used when eval'ing inlined\naccessor code so that error messages report a useful line and file\nname.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->clone(%options) >>"],["","\n\nThis clones the attribute. Any options you provide will override the\nsettings of the original attribute. You can change the name of the new\nattribute by passing a "],["Identifier","C<name>"],[""," key in "],["Identifier","C<%options>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Informational"],["","\n\nThese are all basic read-only accessors for the values passed into\nthe constructor.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->name >>"],["","\n\nReturns the attribute's name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->accessor >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->reader >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->writer >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->predicate >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->clearer >>"],["","\n\nThe "],["Identifier","C<accessor>"],["",", "],["Identifier","C<reader>"],["",", "],["Identifier","C<writer>"],["",", "],["Identifier","C<predicate>"],["",", and "],["Identifier","C<clearer>"],["","\nmethods all return exactly what was passed to the constructor, so it\ncan be either a string containing a method name, or a hash reference.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->initializer >>"],["","\n\nReturns the initializer as passed to the constructor, so this may be\neither a method name or a subroutine reference.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->init_arg >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->is_default_a_coderef >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->builder >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->default($instance) >>"],["","\n\nThe "],["Identifier","C<$instance>"],[""," argument is optional. If you don't pass it, the\nreturn value for this method is exactly what was passed to the\nconstructor, either a simple scalar or a subroutine reference.\n\nIf you "],["Identifier","I<do>"],[""," pass an "],["Identifier","C<$instance>"],[""," and the default is a subroutine\nreference, then the reference is called as a method on the\n"],["Identifier","C<$instance>"],[""," and the generated value is returned.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->slots >>"],["","\n\nReturn a list of slots required by the attribute. This is usually just\none, the name of the attribute.\n\nA slot is the name of the hash key used to store the attribute in an\nobject instance.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->get_read_method >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->get_write_method >>"],["","\n\nReturns the name of a method suitable for reading or writing the value\nof the attribute in the associated class.\n\nIf an attribute is read- or write-only, then these methods can return\n"],["Identifier","C<undef>"],[""," as appropriate.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_read_method >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_write_method >>"],["","\n\nThis returns a boolean indicating whether the attribute has a "],["Identifier","I<named>"],["","\nread or write method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->get_read_method_ref >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->get_write_method_ref >>"],["","\n\nReturns the subroutine reference of a method suitable for reading or\nwriting the attribute's value in the associated class. These methods\nalways return a subroutine reference, regardless of whether or not the\nattribute is read- or write-only.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->insertion_order >>"],["","\n\nIf this attribute has been inserted into a class, this returns a zero\nbased index regarding the order of insertion.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Informational predicates"],["","\n\nThese are all basic predicate methods for the values passed into "],["Identifier","C<new>"],["",".\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_accessor >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_reader >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_writer >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_predicate >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_clearer >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_initializer >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_init_arg >>"],["","\n\nThis will be "],["Identifier","I<false>"],[""," if the "],["Identifier","C<init_arg>"],[""," was set to "],["Identifier","C<undef>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_default >>"],["","\n\nThis will be "],["Identifier","I<false>"],[""," if the "],["Identifier","C<default>"],[""," was set to "],["Identifier","C<undef>"],["",", since\n"],["Identifier","C<undef>"],[""," is the default "],["Identifier","C<default>"],[""," anyway.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_builder >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_insertion_order >>"],["","\n\nThis will be "],["Identifier","I<false>"],[""," if this attribute has not be inserted into a class\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Value management"],["","\n\nThese methods are basically \"back doors\" to the instance, and can be\nused to bypass the regular accessors, but still stay within the MOP.\n\nThese methods are not for general use, and should only be used if you\nreally know what you are doing.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->initialize_instance_slot($meta_instance, $instance, $params) >>"],["","\n\nThis method is used internally to initialize the attribute's slot in\nthe object "],["Identifier","C<$instance>"],["",".\n\nThe "],["Identifier","C<$params>"],[""," is a hash reference of the values passed to the object\nconstructor.\n\nIt's unlikely that you'll need to call this method yourself.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->set_value($instance, $value) >>"],["","\n\nSets the value without going through the accessor. Note that this\nworks even with read-only attributes.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->set_raw_value($instance, $value) >>"],["","\n\nSets the value with no side effects such as a trigger.\n\nThis doesn't actually apply to Class::MOP attributes, only to subclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->set_initial_value($instance, $value) >>"],["","\n\nSets the value without going through the accessor. This method is only\ncalled when the instance is first being initialized.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->get_value($instance) >>"],["","\n\nReturns the value without going through the accessor. Note that this\nworks even with write-only accessors.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->get_raw_value($instance) >>"],["","\n\nReturns the value without any side effects such as lazy attributes.\n\nDoesn't actually apply to Class::MOP attributes, only to subclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_value($instance) >>"],["","\n\nReturn a boolean indicating whether the attribute has been set in\n"],["Identifier","C<$instance>"],["",". This how the default "],["Identifier","C<predicate>"],[""," method works.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->clear_value($instance) >>"],["","\n\nThis will clear the attribute's value in "],["Identifier","C<$instance>"],["",". This is what\nthe default "],["Identifier","C<clearer>"],[""," calls.\n\nNote that this works even if the attribute does not have any\nassociated read, write or clear methods.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Class association"],["","\n\nThese methods allow you to manage the attributes association with\nthe class that contains it. These methods should not be used\nlightly, nor are they very magical, they are mostly used internally\nand by metaclass instances.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->associated_class >>"],["","\n\nThis returns the "],["Identifier","C<Class::MOP::Class>"],[""," with which this attribute is\nassociated, if any.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->attach_to_class($metaclass) >>"],["","\n\nThis method stores a weakened reference to the "],["Identifier","C<$metaclass>"],[""," object\ninternally.\n\nThis method does not remove the attribute from its old class,\nnor does it create any accessors in the new class.\n\nIt is probably best to use the "],["Identifier","L<Class::MOP::Class>"],[""," "],["Identifier","C<add_attribute>"],["","\nmethod instead.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->detach_from_class >>"],["","\n\nThis method removes the associate metaclass object from the attribute\nit has one.\n\nThis method does not remove the attribute itself from the class, or\nremove its accessors.\n\nIt is probably best to use the "],["Identifier","L<Class::MOP::Class>"],["","\n"],["Identifier","C<remove_attribute>"],[""," method instead.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Attribute Accessor generation"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->accessor_metaclass >>"],["","\n\nAccessor methods are generated using an accessor metaclass. By\ndefault, this is "],["Identifier","L<Class::MOP::Method::Accessor>"],["",". This method returns\nthe name of the accessor metaclass that this attribute uses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->associate_method($method) >>"],["","\n\nThis associates a "],["Identifier","L<Class::MOP::Method>"],[""," object with the\nattribute. Typically, this is called internally when an attribute\ngenerates its accessors.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->associated_methods >>"],["","\n\nThis returns the list of methods which have been associated with the\nattribute.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->install_accessors >>"],["","\n\nThis method generates and installs code the attributes various\naccessors. It is typically called from the "],["Identifier","L<Class::MOP::Class>"],["","\n"],["Identifier","C<add_attribute>"],[""," method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->remove_accessors >>"],["","\n\nThis method removes all of the accessors associated with the\nattribute.\n\nThis does not currently remove methods from the list returned by\n"],["Identifier","C<associated_methods>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->inline_get >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->inline_set >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->inline_has >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->inline_clear >>"],["","\n\nThese methods return a code snippet suitable for inlining the relevant\noperation. They expect strings containing variable names to be used in the\ninlining, like "],["Identifier","C<'$self'>"],[""," or "],["Identifier","C<'$_[1]'>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Introspection"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Attribute->meta >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Class>"],[""," instance for this class.\n\nIt should also be noted that "],["Identifier","L<Class::MOP>"],[""," will actually bootstrap\nthis module by installing a number of attribute meta-objects into its\nmetaclass.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]