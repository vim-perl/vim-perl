[["","\n"],["Statement","package"],["Type"," Class::MOP::Method"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Method::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Method::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'weaken'"],["",", "],["String","'reftype'"],["",", "],["String","'blessed'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Object'"],["",";\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# if poked in the right way,"],["","\n"],["Comment","# they should act like CODE refs."],["","\n"],["Statement","use overload"],[""," "],["String","'&{}'"],[""," => "],["Keyword","sub "],["","{ "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->body }, "],["String","fallback"],[""," => "],["Number","1"],["",";\n\n"],["Comment","# construction"],["","\n\n"],["Keyword","sub "],["Function","wrap "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'body'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%params"],[""," = "],["Identifier","@args"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Identifier","$params{"],["String","body"],["Identifier","}"],["",";\n\n    "],["Conditional","if"],[""," (blessed("],["Identifier","$code"],["",") && "],["Identifier","$code"],["","->isa(__PACKAGE__)) {\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$code"],["","->clone;\n        "],["Statement","delete"],[""," "],["Identifier","$params{"],["String","body"],["Identifier","}"],["",";\n        Class::MOP::class_of("],["Identifier","$class"],["",")->rebless_instance("],["Identifier","$method"],["",", "],["Identifier","%params"],["",");\n        "],["Statement","return"],[""," "],["Identifier","$method"],["",";\n    }\n    "],["Conditional","elsif"],[""," (!"],["Operator","ref"],[""," "],["Identifier","$code"],[""," || "],["String","'CODE'"],[""," "],["Operator","ne"],[""," reftype("],["Identifier","$code"],["",")) {\n        confess "],["String","\"You must supply a CODE reference to bless, not (\""],[""," . ("],["Identifier","$code"],[""," || "],["String","'undef'"],["",") . "],["String","\")\""],["",";\n    }\n\n    ("],["Identifier","$params{"],["String","package_name"],["Identifier","}"],[""," && "],["Identifier","$params{"],["String","name"],["Identifier","}"],["",")\n        || confess "],["String","\"You must supply the package_name and name parameters\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Identifier","$class"],["","->_new(\\"],["Identifier","%params"],["",");\n\n    weaken("],["Identifier","$self->{"],["String","associated_metaclass"],["Identifier","}"],["",") "],["Conditional","if"],[""," "],["Identifier","$self->{"],["String","associated_metaclass"],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","_new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," __PACKAGE__;\n\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n\n    "],["Statement","return"],[""," "],["Operator","bless"],[""," {\n        "],["String","'body'"],["","                 => "],["Identifier","$params->{"],["String","body"],["Identifier","}"],["",",\n        "],["String","'associated_metaclass'"],[""," => "],["Identifier","$params->{"],["String","associated_metaclass"],["Identifier","}"],["",",\n        "],["String","'package_name'"],["","         => "],["Identifier","$params->{"],["String","package_name"],["Identifier","}"],["",",\n        "],["String","'name'"],["","                 => "],["Identifier","$params->{"],["String","name"],["Identifier","}"],["",",\n        "],["String","'original_method'"],["","      => "],["Identifier","$params->{"],["String","original_method"],["Identifier","}"],["",",\n    } => "],["Identifier","$class"],["",";\n}\n\n"],["Comment","## accessors"],["","\n\n"],["Keyword","sub "],["Function","associated_metaclass "],["","{ "],["Statement","shift"],["","->{"],["String","'associated_metaclass'"],["","} }\n\n"],["Keyword","sub "],["Function","attach_to_class "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$class"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Identifier","$self->{"],["String","associated_metaclass"],["Identifier","}"],[""," = "],["Identifier","$class"],["",";\n    weaken("],["Identifier","$self->{"],["String","associated_metaclass"],["Identifier","}"],["",");\n}\n\n"],["Keyword","sub "],["Function","detach_from_class "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","delete"],[""," "],["Identifier","$self->{"],["String","associated_metaclass"],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","fully_qualified_name "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->package_name . "],["String","'::'"],[""," . "],["Identifier","$self"],["","->name;\n}\n\n"],["Keyword","sub "],["Function","original_method "],["","{ ("],["Statement","shift"],["",")->{"],["String","'original_method'"],["","} }\n\n"],["Keyword","sub "],["Function","_set_original_method "],["","{ "],["Identifier","$_["],["Number","0"],["Identifier","]->{"],["String","'original_method'"],["Identifier","}"],[""," = "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," }\n\n"],["Comment","# It's possible that this could cause a loop if there is a circular"],["","\n"],["Comment","# reference in here. That shouldn't ever happen in normal"],["","\n"],["Comment","# circumstances, since original method only gets set when clone is"],["","\n"],["Comment","# called. We _could_ check for such a loop, but it'd involve some sort"],["","\n"],["Comment","# of package-lexical variable, and wouldn't be terribly subclassable."],["","\n"],["Keyword","sub "],["Function","original_package_name "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Identifier","$self"],["","->original_method\n        ? "],["Identifier","$self"],["","->original_method->original_package_name\n        : "],["Identifier","$self"],["","->package_name;\n}\n\n"],["Keyword","sub "],["Function","original_name "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Identifier","$self"],["","->original_method\n        ? "],["Identifier","$self"],["","->original_method->original_name\n        : "],["Identifier","$self"],["","->name;\n}\n\n"],["Keyword","sub "],["Function","original_fully_qualified_name "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Identifier","$self"],["","->original_method\n        ? "],["Identifier","$self"],["","->original_method->original_fully_qualified_name\n        : "],["Identifier","$self"],["","->fully_qualified_name;\n}\n\n"],["Keyword","sub "],["Function","execute "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->body->("],["Identifier","@_"],["",");\n}\n\n"],["Comment","# We used to go through use Class::MOP::Class->clone_instance to do this, but"],["","\n"],["Comment","# this was awfully slow. This method may be called a number of times when"],["","\n"],["Comment","# classes are loaded (especially during Moose role application), so it is"],["","\n"],["Comment","# worth optimizing. - DR"],["","\n"],["Keyword","sub "],["Function","clone "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$clone"],[""," = "],["Operator","bless"],[""," { "],["Identifier","%{$self}"],["",", "],["Identifier","@_"],[""," }, blessed("],["Identifier","$self"],["",");\n    weaken("],["Identifier","$clone->{"],["String","associated_metaclass"],["Identifier","}"],["",") "],["Conditional","if"],[""," "],["Identifier","$clone->{"],["String","associated_metaclass"],["Identifier","}"],["",";\n\n    "],["Identifier","$clone"],["","->_set_original_method("],["Identifier","$self"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$clone"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Method Meta Object"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Method - Method Meta Object\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThe Method Protocol is very small, since methods in Perl 5 are just\nsubroutines in a specific package. We provide a very basic\nintrospection interface.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Method->wrap($code, %options) >>"],["","\n\nThis is the constructor. It accepts a method body in the form of\neither a code reference or a "],["Identifier","L<Class::MOP::Method>"],[""," instance, followed\nby a hash of options.\n\nThe options are:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* name"],["","\n\nThe method name (without a package name). This is required if "],["Identifier","C<$code>"],["","\nis a coderef.\n\n"],["Statement","=item"],[""," "],["String","* package_name"],["","\n\nThe package name for the method. This is required if "],["Identifier","C<$code>"],[""," is a\ncoderef.\n\n"],["Statement","=item"],[""," "],["String","* associated_metaclass"],["","\n\nAn optional "],["Identifier","L<Class::MOP::Class>"],[""," object. This is the metaclass for the\nmethod's class.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->clone(%params) >>"],["","\n\nThis makes a shallow clone of the method object. In particular,\nsubroutine reference itself is shared between all clones of a given\nmethod.\n\nWhen a method is cloned, the original method object will be available\nby calling "],["Identifier","C<original_method>"],[""," on the clone.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->body >>"],["","\n\nThis returns a reference to the method's subroutine.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->name >>"],["","\n\nThis returns the method's name\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->package_name >>"],["","\n\nThis returns the method's package name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->fully_qualified_name >>"],["","\n\nThis returns the method's fully qualified name (package name and\nmethod name).\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->associated_metaclass >>"],["","\n\nThis returns the "],["Identifier","L<Class::MOP::Class>"],[""," object for the method, if one\nexists.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->original_method >>"],["","\n\nIf this method object was created as a clone of some other method\nobject, this returns the object that was cloned.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->original_name >>"],["","\n\nThis returns the method's original name, wherever it was first\ndefined.\n\nIf this method is a clone of a clone (of a clone, etc.), this method\nreturns the name from the "],["Identifier","I<first>"],[""," method in the chain of clones.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->original_package_name >>"],["","\n\nThis returns the method's original package name, wherever it was first\ndefined.\n\nIf this method is a clone of a clone (of a clone, etc.), this method\nreturns the package name from the "],["Identifier","I<first>"],[""," method in the chain of\nclones.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->original_fully_qualified_name >>"],["","\n\nThis returns the method's original fully qualified name, wherever it\nwas first defined.\n\nIf this method is a clone of a clone (of a clone, etc.), this method\nreturns the fully qualified name from the "],["Identifier","I<first>"],[""," method in the chain\nof clones.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->is_stub >>"],["","\n\nReturns true if the method is just a stub:\n\n"],["PreProc","  sub foo;"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->attach_to_class($metaclass) >>"],["","\n\nGiven a "],["Identifier","L<Class::MOP::Class>"],[""," object, this method sets the associated\nmetaclass for the method. This will overwrite any existing associated\nmetaclass.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->detach_from_class >>"],["","\n\nRemoves any associated metaclass object for the method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->execute(...) >>"],["","\n\nThis executes the method. Any arguments provided will be passed on to\nthe method itself.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Method->meta >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Class>"],[""," instance for this class.\n\nIt should also be noted that "],["Identifier","L<Class::MOP>"],[""," will actually bootstrap\nthis module by installing a number of attribute meta-objects into its\nmetaclass.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]