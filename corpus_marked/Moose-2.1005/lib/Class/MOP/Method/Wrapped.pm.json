[["","\n"],["Statement","package"],["Type"," Class::MOP::Method::Wrapped"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Wrapped::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Wrapped::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Method'"],["",";\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# this ugly beast is the result of trying"],["","\n"],["Comment","# to micro optimize this as much as possible"],["","\n"],["Comment","# while not completely loosing maintainability."],["","\n"],["Comment","# At this point it's \"fast enough\", after all"],["","\n"],["Comment","# you can't get something for nothing :)"],["","\n"],["Statement","my"],[""," "],["Identifier","$_build_wrapped_method"],[""," = "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$modifier_table"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$before"],["",", "],["Identifier","$after"],["",", "],["Identifier","$around"],["",") = (\n        "],["Identifier","$modifier_table->{"],["String","before"],["Identifier","}"],["",",\n        "],["Identifier","$modifier_table->{"],["String","after"],["Identifier","}"],["",",\n        "],["Identifier","$modifier_table->{"],["String","around"],["Identifier","}"],["",",\n    );\n    "],["Conditional","if"],[""," ("],["Identifier","@$before"],[""," && "],["Identifier","@$after"],["",") {\n        "],["Identifier","$modifier_table->{"],["String","cache"],["Identifier","}"],[""," = "],["Keyword","sub "],["","{\n            "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$c"],[""," ("],["Identifier","@$before"],["",") { "],["Identifier","$c"],["","->("],["Identifier","@_"],["",") };\n            "],["Statement","my"],[""," "],["Identifier","@rval"],["",";\n            (("],["Operator","defined"],[""," "],["Statement","wantarray"],["",") ?\n                (("],["Statement","wantarray"],["",") ?\n                    ("],["Identifier","@rval"],[""," = "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["","))\n                    :\n                    ("],["Identifier","$rval["],["Number","0"],["Identifier","]"],[""," = "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["",")))\n                :\n                "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["","));\n            "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$c"],[""," ("],["Identifier","@$after"],["",") { "],["Identifier","$c"],["","->("],["Identifier","@_"],["",") };\n            "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Statement","wantarray"],["",";\n            "],["Statement","return"],[""," "],["Statement","wantarray"],[""," ? "],["Identifier","@rval"],[""," : "],["Identifier","$rval["],["Number","0"],["Identifier","]"],["",";\n        }\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","@$before"],[""," && !"],["Identifier","@$after"],["",") {\n        "],["Identifier","$modifier_table->{"],["String","cache"],["Identifier","}"],[""," = "],["Keyword","sub "],["","{\n            "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$c"],[""," ("],["Identifier","@$before"],["",") { "],["Identifier","$c"],["","->("],["Identifier","@_"],["",") };\n            "],["Statement","return"],[""," "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["",");\n        }\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","@$after"],[""," && !"],["Identifier","@$before"],["",") {\n        "],["Identifier","$modifier_table->{"],["String","cache"],["Identifier","}"],[""," = "],["Keyword","sub "],["","{\n            "],["Statement","my"],[""," "],["Identifier","@rval"],["",";\n            (("],["Operator","defined"],[""," "],["Statement","wantarray"],["",") ?\n                (("],["Statement","wantarray"],["",") ?\n                    ("],["Identifier","@rval"],[""," = "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["","))\n                    :\n                    ("],["Identifier","$rval["],["Number","0"],["Identifier","]"],[""," = "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["",")))\n                :\n                "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["","));\n            "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$c"],[""," ("],["Identifier","@$after"],["",") { "],["Identifier","$c"],["","->("],["Identifier","@_"],["",") };\n            "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Statement","wantarray"],["",";\n            "],["Statement","return"],[""," "],["Statement","wantarray"],[""," ? "],["Identifier","@rval"],[""," : "],["Identifier","$rval["],["Number","0"],["Identifier","]"],["",";\n        }\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$modifier_table->{"],["String","cache"],["Identifier","}"],[""," = "],["Identifier","$around->{"],["String","cache"],["Identifier","}"],["",";\n    }\n};\n\n"],["Keyword","sub "],["Function","wrap "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$code"],["",", "],["Identifier","%params"],[""," ) = "],["Identifier","@_"],["",";\n\n    (blessed("],["Identifier","$code"],["",") && "],["Identifier","$code"],["","->isa("],["String","'Class::MOP::Method'"],["","))\n        || confess "],["String","\"Can only wrap blessed CODE\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$modifier_table"],[""," = {\n        "],["String","cache"],["","  => "],["Operator","undef"],["",",\n        "],["String","orig"],["","   => "],["Identifier","$code"],["","->body,\n        "],["String","before"],[""," => [],\n        "],["String","after"],["","  => [],\n        "],["String","around"],[""," => {\n            "],["String","cache"],["","   => "],["Identifier","$code"],["","->body,\n            "],["String","methods"],[""," => [],\n        },\n    };\n    "],["Identifier","$_build_wrapped_method"],["","->("],["Identifier","$modifier_table"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->SUPER::wrap(\n        "],["Keyword","sub "],["","{ "],["Identifier","$modifier_table->{"],["String","cache"],["Identifier","}"],["","->("],["Identifier","@_"],["",") },\n        "],["Comment","# get these from the original"],["","\n        "],["Comment","# unless explicitly overridden"],["","\n        "],["String","package_name"],["","   => "],["Identifier","$params{"],["String","package_name"],["Identifier","}"],[""," || "],["Identifier","$code"],["","->package_name,\n        "],["String","name"],["","           => "],["Identifier","$params{"],["String","name"],["Identifier","}"],["","         || "],["Identifier","$code"],["","->name,\n        "],["String","original_method"],[""," => "],["Identifier","$code"],["",",\n\n        "],["String","modifier_table"],[""," => "],["Identifier","$modifier_table"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," __PACKAGE__;\n\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n\n    "],["Statement","return"],[""," "],["Operator","bless"],[""," {\n        "],["Comment","# inherited from Class::MOP::Method"],["","\n        "],["String","'body'"],["","                 => "],["Identifier","$params->{"],["String","body"],["Identifier","}"],["",",\n        "],["String","'associated_metaclass'"],[""," => "],["Identifier","$params->{"],["String","associated_metaclass"],["Identifier","}"],["",",\n        "],["String","'package_name'"],["","         => "],["Identifier","$params->{"],["String","package_name"],["Identifier","}"],["",",\n        "],["String","'name'"],["","                 => "],["Identifier","$params->{"],["String","name"],["Identifier","}"],["",",\n        "],["String","'original_method'"],["","      => "],["Identifier","$params->{"],["String","original_method"],["Identifier","}"],["",",\n\n        "],["Comment","# defined in this class"],["","\n        "],["String","'modifier_table'"],["","       => "],["Identifier","$params->{"],["String","modifier_table"],["Identifier","}"],["","\n    } => "],["Identifier","$class"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_original_method "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$code"],["","->original_method;\n}\n\n"],["Keyword","sub "],["Function","add_before_modifier "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$code"],["","     = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$modifier"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","unshift"],[""," "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","before"],["Identifier","}}"],[""," => "],["Identifier","$modifier"],["",";\n    "],["Identifier","$_build_wrapped_method"],["","->("],["Identifier","$code->{"],["String","'modifier_table'"],["Identifier","}"],["",");\n}\n\n"],["Keyword","sub "],["Function","before_modifiers "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","before"],["Identifier","}}"],["",";\n}\n\n"],["Keyword","sub "],["Function","add_after_modifier "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$code"],["","     = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$modifier"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","push"],[""," "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","after"],["Identifier","}}"],[""," => "],["Identifier","$modifier"],["",";\n    "],["Identifier","$_build_wrapped_method"],["","->("],["Identifier","$code->{"],["String","'modifier_table'"],["Identifier","}"],["",");\n}\n\n"],["Keyword","sub "],["Function","after_modifiers "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","after"],["Identifier","}}"],["",";\n}\n\n{\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# this is another possible candidate for"],["","\n    "],["Comment","# optimization as well. There is an overhead"],["","\n    "],["Comment","# associated with the currying that, if"],["","\n    "],["Comment","# eliminated might make around modifiers"],["","\n    "],["Comment","# more manageable."],["","\n    "],["Statement","my"],[""," "],["Identifier","$compile_around_method"],[""," = "],["Keyword","sub "],["","{{\n        "],["Statement","my"],[""," "],["Identifier","$f1"],[""," = "],["Statement","pop"],["",";\n        "],["Statement","return"],[""," "],["Identifier","$f1"],[""," "],["Conditional","unless"],[""," "],["Identifier","@_"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$f2"],[""," = "],["Statement","pop"],["",";\n        "],["Statement","push"],[""," "],["Identifier","@_"],["",", "],["Keyword","sub "],["","{ "],["Identifier","$f2"],["","->( "],["Identifier","$f1"],["",", "],["Identifier","@_"],[""," ) };\n        "],["Statement","redo"],["",";\n    }};\n\n    "],["Keyword","sub "],["Function","add_around_modifier "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$code"],["","     = "],["Statement","shift"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$modifier"],[""," = "],["Statement","shift"],["",";\n        "],["Statement","unshift"],[""," "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","around"],["Identifier","}->{"],["String","methods"],["Identifier","}}"],[""," => "],["Identifier","$modifier"],["",";\n        "],["Identifier","$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","around"],["Identifier","}->{"],["String","cache"],["Identifier","}"],[""," = "],["Identifier","$compile_around_method"],["","->(\n            "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","around"],["Identifier","}->{"],["String","methods"],["Identifier","}}"],["",",\n            "],["Identifier","$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","orig"],["Identifier","}"],["","\n        );\n        "],["Identifier","$_build_wrapped_method"],["","->("],["Identifier","$code->{"],["String","'modifier_table'"],["Identifier","}"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","around_modifiers "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","@{$code->{"],["String","'modifier_table'"],["Identifier","}->{"],["String","around"],["Identifier","}->{"],["String","methods"],["Identifier","}}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_make_compatible_with "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$other"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Comment","# "],["Todo","XXX:"],["Comment"," this is pretty gross. the issue here is that CMOP::Method::Wrapped"],["","\n    "],["Comment","# objects are subclasses of CMOP::Method, but when we get to moose, they'll"],["","\n    "],["Comment","# need to be compatible with Moose::Meta::Method, which isn't possible. the"],["","\n    "],["Comment","# right solution here is to make ::Wrapped into a role that gets applied to"],["","\n    "],["Comment","# whatever the method_metaclass happens to be and get rid of"],["","\n    "],["Comment","# wrapped_method_metaclass entirely, but that's not going to happen until"],["","\n    "],["Comment","# we ditch cmop and get roles into the bootstrapping, so. i'm not"],["","\n    "],["Comment","# maintaining the previous behavior of turning them into instances of the"],["","\n    "],["Comment","# new method_metaclass because that's equally broken, and at least this way"],["","\n    "],["Comment","# any issues will at least be detectable and potentially fixable. -doy"],["","\n    "],["Statement","return"],[""," "],["Identifier","$self"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->_is_compatible_with("],["Identifier","$self"],["","->_real_ref_name);\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::_make_compatible_with("],["Identifier","@_"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Method Meta Object for methods with before/after/around modifiers"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Method::Wrapped - Method Meta Object for methods with before/after/around modifiers\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis is a "],["Identifier","L<Class::MOP::Method>"],[""," subclass which implements before,\nafter, and around method modifiers.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=head2"],[""," "],["String","Construction"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Method::Wrapped->wrap($metamethod, %options) >>"],["","\n\nThis is the constructor. It accepts a "],["Identifier","L<Class::MOP::Method>"],[""," object and\na hash of options.\n\nThe options are:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* name"],["","\n\nThe method name (without a package name). This will be taken from the\nprovided "],["Identifier","L<Class::MOP::Method>"],[""," object if it is not provided.\n\n"],["Statement","=item"],[""," "],["String","* package_name"],["","\n\nThe package name for the method. This will be taken from the provided\n"],["Identifier","L<Class::MOP::Method>"],[""," object if it is not provided.\n\n"],["Statement","=item"],[""," "],["String","* associated_metaclass"],["","\n\nAn optional "],["Identifier","L<Class::MOP::Class>"],[""," object. This is the metaclass for the\nmethod's class.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->get_original_method >>"],["","\n\nThis returns the "],["Identifier","L<Class::MOP::Method>"],[""," object that was passed to the\nconstructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->add_before_modifier($code) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->add_after_modifier($code) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->add_around_modifier($code) >>"],["","\n\nThese methods all take a subroutine reference and apply it as a\nmodifier to the original method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->before_modifiers >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->after_modifiers >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->around_modifiers >>"],["","\n\nThese methods all return a list of subroutine references which are\nacting as the specified type of modifier.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]