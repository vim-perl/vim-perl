[["","\n"],["Statement","package"],["Type"," Class::MOP::Method::Constructor"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Constructor::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Constructor::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'weaken'"],["",";\n"],["Statement","use "],["","Try::Tiny;\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Method::Inlined'"],["",";\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n\n    (blessed "],["Identifier","$options{"],["String","metaclass"],["Identifier","}"],[""," && "],["Identifier","$options{"],["String","metaclass"],["Identifier","}"],["","->isa("],["String","'Class::MOP::Class'"],["","))\n        || confess "],["String","\"You must pass a metaclass instance if you want to inline\""],["","\n            "],["Conditional","if"],[""," "],["Identifier","$options{"],["String","is_inline"],["Identifier","}"],["",";\n\n    ("],["Identifier","$options{"],["String","package_name"],["Identifier","}"],[""," && "],["Identifier","$options{"],["String","name"],["Identifier","}"],["",")\n        || confess "],["String","\"You must supply the package_name and name parameters "],["Identifier","$"],["Type","Class::MOP::Method::"],["Identifier","UPGRADE_ERROR_TEXT"],["String","\""],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Identifier","$class"],["","->_new(\\"],["Identifier","%options"],["",");\n\n    "],["Comment","# we don't want this creating"],["","\n    "],["Comment","# a cycle in the code, if not"],["","\n    "],["Comment","# needed"],["","\n    weaken("],["Identifier","$self->{"],["String","'associated_metaclass'"],["Identifier","}"],["",");\n\n    "],["Identifier","$self"],["","->_initialize_body;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","_new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," __PACKAGE__;\n\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n\n    "],["Statement","return"],[""," "],["Operator","bless"],[""," {\n        "],["Comment","# inherited from Class::MOP::Method"],["","\n        "],["String","body"],["","                 => "],["Identifier","$params->{"],["String","body"],["Identifier","}"],["",",\n        "],["Comment","# associated_metaclass => $params->{associated_metaclass}, # overridden"],["","\n        "],["String","package_name"],["","         => "],["Identifier","$params->{"],["String","package_name"],["Identifier","}"],["",",\n        "],["String","name"],["","                 => "],["Identifier","$params->{"],["String","name"],["Identifier","}"],["",",\n        "],["String","original_method"],["","      => "],["Identifier","$params->{"],["String","original_method"],["Identifier","}"],["",",\n\n        "],["Comment","# inherited from Class::MOP::Generated"],["","\n        "],["String","is_inline"],["","            => "],["Identifier","$params->{"],["String","is_inline"],["Identifier","}"],[""," || "],["Number","0"],["",",\n        "],["String","definition_context"],["","   => "],["Identifier","$params->{"],["String","definition_context"],["Identifier","}"],["",",\n\n        "],["Comment","# inherited from Class::MOP::Inlined"],["","\n        "],["String","_expected_method_class"],[""," => "],["Identifier","$params->{"],["String","_expected_method_class"],["Identifier","}"],["",",\n\n        "],["Comment","# defined in this subclass"],["","\n        "],["String","options"],["","              => "],["Identifier","$params->{"],["String","options"],["Identifier","}"],[""," || {},\n        "],["String","associated_metaclass"],[""," => "],["Identifier","$params->{"],["String","metaclass"],["Identifier","}"],["",",\n    }, "],["Identifier","$class"],["",";\n}\n\n"],["Comment","## accessors"],["","\n\n"],["Keyword","sub "],["Function","options              "],["","{ ("],["Statement","shift"],["",")->{"],["String","'options'"],["","}              }\n"],["Keyword","sub "],["Function","associated_metaclass "],["","{ ("],["Statement","shift"],["",")->{"],["String","'associated_metaclass'"],["","} }\n\n"],["Comment","## method"],["","\n\n"],["Keyword","sub "],["Function","_initialize_body "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","        = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$method_name"],[""," = "],["String","'_generate_constructor_method'"],["",";\n\n    "],["Identifier","$method_name"],[""," .= "],["String","'_inline'"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->is_inline;\n\n    "],["Identifier","$self->{"],["String","'body'"],["Identifier","}"],[""," = "],["Identifier","$self"],["","->"],["Identifier","$method_name"],["",";\n}\n\n"],["Keyword","sub "],["Function","_eval_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->associated_metaclass->_eval_environment;\n}\n\n"],["Keyword","sub "],["Function","_generate_constructor_method "],["","{\n    "],["Statement","return"],[""," "],["Keyword","sub "],["","{ Class::MOP::Class->initialize("],["Statement","shift"],["",")->new_object("],["Identifier","@_"],["",") }\n}\n\n"],["Keyword","sub "],["Function","_generate_constructor_method_inline "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Identifier","$self"],["","->associated_metaclass;\n\n    "],["Statement","my"],[""," "],["Identifier","@source"],[""," = (\n        "],["String","'sub {'"],["",",\n            "],["Identifier","$meta"],["","->_inline_new_object,\n        "],["String","'}'"],["",",\n    );\n\n    "],["Statement","warn"],[""," "],["Statement","join"],["","("],["String","\""],["Special","\\n"],["String","\""],["",", "],["Identifier","@source"],["",") "],["Conditional","if"],[""," "],["Identifier","$self"],["","->options->{debug};\n\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = try {\n        "],["Identifier","$self"],["","->_compile_code(\\"],["Identifier","@source"],["",");\n    }\n    catch {\n        "],["Statement","my"],[""," "],["Identifier","$source"],[""," = "],["Statement","join"],["","("],["String","\""],["Special","\\n"],["String","\""],["",", "],["Identifier","@source"],["",");\n        confess "],["String","\"Could not eval the constructor :"],["Special","\\n\\n"],["Identifier","$source"],["Special","\\n\\n"],["String","because :"],["Special","\\n\\n"],["Identifier","$_"],["String","\""],["",";\n    };\n\n    "],["Statement","return"],[""," "],["Identifier","$code"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Method Meta Object for constructors"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Method::Constructor - Method Meta Object for constructors\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  use Class::MOP::Method::Constructor;"],["","\n\n"],["PreProc","  my $constructor = Class::MOP::Method::Constructor->new("],["","\n"],["PreProc","      metaclass => $metaclass,"],["","\n"],["PreProc","      options   => {"],["","\n"],["PreProc","          debug => 1, # this is all for now"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  # calling the constructor ..."],["","\n"],["PreProc","  $constructor->body->execute($metaclass->name, %params);"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis is a subclass of "],["Identifier","C<Class::MOP::Method>"],[""," which generates\nconstructor methods.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Method::Constructor->new(%options) >>"],["","\n\nThis creates a new constructor object. It accepts a hash reference of\noptions.\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* metaclass"],["","\n\nThis should be a "],["Identifier","L<Class::MOP::Class>"],[""," object. It is required.\n\n"],["Statement","=item"],[""," "],["String","* name"],["","\n\nThe method name (without a package name). This is required.\n\n"],["Statement","=item"],[""," "],["String","* package_name"],["","\n\nThe package name for the method. This is required.\n\n"],["Statement","=item"],[""," "],["String","* is_inline"],["","\n\nThis indicates whether or not the constructor should be inlined. This\ndefaults to false.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->is_inline >>"],["","\n\nReturns a boolean indicating whether or not the constructor is\ninlined.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->associated_metaclass >>"],["","\n\nThis returns the "],["Identifier","L<Class::MOP::Class>"],[""," object for the method.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]