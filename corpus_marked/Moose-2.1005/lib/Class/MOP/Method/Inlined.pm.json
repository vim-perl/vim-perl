[["Statement","package"],["Type"," Class::MOP::Method::Inlined"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Inlined::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Inlined::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'weaken'"],["",", "],["String","'looks_like_number'"],["",", "],["String","'refaddr'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Method::Generated'"],["",";\n\n"],["Keyword","sub "],["Function","_uninlined_body "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$super_method"],["","\n        = "],["Identifier","$self"],["","->associated_metaclass->find_next_method_by_name( "],["Identifier","$self"],["","->name )\n        "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$super_method"],["","->isa(__PACKAGE__) ) {\n        "],["Statement","return"],[""," "],["Identifier","$super_method"],["","->_uninlined_body;\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," "],["Identifier","$super_method"],["","->body;\n    }\n}\n\n"],["Keyword","sub "],["Function","can_be_inlined "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","      = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$metaclass"],[""," = "],["Identifier","$self"],["","->associated_metaclass;\n    "],["Statement","my"],[""," "],["Identifier","$class"],["","     = "],["Identifier","$metaclass"],["","->name;\n\n    "],["Comment","# If we don't find an inherited method, this is a rather weird"],["","\n    "],["Comment","# case where we have no method in the inheritance chain even"],["","\n    "],["Comment","# though we're expecting one to be there"],["","\n    "],["Statement","my"],[""," "],["Identifier","$inherited_method"],["","\n        = "],["Identifier","$metaclass"],["","->find_next_method_by_name( "],["Identifier","$self"],["","->name );\n\n    "],["Conditional","if"],[""," (   "],["Identifier","$inherited_method"],["","\n        && "],["Identifier","$inherited_method"],["","->isa("],["String","'Class::MOP::Method::Wrapped'"],["",") ) {\n        "],["Statement","warn"],[""," "],["String","\"Not inlining '\""],["","\n            . "],["Identifier","$self"],["","->name\n            . "],["String","\"' for "],["Identifier","$class"],["String"," since it \""],["","\n            . "],["String","\"has method modifiers which would be lost if it were inlined"],["Special","\\n"],["String","\""],["",";\n\n        "],["Statement","return"],[""," "],["Number","0"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$expected_class"],[""," = "],["Identifier","$self"],["","->_expected_method_class\n        "],["Operator","or"],[""," "],["Statement","return"],[""," "],["Number","1"],["",";\n\n    "],["Comment","# if we are shadowing a method we first verify that it is"],["","\n    "],["Comment","# compatible with the definition we are replacing it with"],["","\n    "],["Statement","my"],[""," "],["Identifier","$expected_method"],[""," = "],["Identifier","$expected_class"],["","->can( "],["Identifier","$self"],["","->name );\n\n    "],["Conditional","if"],[""," ( ! "],["Identifier","$expected_method"],[""," ) {\n        "],["Statement","warn"],[""," "],["String","\"Not inlining '\""],["","\n            . "],["Identifier","$self"],["","->name\n            . "],["String","\"' for "],["Identifier","$class"],["String"," since "],["Identifier","${expected_class}"],["String","::\""],["","\n            . "],["Identifier","$self"],["","->name\n            . "],["String","\" is not defined"],["Special","\\n"],["String","\""],["",";\n\n        "],["Statement","return"],[""," "],["Number","0"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$actual_method"],[""," = "],["Identifier","$class"],["","->can( "],["Identifier","$self"],["","->name )\n        "],["Operator","or"],[""," "],["Statement","return"],[""," "],["Number","1"],["",";\n\n    "],["Comment","# the method is what we wanted (probably Moose::Object::new)"],["","\n    "],["Statement","return"],[""," "],["Number","1"],["","\n        "],["Conditional","if"],[""," refaddr("],["Identifier","$expected_method"],["",") == refaddr("],["Identifier","$actual_method"],["",");\n\n    "],["Comment","# otherwise we have to check that the actual method is an inlined"],["","\n    "],["Comment","# version of what we're expecting"],["","\n    "],["Conditional","if"],[""," ( "],["Identifier","$inherited_method"],["","->isa(__PACKAGE__) ) {\n        "],["Conditional","if"],[""," ( "],["Identifier","$inherited_method"],["","->_uninlined_body\n             && refaddr( "],["Identifier","$inherited_method"],["","->_uninlined_body )\n             == refaddr("],["Identifier","$expected_method"],["",") ) {\n            "],["Statement","return"],[""," "],["Number","1"],["",";\n        }\n    }\n    "],["Conditional","elsif"],[""," ( refaddr( "],["Identifier","$inherited_method"],["","->body )\n            == refaddr("],["Identifier","$expected_method"],["",") ) {\n        "],["Statement","return"],[""," "],["Number","1"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$warning"],["","\n        = "],["String","\"Not inlining '\""],["","\n        . "],["Identifier","$self"],["","->name\n        . "],["String","\"' for "],["Identifier","$class"],["String"," since it is not\""],["","\n        . "],["String","\" inheriting the default "],["Identifier","${expected_class}"],["String","::\""],["","\n        . "],["Identifier","$self"],["","->name . "],["String","\""],["Special","\\n"],["String","\""],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->isa("],["String","\"Class::MOP::Method::Constructor\""],["",") ) {\n\n        "],["Comment","# "],["Todo","FIXME"],["Comment"," kludge, refactor warning generation to a method"],["","\n        "],["Identifier","$warning"],["","\n            .= "],["String","\"If you are certain you don't need to inline your\""],["","\n            . "],["String","\" constructor, specify inline_constructor => 0 in your\""],["","\n            . "],["String","\" call to "],["Identifier","$class"],["String","->meta->make_immutable"],["Special","\\n"],["String","\""],["",";\n    }\n\n    "],["Statement","warn"],[""," "],["Identifier","$warning"],["",";\n\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Method base class for methods which have been inlined"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Method::Inlined - Method base class for methods which have been inlined\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis is a "],["Identifier","L<Class::MOP::Method::Generated>"],[""," subclass for methods which\ncan be inlined.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metamethod->can_be_inlined >>"],["","\n\nThis method returns true if the method in question can be inlined in\nthe associated metaclass.\n\nIf it cannot be inlined, it spits out a warning and returns false.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]