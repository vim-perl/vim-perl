[["","\n"],["Statement","package"],["Type"," Class::MOP::Method::Meta"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Meta::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Method::Meta::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'weaken'"],["",";\n\n"],["Statement","use constant"],[""," "],["String","DEBUG_NO_META"],[""," => "],["Identifier","$ENV{"],["String","DEBUG_NO_META"],["Identifier","}"],[""," ? "],["Number","1"],[""," : "],["Number","0"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Method'"],["",";\n\n"],["Keyword","sub "],["Function","_is_caller_mop_internal "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$caller"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$caller"],[""," =~ "],["Statement","/"],["String","^"],["Special","(?:"],["String","Class::MOP|metaclass"],["Special",")(?:"],["String","::|$"],["Special",")"],["Statement","/"],["",";\n}\n\n"],["Keyword","sub "],["Function","_generate_meta_method "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$method_self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$metaclass"],["","   = "],["Statement","shift"],["",";\n    weaken("],["Identifier","$metaclass"],["",");\n\n    "],["Keyword","sub "],["","{\n        "],["Comment","# this will be compiled out if the env var wasn't set"],["","\n        "],["Conditional","if"],[""," (DEBUG_NO_META) {\n            confess "],["String","\"'meta' method called by MOP internals\""],["","\n                "],["Comment","# it's okay to call meta methods on metaclasses, since we"],["","\n                "],["Comment","# explicitly ask for them"],["","\n                "],["Conditional","if"],[""," !"],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->isa("],["String","'Class::MOP::Object'"],["",")\n                && !"],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->isa("],["String","'Class::MOP::Mixin'"],["",")\n                "],["Comment","# it's okay if the test itself calls ->meta, we only care about"],["","\n                "],["Comment","# if the mop internals call ->meta"],["","\n                && "],["Identifier","$method_self"],["","->_is_caller_mop_internal("],["Statement","scalar"],[""," "],["Statement","caller"],["",");\n        }\n        "],["Comment","# we must re-initialize so that it"],["","\n        "],["Comment","# works as expected in subclasses,"],["","\n        "],["Comment","# since metaclass instances are"],["","\n        "],["Comment","# singletons, this is not really a"],["","\n        "],["Comment","# big deal anyway."],["","\n        "],["Identifier","$metaclass"],["","->initialize(blessed("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") || "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",")\n    };\n}\n\n"],["Keyword","sub "],["Function","wrap "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'body'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%params"],[""," = "],["Identifier","@args"],["",";\n    confess "],["String","\"Overriding the body of meta methods is not allowed\""],["","\n        "],["Conditional","if"],[""," "],["Identifier","$params{"],["String","body"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$metaclass_class"],[""," = "],["Identifier","$params{"],["String","associated_metaclass"],["Identifier","}"],["","->meta;\n    "],["Identifier","$params{"],["String","body"],["Identifier","}"],[""," = "],["Identifier","$class"],["","->_generate_meta_method("],["Identifier","$metaclass_class"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->SUPER::wrap("],["Identifier","%params"],["",");\n}\n\n"],["Keyword","sub "],["Function","_make_compatible_with "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$other"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Comment","# "],["Todo","XXX:"],["Comment"," this is pretty gross. the issue here is that CMOP::Method::Meta"],["","\n    "],["Comment","# objects are subclasses of CMOP::Method, but when we get to moose, they'll"],["","\n    "],["Comment","# need to be compatible with Moose::Meta::Method, which isn't possible. the"],["","\n    "],["Comment","# right solution here is to make ::Meta into a role that gets applied to"],["","\n    "],["Comment","# whatever the method_metaclass happens to be and get rid of"],["","\n    "],["Comment","# _meta_method_metaclass entirely, but that's not going to happen until"],["","\n    "],["Comment","# we ditch cmop and get roles into the bootstrapping, so. i'm not"],["","\n    "],["Comment","# maintaining the previous behavior of turning them into instances of the"],["","\n    "],["Comment","# new method_metaclass because that's equally broken, and at least this way"],["","\n    "],["Comment","# any issues will at least be detectable and potentially fixable. -doy"],["","\n    "],["Statement","return"],[""," "],["Identifier","$self"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->_is_compatible_with("],["Identifier","$self"],["","->_real_ref_name);\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::_make_compatible_with("],["Identifier","@_"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Method Meta Object for C<meta> methods"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Method::Meta - Method Meta Object for "],["Identifier","C<meta>"],[""," methods\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis is a "],["Identifier","L<Class::MOP::Method>"],[""," subclass which represents "],["Identifier","C<meta>"],["","\nmethods installed into classes by Class::MOP.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Method::Wrapped->wrap($metamethod, %options) >>"],["","\n\nThis is the constructor. It accepts a "],["Identifier","L<Class::MOP::Method>"],[""," object and\na hash of options. The options accepted are identical to the ones\naccepted by "],["Identifier","L<Class::MOP::Method>"],["",", except that "],["Identifier","C<body>"],[""," cannot be passed\n(it will be generated automatically).\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]