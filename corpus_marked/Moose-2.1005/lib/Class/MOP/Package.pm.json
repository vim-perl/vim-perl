[["","\n"],["Statement","package"],["Type"," Class::MOP::Package"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Class::MOP::Package::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Class::MOP::Package::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'reftype'"],["",", "],["String","'weaken'"],["",";\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Devel::GlobalDestruction "],["String","'in_global_destruction'"],["",";\n"],["Statement","use "],["","Package::Stash;\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Object'"],["",";\n\n"],["Comment","# creation ..."],["","\n\n"],["Keyword","sub "],["Function","initialize "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","\"package\""],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$package_name"],[""," = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","package"],["Identifier","}"],["",";\n\n\n    "],["Comment","# we hand-construct the class until we can bootstrap it"],["","\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$package_name"],["",") ) {\n        "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n    } "],["Conditional","else"],[""," {\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = ( "],["Operator","ref"],[""," "],["Identifier","$class"],[""," || "],["Identifier","$class"],[""," )->_new({\n            "],["String","'package'"],["","   => "],["Identifier","$package_name"],["",",\n            "],["Identifier","%options"],["",",\n        });\n        Class::MOP::store_metaclass_by_name("],["Identifier","$package_name"],["",", "],["Identifier","$meta"],["",");\n\n        Class::MOP::weaken_metaclass("],["Identifier","$package_name"],["",") "],["Conditional","if"],[""," "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],["",";\n\n\n        "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","reinitialize "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","\"package\""],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$package_name"],[""," = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","package"],["Identifier","}"],["",";\n\n    ("],["Operator","defined"],[""," "],["Identifier","$package_name"],[""," && "],["Identifier","$package_name"],["","\n      && (!blessed "],["Identifier","$package_name"],[""," || "],["Identifier","$package_name"],["","->isa("],["String","'Class::MOP::Package'"],["",")))\n        || confess "],["String","\"You must pass a package name or an existing Class::MOP::Package instance\""],["",";\n\n    "],["Identifier","$package_name"],[""," = "],["Identifier","$package_name"],["","->name\n        "],["Conditional","if"],[""," blessed "],["Identifier","$package_name"],["",";\n\n    Class::MOP::remove_metaclass_by_name("],["Identifier","$package_name"],["",");\n\n    "],["Identifier","$class"],["","->initialize("],["Identifier","$package_name"],["",", "],["Identifier","%options"],["","); "],["Comment","# call with first arg form for compat"],["","\n}\n\n"],["Keyword","sub "],["Function","create "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->initialize("],["Identifier","@args"],["",");\n}\n\n"],["Comment","## ANON packages"],["","\n\n{\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# this should be sufficient, if you have a"],["","\n    "],["Comment","# use case where it is not, write a test and"],["","\n    "],["Comment","# I will change it."],["","\n    "],["Statement","my"],[""," "],["Identifier","$ANON_SERIAL"],[""," = "],["Number","0"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%ANON_PACKAGE_CACHE"],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# we need a sufficiently annoying prefix"],["","\n    "],["Comment","# this should suffice for now, this is"],["","\n    "],["Comment","# used in a couple of places below, so"],["","\n    "],["Comment","# need to put it up here for now."],["","\n    "],["Keyword","sub "],["Function","_anon_package_prefix "],["","{ "],["String","'Class::MOP::Package::__ANON__::SERIAL::'"],[""," }\n\n    "],["Keyword","sub "],["Function","is_anon "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n        "],["Statement","no warnings"],[""," "],["String","'uninitialized'"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$prefix"],[""," = "],["Identifier","$self"],["","->_anon_package_prefix;\n        "],["Identifier","$self"],["","->name =~ "],["Statement","/"],["String","^"],["Special","\\Q"],["Identifier","$prefix"],["Statement","/"],["",";\n    }\n\n    "],["Keyword","sub "],["Function","create_anon "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","%options"],["",") = "],["Identifier","@_"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$cache_ok"],[""," = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","cache"],["Identifier","}"],["",";\n        "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],[""," = !"],["Identifier","$cache_ok"],[""," "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$cache_key"],["",";\n        "],["Conditional","if"],[""," ("],["Identifier","$cache_ok"],["",") {\n            "],["Identifier","$cache_key"],[""," = "],["Identifier","$class"],["","->_anon_cache_key("],["Identifier","%options"],["",");\n            "],["Operator","undef"],[""," "],["Identifier","$cache_ok"],[""," "],["Conditional","if"],[""," !"],["Operator","defined"],["","("],["Identifier","$cache_key"],["",");\n        }\n\n        "],["Conditional","if"],[""," ("],["Identifier","$cache_ok"],["",") {\n            "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$ANON_PACKAGE_CACHE{$cache_key}"],["",") {\n                "],["Statement","return"],[""," "],["Identifier","$ANON_PACKAGE_CACHE{$cache_key}"],["",";\n            }\n        }\n\n        "],["Statement","my"],[""," "],["Identifier","$package_name"],[""," = "],["Identifier","$class"],["","->_anon_package_prefix . ++"],["Identifier","$ANON_SERIAL"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Identifier","$class"],["","->create("],["Identifier","$package_name"],["",", "],["Identifier","%options"],["",");\n\n        "],["Conditional","if"],[""," ("],["Identifier","$cache_ok"],["",") {\n            "],["Identifier","$ANON_PACKAGE_CACHE{$cache_key}"],[""," = "],["Identifier","$meta"],["",";\n            weaken("],["Identifier","$ANON_PACKAGE_CACHE{$cache_key}"],["",");\n        }\n\n        "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n    }\n\n    "],["Keyword","sub "],["Function","_anon_cache_key "],["","{ confess "],["String","\"Packages are not cacheable\""],[""," }\n\n    "],["Keyword","sub "],["Function","DESTROY "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," in_global_destruction(); "],["Comment","# it'll happen soon anyway and this just makes things more complicated"],["","\n\n        "],["Identifier","$self"],["","->_free_anon\n            "],["Conditional","if"],[""," "],["Identifier","$self"],["","->is_anon;\n    }\n\n    "],["Keyword","sub "],["Function","_free_anon "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$self"],["","->name;\n\n        "],["Comment","# Moose does a weird thing where it replaces the metaclass for"],["","\n        "],["Comment","# class when fixing metaclass incompatibility. In that case,"],["","\n        "],["Comment","# we don't want to clean out the namespace now. We can detect"],["","\n        "],["Comment","# that because Moose will explicitly update the singleton"],["","\n        "],["Comment","# cache in Class::MOP using store_metaclass_by_name, which"],["","\n        "],["Comment","# means that the new metaclass will already exist in the cache"],["","\n        "],["Comment","# by this point."],["","\n        "],["Comment","# The other options here are that $current_meta can be undef if"],["","\n        "],["Comment","# remove_metaclass_by_name is called explicitly (since the hash"],["","\n        "],["Comment","# entry is removed first, and then this destructor is called),"],["","\n        "],["Comment","# or that $current_meta can be the same as $self, which happens"],["","\n        "],["Comment","# when the metaclass goes out of scope (since the weak reference"],["","\n        "],["Comment","# in the metaclass cache won't be freed until after this"],["","\n        "],["Comment","# destructor runs)."],["","\n        "],["Statement","my"],[""," "],["Identifier","$current_meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$name"],["",");\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Operator","defined"],["","("],["Identifier","$current_meta"],["",") && "],["Identifier","$current_meta"],[""," "],["Operator","ne"],[""," "],["Identifier","$self"],["",";\n\n        "],["Statement","my"],[""," ("],["Identifier","$first_fragments"],["",", "],["Identifier","$last_fragment"],["",") = ("],["Identifier","$name"],[""," =~ "],["Statement","/"],["String","^"],["Special","(.*)"],["String","::"],["Special","(.*)"],["String","$"],["Statement","/"],["",");\n\n        "],["Statement","no strict"],[""," "],["String","'refs'"],["",";\n        "],["Comment","# clear @ISA first, to avoid a memory leak"],["","\n        "],["Comment","# see https://rt.perl.org/rt3/Public/Bug/Display.html?id=92708"],["","\n        "],["Identifier","@{$name"],[""," . "],["String","'::ISA'"],["Identifier","}"],[""," = ();\n        "],["Identifier","%{$name"],[""," . "],["String","'::'"],["Identifier","}"],["","    = ();\n        "],["Statement","delete"],[""," "],["Identifier","${$first_fragments"],[""," . "],["String","'::'"],["Identifier","}{$last_fragment"],[""," . "],["String","'::'"],["Identifier","}"],["",";\n\n        Class::MOP::remove_metaclass_by_name("],["Identifier","$name"],["",");\n    }\n\n}\n\n"],["Keyword","sub "],["Function","_new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," __PACKAGE__;\n\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n\n    "],["Statement","return"],[""," "],["Operator","bless"],[""," {\n        "],["Comment","# Need to quote package to avoid a problem with PPI mis-parsing this"],["","\n        "],["Comment","# as a package statement."],["","\n        "],["String","'package'"],[""," => "],["Identifier","$params->{"],["String","package"],["Identifier","}"],["",",\n\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# because of issues with the Perl API"],["","\n        "],["Comment","# to the typeglob in some versions, we"],["","\n        "],["Comment","# need to just always grab a new"],["","\n        "],["Comment","# reference to the hash in the accessor."],["","\n        "],["Comment","# Ideally we could just store a ref and"],["","\n        "],["Comment","# it would Just Work, but oh well :\\"],["","\n\n        "],["String","namespace"],[""," => \\"],["Operator","undef"],["",",\n\n    } => "],["Identifier","$class"],["",";\n}\n\n"],["Comment","# Attributes"],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# all these attribute readers will be bootstrapped"],["","\n"],["Comment","# away in the Class::MOP bootstrap section"],["","\n\n"],["Keyword","sub "],["Function","_package_stash "],["","{\n    "],["Identifier","$_["],["Number","0"],["Identifier","]->{"],["String","_package_stash"],["Identifier","}"],[""," ||= Package::Stash->new("],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->name)\n}\n"],["Keyword","sub "],["Function","namespace "],["","{\n    "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->_package_stash->namespace\n}\n\n"],["Comment","# Class attributes"],["","\n\n"],["Comment","# ... these functions have to touch the symbol table itself,.. yuk"],["","\n\n"],["Keyword","sub "],["Function","add_package_symbol "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->add_symbol("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","remove_package_glob "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->remove_glob("],["Identifier","@_"],["",");\n}\n\n"],["Comment","# ... these functions deal with stuff on the namespace level"],["","\n\n"],["Keyword","sub "],["Function","has_package_symbol "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->has_symbol("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_package_symbol "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->get_symbol("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_or_add_package_symbol "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->get_or_add_symbol("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","remove_package_symbol "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->remove_symbol("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","list_all_package_symbols "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->list_all_symbols("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_all_package_symbols "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_package_stash->get_all_symbols("],["Identifier","@_"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Package Meta Object"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nClass::MOP::Package - Package Meta Object\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThe Package Protocol provides an abstraction of a Perl 5 package. A\npackage is basically namespace, and this module provides methods for\nlooking at and changing that namespace's symbol table.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Package->initialize($package_name, %options) >>"],["","\n\nThis method creates a new "],["Identifier","C<Class::MOP::Package>"],[""," instance which\nrepresents specified package. If an existing metaclass object exists\nfor the package, that will be returned instead. No options are valid at the\npackage level.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Package->reinitialize($package, %options) >>"],["","\n\nThis method forcibly removes any existing metaclass for the package\nbefore calling "],["Identifier","C<initialize>"],["",". In contrast to "],["Identifier","C<initialize>"],["",", you may\nalso pass an existing "],["Identifier","C<Class::MOP::Package>"],[""," instance instead of just\na package name as "],["Identifier","C<$package>"],["",".\n\nDo not call this unless you know what you are doing.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Package->create($package, %options) >>"],["","\n\nCreates a new "],["Identifier","C<Class::MOP::Package>"],[""," instance which represents the specified\npackage, and also does some initialization of that package. Currently, this\njust does the same thing as "],["Identifier","C<initialize>"],["",", but is overridden in subclasses,\nsuch as "],["Identifier","C<Class::MOP::Class>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Package->create_anon(%options) >>"],["","\n\nCreates a new anonymous package. Valid keys for "],["Identifier","C<%options>"],[""," are:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","C<weaken>"],["","\n\nIf this is true (the default), the instance stored in "],["Identifier","C<Class::MOP>"],["","'s metaclass\ncache will be weakened, so that the anonymous package will be garbage collected\nwhen the returned instance goes out of scope.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->is_anon >>"],["","\n\nReturns true if the package is an anonymous package.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->name >>"],["","\n\nThis is returns the package's name, as passed to the constructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->namespace >>"],["","\n\nThis returns a hash reference to the package's symbol table. The keys\nare symbol names and the values are typeglob references.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->add_package_symbol($variable_name, $initial_value) >>"],["","\n\nThis method accepts a variable name and an optional initial value. The\n"],["Identifier","C<$variable_name>"],[""," must contain a leading sigil.\n\nThis method creates the variable in the package's symbol table, and\nsets it to the initial value if one was provided.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->get_package_symbol($variable_name) >>"],["","\n\nGiven a variable name, this method returns the variable as a reference\nor undef if it does not exist. The "],["Identifier","C<$variable_name>"],[""," must contain a\nleading sigil.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->get_or_add_package_symbol($variable_name) >>"],["","\n\nGiven a variable name, this method returns the variable as a reference.\nIf it does not exist, a default value will be generated if possible. The\n"],["Identifier","C<$variable_name>"],[""," must contain a leading sigil.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->has_package_symbol($variable_name) >>"],["","\n\nReturns true if there is a package variable defined for\n"],["Identifier","C<$variable_name>"],["",". The "],["Identifier","C<$variable_name>"],[""," must contain a leading sigil.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->remove_package_symbol($variable_name) >>"],["","\n\nThis will remove the package variable specified "],["Identifier","C<$variable_name>"],["",". The\n"],["Identifier","C<$variable_name>"],[""," must contain a leading sigil.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->remove_package_glob($glob_name) >>"],["","\n\nGiven the name of a glob, this will remove that glob from the\npackage's symbol table. Glob names do not include a sigil. Removing\nthe glob removes all variables and subroutines with the specified\nname.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->list_all_package_symbols($type_filter) >>"],["","\n\nThis will list all the glob names associated with the current\npackage. These names do not have leading sigils.\n\nYou can provide an optional type filter, which should be one of\n'SCALAR', 'ARRAY', 'HASH', or 'CODE'.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metapackage->get_all_package_symbols($type_filter) >>"],["","\n\nThis works much like "],["Identifier","C<list_all_package_symbols>"],["",", but it returns a\nhash reference. The keys are glob names and the values are references\nto the value for that name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Class::MOP::Package->meta >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Class>"],[""," instance for this class.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]