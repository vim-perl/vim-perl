[["Statement","package"],["Type"," Moose::Meta::Role"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Role::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Role::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","Class::Load "],["String","qw(load_class)"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","Carp         "],["String","'confess'"],["",";\n"],["Statement","use "],["","Devel::GlobalDestruction "],["String","'in_global_destruction'"],["",";\n\n"],["Statement","use "],["","Moose::Meta::Class;\n"],["Statement","use "],["","Moose::Meta::Role::Attribute;\n"],["Statement","use "],["","Moose::Meta::Role::Method;\n"],["Statement","use "],["","Moose::Meta::Role::Method::Required;\n"],["Statement","use "],["","Moose::Meta::Role::Method::Conflicting;\n"],["Statement","use "],["","Moose::Meta::Method::Meta;\n"],["Statement","use "],["","Moose::Util "],["String","qw( ensure_all_roles )"],["",";\n"],["Statement","use "],["","Class::MOP::MiniTrait;\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Module'"],["",",\n         "],["String","'Class::MOP::Mixin::HasAttributes'"],["",",\n         "],["String","'Class::MOP::Mixin::HasMethods'"],["",";\n\nClass::MOP::MiniTrait::apply(__PACKAGE__, "],["String","'Moose::Meta::Object::Trait'"],["",");\n\n"],["Comment","## ------------------------------------------------------------------"],["","\n"],["Comment","## "],["Todo","NOTE:"],["","\n"],["Comment","## I normally don't do this, but I am doing"],["","\n"],["Comment","## a whole bunch of meta-programmin' in this"],["","\n"],["Comment","## module, so it just makes sense. For a clearer"],["","\n"],["Comment","## picture of what is going on in the next"],["","\n"],["Comment","## several lines of code, look at the really"],["","\n"],["Comment","## big comment at the end of this file (right"],["","\n"],["Comment","## before the POD)."],["","\n"],["Comment","## - SL"],["","\n"],["Comment","## ------------------------------------------------------------------"],["","\n\n"],["Statement","my"],[""," "],["Identifier","$META"],[""," = __PACKAGE__->meta;\n\n"],["Comment","## ------------------------------------------------------------------"],["","\n"],["Comment","## attributes ..."],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# since roles are lazy, we hold all the attributes"],["","\n"],["Comment","# of the individual role in 'stasis' until which"],["","\n"],["Comment","# time when it is applied to a class. This means"],["","\n"],["Comment","# keeping a lot of things in hash maps, so we are"],["","\n"],["Comment","# using a little of that meta-programmin' magic"],["","\n"],["Comment","# here and saving lots of extra typin'. And since"],["","\n"],["Comment","# many of these attributes above require similar"],["","\n"],["Comment","# functionality to support them, so we again use"],["","\n"],["Comment","# the wonders of meta-programmin' to deliver a"],["","\n"],["Comment","# very compact solution to this normally verbose"],["","\n"],["Comment","# problem."],["","\n"],["Comment","# - SL"],["","\n\n"],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$action"],[""," (\n    {\n        "],["String","name"],["","        => "],["String","'excluded_roles_map'"],["",",\n        "],["String","attr_reader"],[""," => "],["String","'get_excluded_roles_map'"],[""," ,\n        "],["String","methods"],["","     => {\n            "],["String","add"],["","       => "],["String","'add_excluded_roles'"],["",",\n            "],["String","get_keys"],["","  => "],["String","'get_excluded_roles_list'"],["",",\n            "],["String","existence"],[""," => "],["String","'excludes_role'"],["",",\n        }\n    },\n    {\n        "],["String","name"],["","        => "],["String","'required_methods'"],["",",\n        "],["String","attr_reader"],[""," => "],["String","'get_required_methods_map'"],["",",\n        "],["String","methods"],["","     => {\n            "],["String","remove"],["","     => "],["String","'remove_required_methods'"],["",",\n            "],["String","get_values"],[""," => "],["String","'get_required_method_list'"],["",",\n            "],["String","existence"],["","  => "],["String","'requires_method'"],["",",\n        }\n    },\n) {\n\n    "],["Statement","my"],[""," "],["Identifier","$attr_reader"],[""," = "],["Identifier","$action->{"],["String","attr_reader"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$methods"],["","     = "],["Identifier","$action->{"],["String","methods"],["Identifier","}"],["",";\n\n    "],["Comment","# create the attribute"],["","\n    "],["Identifier","$META"],["","->add_attribute("],["Identifier","$action->{"],["String","name"],["Identifier","}"],[""," => (\n        "],["String","reader"],["","  => "],["Identifier","$attr_reader"],["",",\n        "],["String","default"],[""," => "],["Keyword","sub "],["","{ {} },\n        Class::MOP::_definition_context(),\n    ));\n\n    "],["Comment","# create some helper methods"],["","\n    "],["Identifier","$META"],["","->add_method("],["Identifier","$methods->{"],["String","add"],["Identifier","}"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@values"],["",") = "],["Identifier","@_"],["",";\n        "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$_}"],[""," = "],["Operator","undef"],[""," "],["Repeat","foreach"],[""," "],["Identifier","@values"],["",";\n    }) "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$methods->{"],["String","add"],["Identifier","}"],["",";\n\n    "],["Identifier","$META"],["","->add_method("],["Identifier","$methods->{"],["String","get_keys"],["Identifier","}"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","keys"],[""," "],["Identifier","%{$self"],["","->"],["Identifier","$attr_reader}"],["",";\n    }) "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$methods->{"],["String","get_keys"],["Identifier","}"],["",";\n\n    "],["Identifier","$META"],["","->add_method("],["Identifier","$methods->{"],["String","get_values"],["Identifier","}"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","values"],[""," "],["Identifier","%{$self"],["","->"],["Identifier","$attr_reader}"],["",";\n    }) "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$methods->{"],["String","get_values"],["Identifier","}"],["",";\n\n    "],["Identifier","$META"],["","->add_method("],["Identifier","$methods->{"],["String","get"],["Identifier","}"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$name"],["",") = "],["Identifier","@_"],["",";\n        "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$name}"],["","\n    }) "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$methods->{"],["String","get"],["Identifier","}"],["",";\n\n    "],["Identifier","$META"],["","->add_method("],["Identifier","$methods->{"],["String","existence"],["Identifier","}"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$name"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","exists"],[""," "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$name}"],[""," ? "],["Number","1"],[""," : "],["Number","0"],["",";\n    }) "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$methods->{"],["String","existence"],["Identifier","}"],["",";\n\n    "],["Identifier","$META"],["","->add_method("],["Identifier","$methods->{"],["String","remove"],["Identifier","}"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@values"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","delete"],[""," "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$_}"],[""," "],["Repeat","foreach"],[""," "],["Identifier","@values"],["",";\n    }) "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$methods->{"],["String","remove"],["Identifier","}"],["",";\n}\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'method_metaclass'"],["",",\n    "],["String","reader"],["","  => "],["String","'method_metaclass'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Method'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'required_method_metaclass'"],["",",\n    "],["String","reader"],["","  => "],["String","'required_method_metaclass'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Method::Required'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'conflicting_method_metaclass'"],["",",\n    "],["String","reader"],["","  => "],["String","'conflicting_method_metaclass'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Method::Conflicting'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'application_to_class_class'"],["",",\n    "],["String","reader"],["","  => "],["String","'application_to_class_class'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Application::ToClass'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'application_to_role_class'"],["",",\n    "],["String","reader"],["","  => "],["String","'application_to_role_class'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Application::ToRole'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'application_to_instance_class'"],["",",\n    "],["String","reader"],["","  => "],["String","'application_to_instance_class'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Application::ToInstance'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Identifier","$META"],["","->add_attribute(\n    "],["String","'applied_attribute_metaclass'"],["",",\n    "],["String","reader"],["","  => "],["String","'applied_attribute_metaclass'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Attribute'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Comment","# More or less copied from Moose::Meta::Class"],["","\n"],["Keyword","sub "],["Function","initialize "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@_"],["",";\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'package'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%opts"],[""," = "],["Identifier","@args"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$package"],[""," = "],["Statement","delete"],[""," "],["Identifier","$opts{"],["String","package"],["Identifier","}"],["",";\n    "],["Statement","return"],[""," Class::MOP::get_metaclass_by_name("],["Identifier","$package"],["",")\n        || "],["Identifier","$class"],["","->SUPER::initialize("],["Identifier","$package"],["",",\n                "],["String","'attribute_metaclass'"],[""," => "],["String","'Moose::Meta::Role::Attribute'"],["",",\n                "],["Identifier","%opts"],["",",\n            );\n}\n\n"],["Keyword","sub "],["Function","reinitialize "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$pkg"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = blessed "],["Identifier","$pkg"],[""," ? "],["Identifier","$pkg"],[""," : Class::MOP::class_of("],["Identifier","$pkg"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","%existing_classes"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$meta"],["",") {\n        "],["Identifier","%existing_classes"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$meta"],["","->"],["Identifier","$_"],["","() "],["Statement","}"],[""," "],["String","qw("],["","\n"],["String","            attribute_metaclass"],["","\n"],["String","            method_metaclass"],["","\n"],["String","            wrapped_method_metaclass"],["","\n"],["String","            required_method_metaclass"],["","\n"],["String","            conflicting_method_metaclass"],["","\n"],["String","            application_to_class_class"],["","\n"],["String","            application_to_role_class"],["","\n"],["String","            application_to_instance_class"],["","\n"],["String","            applied_attribute_metaclass"],["","\n"],["String","        )"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n    "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],[""," = Class::MOP::metaclass_is_weak("],["Identifier","$meta"],["","->name)\n        "],["Conditional","if"],[""," !"],["Statement","exists"],[""," "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],["","\n        && blessed("],["Identifier","$meta"],["",")\n        && "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n\n    "],["Comment","# don't need to remove generated metaobjects here yet, since we don't"],["","\n    "],["Comment","# yet generate anything in roles. this may change in the future though..."],["","\n    "],["Comment","# keep an eye on that"],["","\n    "],["Statement","my"],[""," "],["Identifier","$new_meta"],[""," = "],["Identifier","$self"],["","->SUPER::reinitialize(\n        "],["Identifier","$pkg"],["",",\n        "],["Identifier","%existing_classes"],["",",\n        "],["Identifier","%options"],["",",\n    );\n    "],["Identifier","$new_meta"],["","->_restore_metaobjects_from("],["Identifier","$meta"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$meta"],[""," && "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$new_meta"],["",";\n}\n\n"],["Keyword","sub "],["Function","_restore_metaobjects_from "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$old_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->_restore_metamethods_from("],["Identifier","$old_meta"],["",");\n    "],["Identifier","$self"],["","->_restore_metaattributes_from("],["Identifier","$old_meta"],["",");\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$old_meta"],["","->get_roles "],["Identifier","}"],[""," ) {\n        "],["Identifier","$self"],["","->add_role("],["Identifier","$role"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","add_attribute "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," (blessed "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," && ! "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->isa("],["String","'Moose::Meta::Role::Attribute'"],["",") ) {\n        "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Operator","ref"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",";\n        Moose->throw_error( "],["String","\"Cannot add a "],["Identifier","$class"],["String"," as an attribute to a role\""],[""," );\n    }\n    "],["Conditional","elsif"],[""," (!blessed("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") && "],["Operator","defined"],["","("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") && "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," =~ "],["Statement","/"],["String","^"],["Special","\\+(.*)"],["Statement","/"],["",") {\n        Moose->throw_error( "],["String","\"has '+attr' is not supported in roles\""],[""," );\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::add_attribute("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_attach_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$attribute"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$attribute"],["","->attach_to_role("],["Identifier","$self"],["",");\n}\n\n"],["Keyword","sub "],["Function","add_required_methods "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Repeat","for"],[""," ("],["Identifier","@_"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$_"],["",";\n        "],["Conditional","if"],[""," (!blessed("],["Identifier","$method"],["",")) {\n            "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->required_method_metaclass->new(\n                "],["String","name"],[""," => "],["Identifier","$method"],["",",\n            );\n        }\n        "],["Identifier","$self"],["","->get_required_methods_map->{"],["Identifier","$method"],["","->name} = "],["Identifier","$method"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","add_conflicting_method "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$method"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","@_"],[""," == "],["Number","1"],[""," && blessed("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",")) {\n        "],["Identifier","$method"],[""," = "],["Statement","shift"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->conflicting_method_metaclass->new("],["Identifier","@_"],["",");\n    }\n\n    "],["Identifier","$self"],["","->add_required_methods("],["Identifier","$method"],["",");\n}\n\n"],["Comment","## ------------------------------------------------------------------"],["","\n"],["Comment","## method modifiers"],["","\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# the before/around/after method modifiers are"],["","\n"],["Comment","# stored by name, but there can be many methods"],["","\n"],["Comment","# then associated with that name. So again we have"],["","\n"],["Comment","# lots of similar functionality, so we can do some"],["","\n"],["Comment","# meta-programmin' and save some time."],["","\n"],["Comment","# - SL"],["","\n\n"],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$modifier_type"],[""," ("],["String","qw[ before around after ]"],["",") {\n\n    "],["Statement","my"],[""," "],["Identifier","$attr_reader"],[""," = "],["String","\"get_"],["Identifier","${modifier_type}"],["String","_method_modifiers_map\""],["",";\n\n    "],["Comment","# create the attribute ..."],["","\n    "],["Identifier","$META"],["","->add_attribute("],["String","\""],["Identifier","${modifier_type}"],["String","_method_modifiers\""],[""," => (\n        "],["String","reader"],["","  => "],["Identifier","$attr_reader"],["",",\n        "],["String","default"],[""," => "],["Keyword","sub "],["","{ {} },\n        Class::MOP::_definition_context(),\n    ));\n\n    "],["Comment","# and some helper methods ..."],["","\n    "],["Identifier","$META"],["","->add_method("],["String","\"get_"],["Identifier","${modifier_type}"],["String","_method_modifiers\""],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n        "],["Comment","#return () unless exists $self->$attr_reader->{$method_name};"],["","\n        "],["Statement","my"],[""," "],["Identifier","$mm"],[""," = "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$method_name}"],["",";\n        "],["Identifier","$mm"],[""," ? "],["Identifier","@$mm"],[""," : ();\n    });\n\n    "],["Identifier","$META"],["","->add_method("],["String","\"has_"],["Identifier","${modifier_type}"],["String","_method_modifiers\""],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# for now we assume that if it exists,.."],["","\n        "],["Comment","# it has at least one modifier in it"],["","\n        ("],["Statement","exists"],[""," "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$method_name}"],["",") ? "],["Number","1"],[""," : "],["Number","0"],["",";\n    });\n\n    "],["Identifier","$META"],["","->add_method("],["String","\"add_"],["Identifier","${modifier_type}"],["String","_method_modifier\""],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method"],["",") = "],["Identifier","@_"],["",";\n\n        "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$method_name}"],[""," = []\n            "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$method_name}"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$modifiers"],[""," = "],["Identifier","$self"],["","->"],["Identifier","$attr_reader->{$method_name}"],["",";\n\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# check to see that we aren't adding the"],["","\n        "],["Comment","# same code twice. We err in favor of the"],["","\n        "],["Comment","# first on here, this may not be as expected"],["","\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$modifier"],[""," ("],["Identifier","@{$modifiers}"],["",") {\n            "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$modifier"],[""," == "],["Identifier","$method"],["",";\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@{$modifiers}"],[""," => "],["Identifier","$method"],["",";\n    });\n\n}\n\n"],["Comment","## ------------------------------------------------------------------"],["","\n"],["Comment","## override method modifiers"],["","\n\n"],["Identifier","$META"],["","->add_attribute("],["String","'override_method_modifiers'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'get_override_method_modifiers_map'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ {} },\n    Class::MOP::_definition_context(),\n));\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# these are a little different because there"],["","\n"],["Comment","# can only be one per name, whereas the other"],["","\n"],["Comment","# method modifiers can have multiples."],["","\n"],["Comment","# - SL"],["","\n\n"],["Keyword","sub "],["Function","add_override_method_modifier "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method"],["",") = "],["Identifier","@_"],["",";\n    (!"],["Identifier","$self"],["","->has_method("],["Identifier","$method_name"],["","))\n        || Moose->throw_error("],["String","\"Cannot add an override of method '"],["Identifier","$method_name"],["String","' \""],[""," .\n                   "],["String","\"because there is a local version of '"],["Identifier","$method_name"],["String","'\""],["",");\n    "],["Identifier","$self"],["","->get_override_method_modifiers_map->{"],["Identifier","$method_name"],["","} = "],["Identifier","$method"],["",";\n}\n\n"],["Keyword","sub "],["Function","has_override_method_modifier "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# for now we assume that if it exists,.."],["","\n    "],["Comment","# it has at least one modifier in it"],["","\n    ("],["Statement","exists"],[""," "],["Identifier","$self"],["","->get_override_method_modifiers_map->{"],["Identifier","$method_name"],["","}) ? "],["Number","1"],[""," : "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_override_method_modifier "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$self"],["","->get_override_method_modifiers_map->{"],["Identifier","$method_name"],["","};\n}\n\n"],["Comment","## general list accessor ..."],["","\n\n"],["Keyword","sub "],["Function","get_method_modifier_list "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$modifier_type"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$accessor"],[""," = "],["String","\"get_"],["Identifier","${modifier_type}"],["String","_method_modifiers_map\""],["",";\n    "],["Statement","keys"],[""," "],["Identifier","%{$self"],["","->"],["Identifier","$accessor}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_meta_method_class "],["","{ "],["String","'Moose::Meta::Method::Meta'"],[""," }\n\n"],["Comment","## ------------------------------------------------------------------"],["","\n"],["Comment","## subroles"],["","\n\n"],["Identifier","$META"],["","->add_attribute("],["String","'roles'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'get_roles'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ [] },\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","add_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role"],["",") = "],["Identifier","@_"],["",";\n    (blessed("],["Identifier","$role"],["",") && "],["Identifier","$role"],["","->isa("],["String","'Moose::Meta::Role'"],["","))\n        || Moose->throw_error("],["String","\"Roles must be instances of Moose::Meta::Role\""],["",");\n    "],["Statement","push"],[""," "],["Identifier","@{$self"],["","->get_roles"],["Identifier","}"],[""," => "],["Identifier","$role"],["",";\n    "],["Identifier","$self"],["","->reset_package_cache_flag;\n}\n\n"],["Keyword","sub "],["Function","calculate_all_roles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%seen"],["",";\n    "],["Statement","grep"],[""," "],["Statement","{"],["","\n        !"],["Identifier","$seen{$_"],["","->name"],["Identifier","}"],["","++\n    "],["Statement","}"],[""," ("],["Identifier","$self"],["",", "],["Statement","map"],[""," "],["Statement","{"],["","\n                  "],["Identifier","$_"],["","->calculate_all_roles\n              "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->get_roles "],["Identifier","}"],["",");\n}\n\n"],["Keyword","sub "],["Function","does_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role"],["",") = "],["Identifier","@_"],["",";\n    ("],["Operator","defined"],[""," "],["Identifier","$role"],["",")\n        || Moose->throw_error("],["String","\"You must supply a role name to look for\""],["",");\n    "],["Statement","my"],[""," "],["Identifier","$role_name"],[""," = blessed "],["Identifier","$role"],[""," ? "],["Identifier","$role"],["","->name : "],["Identifier","$role"],["",";\n    "],["Comment","# if we are it,.. then return true"],["","\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$role_name"],[""," "],["Operator","eq"],[""," "],["Identifier","$self"],["","->name;\n    "],["Comment","# otherwise.. check our children"],["","\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ("],["Identifier","@{$self"],["","->get_roles"],["Identifier","}"],["",") {\n        "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$role"],["","->does_role("],["Identifier","$role_name"],["",");\n    }\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","find_method_by_name "],["","{ ("],["Statement","shift"],["",")->get_method("],["Identifier","@_"],["",") }\n\n"],["Comment","## ------------------------------------------------------------------"],["","\n"],["Comment","## role construction"],["","\n"],["Comment","## ------------------------------------------------------------------"],["","\n\n"],["Keyword","sub "],["Function","apply "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$other"],["",", "],["Identifier","%args"],["",") = "],["Identifier","@_"],["",";\n\n    (blessed("],["Identifier","$other"],["","))\n        || Moose->throw_error("],["String","\"You must pass in an blessed instance\""],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$application_class"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$other"],["","->isa("],["String","'Moose::Meta::Role'"],["",")) {\n        "],["Identifier","$application_class"],[""," = "],["Identifier","$self"],["","->application_to_role_class;\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","$other"],["","->isa("],["String","'Moose::Meta::Class'"],["",")) {\n        "],["Identifier","$application_class"],[""," = "],["Identifier","$self"],["","->application_to_class_class;\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$application_class"],[""," = "],["Identifier","$self"],["","->application_to_instance_class;\n    }\n\n    load_class("],["Identifier","$application_class"],["",");\n\n    "],["Conditional","if"],[""," ( "],["Statement","exists"],[""," "],["Identifier","$args{"],["String","'-excludes'"],["Identifier","}"],[""," ) {\n        "],["Comment","# I wish we had coercion here :)"],["","\n        "],["Identifier","$args{"],["String","'-excludes'"],["Identifier","}"],[""," = (\n            "],["Operator","ref"],[""," "],["Identifier","$args{"],["String","'-excludes'"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["","\n            ? "],["Identifier","$args{"],["String","'-excludes'"],["Identifier","}"],["","\n            : [ "],["Identifier","$args{"],["String","'-excludes'"],["Identifier","}"],[""," ]\n        );\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$application_class"],["","->new("],["Identifier","%args"],["",")->apply("],["Identifier","$self"],["",", "],["Identifier","$other"],["",", \\"],["Identifier","%args"],["",");\n}\n\n"],["Keyword","sub "],["Function","composition_class_roles "],["","{ }\n\n"],["Keyword","sub "],["Function","combine "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","@role_specs"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","require"],[""," Moose::Meta::Role::Composite;\n\n    "],["Statement","my"],[""," ("],["Identifier","@roles"],["",", "],["Identifier","%role_params"],["",");\n    "],["Repeat","while"],[""," ("],["Identifier","@role_specs"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$role"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@{"],[""," "],["Statement","splice"],[""," "],["Identifier","@role_specs"],["",", "],["Number","0"],["",", "],["Number","1"],[""," "],["Identifier","}"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$requested_role"],["","\n            = blessed "],["Identifier","$role"],["","\n            ? "],["Identifier","$role"],["","\n            : Class::MOP::class_of("],["Identifier","$role"],["",");\n\n        "],["Statement","my"],[""," "],["Identifier","$actual_role"],[""," = "],["Identifier","$requested_role"],["","->_role_for_combination("],["Identifier","$params"],["",");\n        "],["Statement","push"],[""," "],["Identifier","@roles"],[""," => "],["Identifier","$actual_role"],["",";\n\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$params"],["",";\n        "],["Identifier","$role_params{$actual_role"],["","->name"],["Identifier","}"],[""," = "],["Identifier","$params"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$c"],[""," = Moose::Meta::Role::Composite->new("],["String","roles"],[""," => \\"],["Identifier","@roles"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$c"],["","->apply_params(\\"],["Identifier","%role_params"],["",");\n}\n\n"],["Keyword","sub "],["Function","_role_for_combination "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","create "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'package'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","attributes"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",")\n        || confess "],["String","\"You must pass a HASH ref of attributes\""],["","\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","attributes"],["Identifier","}"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","methods"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",")\n        || confess "],["String","\"You must pass a HASH ref of methods\""],["","\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","methods"],["Identifier","}"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","roles"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",")\n        || confess "],["String","\"You must pass an ARRAY ref of roles\""],["","\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","roles"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$package"],["","      = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","package"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$roles"],["","        = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","roles"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$attributes"],["","   = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","attributes"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$methods"],["","      = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","methods"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta_name"],["","    = "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","meta_name"],["Identifier","}"],["","\n                         ? "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","meta_name"],["Identifier","}"],["","\n                         : "],["String","'meta'"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Identifier","$class"],["","->SUPER::create("],["Identifier","$package"],[""," => "],["Identifier","%options"],["",");\n\n    "],["Identifier","$meta"],["","->_add_meta_method("],["Identifier","$meta_name"],["",")\n        "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$meta_name"],["",";\n\n    "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$attributes"],["",") {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attribute_name"],[""," ("],["Statement","keys"],[""," "],["Identifier","%{$attributes}"],["",") {\n            "],["Statement","my"],[""," "],["Identifier","$attr"],[""," = "],["Identifier","$attributes->{$attribute_name}"],["",";\n            "],["Identifier","$meta"],["","->add_attribute(\n                "],["Identifier","$attribute_name"],[""," => blessed "],["Identifier","$attr"],[""," ? "],["Identifier","$attr"],[""," : "],["Identifier","%{$attr}"],[""," );\n        }\n    }\n\n    "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$methods"],["",") {\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$method_name"],[""," ("],["Statement","keys"],[""," "],["Identifier","%{$methods}"],["",") {\n            "],["Identifier","$meta"],["","->add_method("],["Identifier","$method_name"],["",", "],["Identifier","$methods->{$method_name}"],["",");\n        }\n    }\n\n    "],["Conditional","if"],[""," ("],["Identifier","$roles"],["",") {\n        Moose::Util::apply_all_roles("],["Identifier","$meta"],["",", "],["Identifier","@$roles"],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n}\n\n"],["Keyword","sub "],["Function","consumers "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@consumers"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$meta"],[""," (Class::MOP::get_all_metaclass_instances) {\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->name "],["Operator","eq"],[""," "],["Identifier","$self"],["","->name;\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Class'"],["",")\n                 || "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n        "],["Statement","push"],[""," "],["Identifier","@consumers"],["",", "],["Identifier","$meta"],["","->name\n            "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->does_role("],["Identifier","$self"],["","->name);\n    }\n    "],["Statement","return"],[""," "],["Identifier","@consumers"],["",";\n}\n\n"],["Comment","# "],["Todo","XXX:"],["Comment"," something more intelligent here?"],["","\n"],["Keyword","sub "],["Function","_anon_package_prefix "],["","{ "],["String","'Moose::Meta::Role::__ANON__::SERIAL::'"],[""," }\n\n"],["Keyword","sub "],["Function","create_anon_role "],["","{ "],["Statement","shift"],["","->create_anon("],["Identifier","@_"],["",") }\n"],["Keyword","sub "],["Function","is_anon_role     "],["","{ "],["Statement","shift"],["","->is_anon("],["Identifier","@_"],["",")     }\n\n"],["Keyword","sub "],["Function","_anon_cache_key "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Comment","# "],["Todo","XXX"],["Comment"," fix this duplication (see MMC::_anon_cache_key"],["","\n    "],["Statement","my"],[""," "],["Identifier","$roles"],[""," = Data::OptList::mkopt(("],["Identifier","$options{"],["String","roles"],["Identifier","}"],[""," || []), {\n        "],["String","moniker"],["","  => "],["String","'role'"],["",",\n        "],["String","val_test"],[""," => "],["Keyword","sub "],["","{ "],["Operator","ref"],["","("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") "],["Operator","eq"],[""," "],["String","'HASH'"],[""," },\n    });\n\n    "],["Statement","my"],[""," "],["Identifier","@role_keys"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$role_spec"],[""," ("],["Identifier","@$roles"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$role"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@$role_spec"],["",";\n        "],["Identifier","$params"],[""," = { "],["Identifier","%$params"],[""," };\n\n        "],["Statement","my"],[""," "],["Identifier","$key"],[""," = blessed("],["Identifier","$role"],["",") ? "],["Identifier","$role"],["","->name : "],["Identifier","$role"],["",";\n\n        "],["Conditional","if"],[""," ("],["Identifier","$params"],[""," && "],["Identifier","%$params"],["",") {\n            "],["Statement","my"],[""," "],["Identifier","$alias"],["","    = "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'-alias'"],["Identifier","}"],["","\n                        || "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'alias'"],["Identifier","}"],["","\n                        || {};\n            "],["Statement","my"],[""," "],["Identifier","$excludes"],[""," = "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'-excludes'"],["Identifier","}"],["","\n                        || "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'excludes'"],["Identifier","}"],["","\n                        || [];\n            "],["Identifier","$excludes"],[""," = ["],["Identifier","$excludes"],["","] "],["Conditional","unless"],[""," "],["Operator","ref"],["","("],["Identifier","$excludes"],["",") "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",";\n\n            "],["Conditional","if"],[""," ("],["Identifier","%$params"],["",") {\n                "],["Statement","warn"],[""," "],["String","\"Roles with parameters cannot be cached. Consider \""],["","\n                   . "],["String","\"applying the parameters before calling \""],["","\n                   . "],["String","\"create_anon_class, or using 'weaken => 0' instead\""],["",";\n                "],["Statement","return"],["",";\n            }\n\n            "],["Statement","my"],[""," "],["Identifier","$alias_key"],[""," = "],["Statement","join"],["","("],["String","'%'"],["",",\n                "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$alias->{$_}"],[""," "],["Statement","}"],[""," "],["Statement","sort"],[""," "],["Statement","keys"],[""," "],["Identifier","%$alias"],["","\n            );\n            "],["Statement","my"],[""," "],["Identifier","$excludes_key"],[""," = "],["Statement","join"],["","("],["String","'%'"],["",",\n                "],["Statement","sort"],[""," "],["Identifier","@$excludes"],["","\n            );\n            "],["Identifier","$key"],[""," .= "],["String","'<'"],[""," . "],["Statement","join"],["","("],["String","'+'"],["",", "],["String","'a'"],["",", "],["Identifier","$alias_key"],["",", "],["String","'e'"],["",", "],["Identifier","$excludes_key"],["",") . "],["String","'>'"],["",";\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@role_keys"],["",", "],["Identifier","$key"],["",";\n    }\n\n    "],["Comment","# Makes something like Role|Role::1"],["","\n    "],["Statement","return"],[""," "],["Statement","join"],["","("],["String","'|'"],["",", "],["Statement","sort"],[""," "],["Identifier","@role_keys"],["",");\n}\n\n"],["Comment","#####################################################################"],["","\n"],["Comment","## "],["Todo","NOTE:"],["","\n"],["Comment","## This is Moose::Meta::Role as defined by Moose (plus the use of"],["","\n"],["Comment","## MooseX::AttributeHelpers module). It is here as a reference to"],["","\n"],["Comment","## make it easier to see what is happening above with all the meta"],["","\n"],["Comment","## programming. - SL"],["","\n"],["Comment","#####################################################################"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'roles' => ("],["","\n"],["Comment","#     metaclass => 'Array',"],["","\n"],["Comment","#     reader    => 'get_roles',"],["","\n"],["Comment","#     isa       => 'ArrayRef[Moose::Meta::Role]',"],["","\n"],["Comment","#     default   => sub { [] },"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         'push' => 'add_role',"],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'excluded_roles_map' => ("],["","\n"],["Comment","#     metaclass => 'Hash',"],["","\n"],["Comment","#     reader    => 'get_excluded_roles_map',"],["","\n"],["Comment","#     isa       => 'HashRef[Str]',"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         # Not exactly set, cause it sets multiple"],["","\n"],["Comment","#         'set'    => 'add_excluded_roles',"],["","\n"],["Comment","#         'keys'   => 'get_excluded_roles_list',"],["","\n"],["Comment","#         'exists' => 'excludes_role',"],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'required_methods' => ("],["","\n"],["Comment","#     metaclass => 'Hash',"],["","\n"],["Comment","#     reader    => 'get_required_methods_map',"],["","\n"],["Comment","#     isa       => 'HashRef[Moose::Meta::Role::Method::Required]',"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         # not exactly set, or delete since it works for multiple"],["","\n"],["Comment","#         'set'    => 'add_required_methods',"],["","\n"],["Comment","#         'delete' => 'remove_required_methods',"],["","\n"],["Comment","#         'keys'   => 'get_required_method_list',"],["","\n"],["Comment","#         'exists' => 'requires_method',"],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","# # the before, around and after modifiers are"],["","\n"],["Comment","# # HASH keyed by method-name, with ARRAY of"],["","\n"],["Comment","# # CODE refs to apply in that order"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'before_method_modifiers' => ("],["","\n"],["Comment","#     metaclass => 'Hash',"],["","\n"],["Comment","#     reader    => 'get_before_method_modifiers_map',"],["","\n"],["Comment","#     isa       => 'HashRef[ArrayRef[CodeRef]]',"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         'keys'   => 'get_before_method_modifiers',"],["","\n"],["Comment","#         'exists' => 'has_before_method_modifiers',"],["","\n"],["Comment","#         # This actually makes sure there is an"],["","\n"],["Comment","#         # ARRAY at the given key, and pushed onto"],["","\n"],["Comment","#         # it. It also checks for duplicates as well"],["","\n"],["Comment","#         # 'add'  => 'add_before_method_modifier'"],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'after_method_modifiers' => ("],["","\n"],["Comment","#     metaclass => 'Hash',"],["","\n"],["Comment","#     reader    =>'get_after_method_modifiers_map',"],["","\n"],["Comment","#     isa       => 'HashRef[ArrayRef[CodeRef]]',"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         'keys'   => 'get_after_method_modifiers',"],["","\n"],["Comment","#         'exists' => 'has_after_method_modifiers',"],["","\n"],["Comment","#         # This actually makes sure there is an"],["","\n"],["Comment","#         # ARRAY at the given key, and pushed onto"],["","\n"],["Comment","#         # it. It also checks for duplicates as well"],["","\n"],["Comment","#         # 'add'  => 'add_after_method_modifier'"],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'around_method_modifiers' => ("],["","\n"],["Comment","#     metaclass => 'Hash',"],["","\n"],["Comment","#     reader    =>'get_around_method_modifiers_map',"],["","\n"],["Comment","#     isa       => 'HashRef[ArrayRef[CodeRef]]',"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         'keys'   => 'get_around_method_modifiers',"],["","\n"],["Comment","#         'exists' => 'has_around_method_modifiers',"],["","\n"],["Comment","#         # This actually makes sure there is an"],["","\n"],["Comment","#         # ARRAY at the given key, and pushed onto"],["","\n"],["Comment","#         # it. It also checks for duplicates as well"],["","\n"],["Comment","#         # 'add'  => 'add_around_method_modifier'"],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","# # override is similar to the other modifiers"],["","\n"],["Comment","# # except that it is not an ARRAY of code refs"],["","\n"],["Comment","# # but instead just a single name->code mapping"],["","\n"],["Comment","#"],["","\n"],["Comment","# has 'override_method_modifiers' => ("],["","\n"],["Comment","#     metaclass => 'Hash',"],["","\n"],["Comment","#     reader    =>'get_override_method_modifiers_map',"],["","\n"],["Comment","#     isa       => 'HashRef[CodeRef]',"],["","\n"],["Comment","#     provides  => {"],["","\n"],["Comment","#         'keys'   => 'get_override_method_modifier',"],["","\n"],["Comment","#         'exists' => 'has_override_method_modifier',"],["","\n"],["Comment","#         'add'    => 'add_override_method_modifier', # checks for local method .."],["","\n"],["Comment","#     }"],["","\n"],["Comment","# );"],["","\n"],["Comment","#"],["","\n"],["Comment","#####################################################################"],["","\n\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The Moose Role metaclass"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Role - The Moose Role metaclass\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class is a subclass of "],["Identifier","L<Class::MOP::Module>"],[""," that provides\nadditional Moose-specific functionality.\n\nIts API looks a lot like "],["Identifier","L<Moose::Meta::Class>"],["",", but internally it\nimplements many things differently. This may change in the future.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::Role>"],[""," is a subclass of "],["Identifier","L<Class::MOP::Module>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=head2"],[""," "],["String","Construction"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Role->initialize($role_name) >>"],["","\n\nThis method creates a new role object with the provided name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Role->combine( [ $role => { ... } ], [ $role ], ... ) >>"],["","\n\nThis method accepts a list of array references. Each array reference\nshould contain a role name or "],["Identifier","L<Moose::Meta::Role>"],[""," object as its first element. The second element is\nan optional hash reference. The hash reference can contain "],["Identifier","C<-excludes>"],["","\nand "],["Identifier","C<-alias>"],[""," keys to control how methods are composed from the role.\n\nThe return value is a new "],["Identifier","L<Moose::Meta::Role::Composite>"],[""," that\nrepresents the combined roles.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->composition_class_roles >>"],["","\n\nWhen combining multiple roles using "],["Identifier","C<combine>"],["",", this method is used to obtain a\nlist of role names to be applied to the "],["Identifier","L<Moose::Meta::Role::Composite>"],["","\ninstance returned by "],["Identifier","C<combine>"],["",". The default implementation returns an empty\nlist. Extensions that need to hook into role combination may wrap this method\nto return additional role names.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Role->create($name, %options) >>"],["","\n\nThis method is identical to the "],["Identifier","L<Moose::Meta::Class>"],[""," "],["Identifier","C<create>"],["","\nmethod.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Role->create_anon_role >>"],["","\n\nThis method is identical to the "],["Identifier","L<Moose::Meta::Class>"],["","\n"],["Identifier","C<create_anon_class>"],[""," method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->is_anon_role >>"],["","\n\nReturns true if the role is an anonymous role.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->consumers >>"],["","\n\nReturns a list of names of classes and roles which consume this role.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Role application"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->apply( $thing, @options ) >>"],["","\n\nThis method applies a role to the given "],["Identifier","C<$thing>"],["",". That can be another\n"],["Identifier","L<Moose::Meta::Role>"],["",", object, a "],["Identifier","L<Moose::Meta::Class>"],[""," object, or a\n(non-meta) object instance.\n\nThe options are passed directly to the constructor for the appropriate\n"],["Identifier","L<Moose::Meta::Role::Application>"],[""," subclass.\n\nNote that this will apply the role even if the "],["Identifier","C<$thing>"],[""," in question already\n"],["Identifier","C<does>"],[""," this role.  "],["Identifier","L<Moose::Util/does_role>"],[""," is a convenient wrapper for\nfinding out if role application is necessary.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Roles and other roles"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_roles >>"],["","\n\nThis returns an array reference of roles which this role does. This\nlist may include duplicates.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->calculate_all_roles >>"],["","\n\nThis returns a "],["Identifier","I<unique>"],[""," list of all roles that this role does, and\nall the roles that its roles do.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->does_role($role) >>"],["","\n\nGiven a role "],["Identifier","I<name>"],[""," or "],["Identifier","L<Moose::Meta::Role>"],[""," object, returns true if this role\ndoes the given role.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_role($role) >>"],["","\n\nGiven a "],["Identifier","L<Moose::Meta::Role>"],[""," object, this adds the role to the list of\nroles that the role does.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_excluded_roles_list >>"],["","\n\nReturns a list of role names which this role excludes.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->excludes_role($role_name) >>"],["","\n\nGiven a role "],["Identifier","I<name>"],["",", returns true if this role excludes the named\nrole.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_excluded_roles(@role_names) >>"],["","\n\nGiven one or more role names, adds those roles to the list of excluded\nroles.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Methods"],["","\n\nThe methods for dealing with a role's methods are all identical in API\nand behavior to the same methods in "],["Identifier","L<Class::MOP::Class>"],["",".\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->method_metaclass >>"],["","\n\nReturns the method metaclass name for the role. This defaults to\n"],["Identifier","L<Moose::Meta::Role::Method>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_method($name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_method($name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_method( $name, $body ) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_method_list >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->find_method_by_name($name) >>"],["","\n\nThese methods are all identical to the methods of the same name in\n"],["Identifier","L<Class::MOP::Package>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Attributes"],["","\n\nAs with methods, the methods for dealing with a role's attribute are\nall identical in API and behavior to the same methods in\n"],["Identifier","L<Class::MOP::Class>"],["",".\n\nHowever, attributes stored in this class are "],["Identifier","I<not>"],[""," stored as\nobjects. Rather, the attribute definition is stored as a hash\nreference. When a role is composed into a class, this hash reference\nis passed directly to the metaclass's "],["Identifier","C<add_attribute>"],[""," method.\n\nThis is quite likely to change in the future.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_attribute($attribute_name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_attribute($attribute_name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_attribute_list >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_attribute($name, %options) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->remove_attribute($attribute_name) >>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Overload introspection and creation"],["","\n\nThe methods for dealing with a role's overloads are all identical in API\nand behavior to the same methods in "],["Identifier","L<Class::MOP::Class>"],["",". Note that these are\nnot particularly useful (yet), because overloads do not participate in role\ncomposition.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->is_overloaded >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_overloaded_operator($op) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_overloaded_operator($op) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_overload_list >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_all_overloaded_operators >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_overloaded_operator($op, $impl) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->remove_overloaded_operator($op) >>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Required methods"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_required_method_list >>"],["","\n\nReturns the list of methods required by the role.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->requires_method($name) >>"],["","\n\nReturns true if the role requires the named method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_required_methods(@names) >>"],["","\n\nAdds the named methods to the role's list of required methods.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->remove_required_methods(@names) >>"],["","\n\nRemoves the named methods from the role's list of required methods.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_conflicting_method(%params) >>"],["","\n\nInstantiate the parameters as a "],["Identifier","L<Moose::Meta::Role::Method::Conflicting>"],["","\nobject, then add it to the required method list.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Method modifiers"],["","\n\nThese methods act like their counterparts in "],["Identifier","L<Class::MOP::Class>"],[""," and\n"],["Identifier","L<Moose::Meta::Class>"],["",".\n\nHowever, method modifiers are simply stored internally, and are not\napplied until the role itself is applied to a class.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_after_method_modifier($method_name, $method) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_around_method_modifier($method_name, $method) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_before_method_modifier($method_name, $method) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->add_override_method_modifier($method_name, $method) >>"],["","\n\nThese methods all add an appropriate modifier to the internal list of\nmodifiers.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_after_method_modifiers >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_around_method_modifiers >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_before_method_modifiers >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->has_override_method_modifier >>"],["","\n\nReturn true if the role has any modifiers of the given type.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_after_method_modifiers($method_name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_around_method_modifiers($method_name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_before_method_modifiers($method_name) >>"],["","\n\nGiven a method name, returns a list of the appropriate modifiers for\nthat method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metarole->get_override_method_modifier($method_name) >>"],["","\n\nGiven a method name, returns the override method modifier for that\nmethod, if it has one.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Introspection"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Role->meta >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Class>"],[""," instance for this class.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]