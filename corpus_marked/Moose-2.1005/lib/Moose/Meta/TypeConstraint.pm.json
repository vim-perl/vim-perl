[["","\n"],["Statement","package"],["Type"," Moose::Meta::TypeConstraint"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use overload"],[""," "],["String","'0+'"],["","     => "],["Keyword","sub "],["","{ refaddr("],["Statement","shift"],["",") }, "],["Comment","# id an object"],["","\n             "],["String","'\"\"'"],["","     => "],["Keyword","sub "],["","{ "],["Statement","shift"],["","->name },   "],["Comment","# stringify to tc name"],["","\n             "],["String","bool"],["","     => "],["Keyword","sub "],["","{ "],["Number","1"],[""," },\n             "],["String","fallback"],[""," => "],["Number","1"],["",";\n\n"],["Statement","use "],["","Carp "],["String","qw(confess)"],["",";\n"],["Statement","use "],["","Class::Load "],["String","qw(load_class)"],["",";\n"],["Statement","use "],["","Eval::Closure;\n"],["Statement","use "],["","Scalar::Util "],["String","qw(blessed refaddr)"],["",";\n"],["Statement","use "],["","Sub::Name "],["String","qw(subname)"],["",";\n"],["Statement","use "],["","Try::Tiny;\n\n"],["Statement","use base"],[""," "],["String","qw(Class::MOP::Object)"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'name'"],["","       => (\n    "],["String","reader"],[""," => "],["String","'name'"],["",",\n    Class::MOP::_definition_context(),\n));\n__PACKAGE__->meta->add_attribute("],["String","'parent'"],["","     => (\n    "],["String","reader"],["","    => "],["String","'parent'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_parent'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Statement","my"],[""," "],["Identifier","$null_constraint"],[""," = "],["Keyword","sub "],["","{ "],["Number","1"],[""," };\n__PACKAGE__->meta->add_attribute("],["String","'constraint'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'constraint'"],["",",\n    "],["String","writer"],["","  => "],["String","'_set_constraint'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ "],["Identifier","$null_constraint"],[""," },\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'message'"],["","   => (\n    "],["String","accessor"],["","  => "],["String","'message'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_message'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'_default_message'"],[""," => (\n    "],["String","accessor"],["","  => "],["String","'_default_message'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Comment","# can't make this a default because it has to close over the type name, and"],["","\n"],["Comment","# cmop attributes don't have lazy"],["","\n"],["Statement","my"],[""," "],["Identifier","$_default_message_generator"],[""," = "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Statement","shift"],["",";\n    "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$value"],[""," = "],["Statement","shift"],["",";\n        "],["Comment","# have to load it late like this, since it uses Moose itself"],["","\n        "],["Statement","my"],[""," "],["Identifier","$can_partialdump"],[""," = try {\n            "],["Comment","# versions prior to 0.14 had a potential infinite loop bug"],["","\n            load_class("],["String","'Devel::PartialDump'"],["",", { "],["String","-version"],[""," => "],["Float","0.14"],[""," });\n            "],["Number","1"],["",";\n        };\n        "],["Conditional","if"],[""," ("],["Identifier","$can_partialdump"],["",") {\n            "],["Identifier","$value"],[""," = Devel::PartialDump->new->"],["Statement","dump"],["","("],["Identifier","$value"],["",");\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$value"],[""," = ("],["Operator","defined"],[""," "],["Identifier","$value"],[""," ? overload::StrVal("],["Identifier","$value"],["",") : "],["String","'undef'"],["",");\n        }\n        "],["Statement","return"],[""," "],["String","\"Validation failed for '\""],[""," . "],["Identifier","$name"],[""," . "],["String","\"' with value "],["Identifier","$value"],["String","\""],["",";\n    }\n};\n__PACKAGE__->meta->add_attribute("],["String","'coercion'"],["","   => (\n    "],["String","accessor"],["","  => "],["String","'coercion'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_coercion'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'hand_optimized_type_constraint'"],[""," => (\n    "],["String","init_arg"],["","  => "],["String","'optimized'"],["",",\n    "],["String","accessor"],["","  => "],["String","'hand_optimized_type_constraint'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_hand_optimized_type_constraint'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'inlined'"],[""," => (\n    "],["String","init_arg"],["","  => "],["String","'inlined'"],["",",\n    "],["String","accessor"],["","  => "],["String","'inlined'"],["",",\n    "],["String","predicate"],[""," => "],["String","'_has_inlined_type_constraint'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'inline_environment'"],[""," => (\n    "],["String","init_arg"],[""," => "],["String","'inline_environment'"],["",",\n    "],["String","accessor"],[""," => "],["String","'_inline_environment'"],["",",\n    "],["String","default"],["","  => "],["Keyword","sub "],["","{ {} },\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","parents "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->parent;\n}\n\n"],["Comment","# private accessors"],["","\n\n__PACKAGE__->meta->add_attribute("],["String","'compiled_type_constraint'"],[""," => (\n    "],["String","accessor"],["","  => "],["String","'_compiled_type_constraint'"],["",",\n    "],["String","predicate"],[""," => "],["String","'_has_compiled_type_constraint'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'package_defined_in'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'_package_defined_in'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$first"],["",", "],["Identifier","@rest"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = "],["Operator","ref"],[""," "],["Identifier","$first"],[""," ? "],["Identifier","%$first"],[""," : "],["Identifier","$first"],[""," ? ("],["Identifier","$first"],["",", "],["Identifier","@rest"],["",") : ();\n    "],["Identifier","$args{"],["String","name"],["Identifier","}"],[""," = "],["Identifier","$args{"],["String","name"],["Identifier","}"],[""," ? "],["String","\""],["Identifier","$args{"],["String","name"],["Identifier","}"],["String","\""],[""," : "],["String","\"__ANON__\""],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$args{"],["String","optimized"],["Identifier","}"],[""," ) {\n        Moose::Deprecated::deprecated(\n            "],["String","feature"],[""," => "],["String","'optimized type constraint sub ref'"],["",",\n            "],["String","message"],[""," =>\n                "],["String","'Providing an optimized subroutine ref for type constraints is deprecated.'"],["","\n                . "],["String","' Use the inlining feature (inline_as) instead.'"],["","\n        );\n    }\n\n    "],["Conditional","if"],[""," ( "],["Statement","exists"],[""," "],["Identifier","$args{"],["String","message"],["Identifier","}"],["","\n      && (!"],["Operator","ref"],["","("],["Identifier","$args{"],["String","message"],["Identifier","}"],["",") || "],["Operator","ref"],["","("],["Identifier","$args{"],["String","message"],["Identifier","}"],["",") "],["Operator","ne"],[""," "],["String","'CODE'"],["",") ) {\n        confess("],["String","\"The 'message' parameter must be a coderef\""],["",");\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = "],["Identifier","$class"],["","->_new("],["Identifier","%args"],["",");\n    "],["Identifier","$self"],["","->compile_type_constraint()\n        "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->_has_compiled_type_constraint;\n    "],["Identifier","$self"],["","->_default_message("],["Identifier","$_default_message_generator"],["","->("],["Identifier","$self"],["","->name))\n        "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_message;\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n\n\n"],["Keyword","sub "],["Function","coerce "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$coercion"],[""," = "],["Identifier","$self"],["","->coercion;\n\n    "],["Conditional","unless"],[""," ("],["Identifier","$coercion"],["",") {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"Cannot coerce without a type coercion\""],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->check("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$coercion"],["","->coerce("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","assert_coerce "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$result"],[""," = "],["Identifier","$self"],["","->coerce("],["Identifier","@_"],["",");\n\n    "],["Identifier","$self"],["","->assert_valid("],["Identifier","$result"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$result"],["",";\n}\n\n"],["Keyword","sub "],["Function","check "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$constraint_subref"],[""," = "],["Identifier","$self"],["","->_compiled_type_constraint;\n    "],["Statement","return"],[""," "],["Identifier","$constraint_subref"],["","->("],["Identifier","@args"],["",") ? "],["Number","1"],[""," : "],["Operator","undef"],["",";\n}\n\n"],["Keyword","sub "],["Function","validate "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->_compiled_type_constraint->("],["Identifier","$value"],["",")) {\n        "],["Statement","return"],[""," "],["Operator","undef"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$self"],["","->get_message("],["Identifier","$value"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","can_be_inlined "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_parent && "],["Identifier","$self"],["","->constraint == "],["Identifier","$null_constraint"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->parent->can_be_inlined;\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_has_inlined_type_constraint;\n}\n\n"],["Keyword","sub "],["Function","_inline_check "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["Identifier","$self"],["","->can_be_inlined ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error( "],["String","'Cannot inline a type constraint check for '"],[""," . "],["Identifier","$self"],["","->name );\n    }\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_parent && "],["Identifier","$self"],["","->constraint == "],["Identifier","$null_constraint"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->parent->_inline_check("],["Identifier","@_"],["",");\n    }\n\n    "],["Statement","return"],[""," "],["String","'( do { '"],[""," . "],["Identifier","$self"],["","->inlined->( "],["Identifier","$self"],["",", "],["Identifier","@_"],[""," ) . "],["String","' } )'"],["",";\n}\n\n"],["Keyword","sub "],["Function","inline_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_parent && "],["Identifier","$self"],["","->constraint == "],["Identifier","$null_constraint"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->parent->inline_environment;\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_inline_environment;\n}\n\n"],["Keyword","sub "],["Function","assert_valid "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$error"],[""," = "],["Identifier","$self"],["","->validate("],["Identifier","$value"],["",");\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," ! "],["Operator","defined"],[""," "],["Identifier","$error"],["",";\n\n    "],["Statement","require"],[""," Moose;\n    Moose->throw_error("],["Identifier","$error"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_message "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$msg"],[""," = "],["Identifier","$self"],["","->has_message\n        ? "],["Identifier","$self"],["","->message\n        : "],["Identifier","$self"],["","->_default_message;\n    "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$value"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$msg"],["","->("],["Identifier","$value"],["",");\n}\n\n"],["Comment","## type predicates ..."],["","\n\n"],["Keyword","sub "],["Function","equals "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$other"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",") "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],[""," == "],["Identifier","$other"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_hand_optimized_type_constraint "],["Operator","and"],[""," "],["Identifier","$other"],["","->has_hand_optimized_type_constraint ) {\n        "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->hand_optimized_type_constraint == "],["Identifier","$other"],["","->hand_optimized_type_constraint;\n    }\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->constraint == "],["Identifier","$other"],["","->constraint;\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_parent ) {\n        "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->has_parent;\n        "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->parent->equals( "],["Identifier","$other"],["","->parent );\n    } "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$other"],["","->has_parent;\n    }\n\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","is_a_type_of "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$type"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",") "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    ("],["Identifier","$self"],["","->equals("],["Identifier","$type"],["",") || "],["Identifier","$self"],["","->is_subtype_of("],["Identifier","$type"],["","));\n}\n\n"],["Keyword","sub "],["Function","is_subtype_of "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$type"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",") "],["Operator","or"],[""," "],["Statement","return"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$current"],[""," = "],["Identifier","$self"],["",";\n\n    "],["Repeat","while"],[""," ("],["Statement","my"],[""," "],["Identifier","$parent"],[""," = "],["Identifier","$current"],["","->parent) {\n        "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$parent"],["","->equals("],["Identifier","$type"],["",");\n        "],["Identifier","$current"],[""," = "],["Identifier","$parent"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Comment","## compiling the type constraint"],["","\n\n"],["Keyword","sub "],["Function","compile_type_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->_compiled_type_constraint("],["Identifier","$self"],["","->_actually_compile_type_constraint);\n}\n\n"],["Comment","## type compilers ..."],["","\n\n"],["Keyword","sub "],["Function","_actually_compile_type_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_compile_hand_optimized_type_constraint\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_hand_optimized_type_constraint;\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->can_be_inlined ) {\n        "],["Statement","return"],[""," eval_closure(\n            "],["String","source"],["","      => "],["String","'sub { '"],[""," . "],["Identifier","$self"],["","->_inline_check("],["String","'$_[0]'"],["",") . "],["String","' }'"],["",",\n            "],["String","environment"],[""," => "],["Identifier","$self"],["","->inline_environment,\n        );\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$check"],[""," = "],["Identifier","$self"],["","->constraint;\n    "],["Conditional","unless"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$check"],[""," ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error( "],["String","\"Could not compile type constraint '\""],["","\n                . "],["Identifier","$self"],["","->name\n                . "],["String","\"' because no constraint check\""],[""," );\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_compile_subtype("],["Identifier","$check"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_parent;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_compile_type("],["Identifier","$check"],["",");\n}\n\n"],["Keyword","sub "],["Function","_compile_hand_optimized_type_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$type_constraint"],[""," = "],["Identifier","$self"],["","->hand_optimized_type_constraint;\n\n    "],["Conditional","unless"],[""," ( "],["Operator","ref"],[""," "],["Identifier","$type_constraint"],[""," ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"Hand optimized type constraint is not a code reference\""],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$type_constraint"],["",";\n}\n\n"],["Keyword","sub "],["Function","_compile_subtype "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$check"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Comment","# gather all the parent constraints in order"],["","\n    "],["Statement","my"],[""," "],["Identifier","@parents"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$optimized_parent"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$parent"],[""," ("],["Identifier","$self"],["","->_collect_all_parents) {\n        "],["Comment","# if a parent is optimized, the optimized constraint already includes"],["","\n        "],["Comment","# all of its parents tcs, so we can break the loop"],["","\n        "],["Conditional","if"],[""," ("],["Identifier","$parent"],["","->has_hand_optimized_type_constraint) {\n            "],["Statement","push"],[""," "],["Identifier","@parents"],[""," => "],["Identifier","$optimized_parent"],[""," = "],["Identifier","$parent"],["","->hand_optimized_type_constraint;\n            "],["Statement","last"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Statement","push"],[""," "],["Identifier","@parents"],[""," => "],["Identifier","$parent"],["","->constraint;\n        }\n    }\n\n    "],["Identifier","@parents"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," != "],["Identifier","$null_constraint"],[""," "],["Statement","}"],[""," "],["Statement","reverse"],[""," "],["Identifier","@parents"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["Identifier","@parents"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->_compile_type("],["Identifier","$check"],["",");\n    } "],["Conditional","elsif"],["","( "],["Identifier","$optimized_parent"],[""," "],["Operator","and"],[""," "],["Identifier","@parents"],[""," == "],["Number","1"],[""," ) {\n        "],["Comment","# the case of just one optimized parent is optimized to prevent"],["","\n        "],["Comment","# looping and the unnecessary localization"],["","\n        "],["Conditional","if"],[""," ( "],["Identifier","$check"],[""," == "],["Identifier","$null_constraint"],[""," ) {\n            "],["Statement","return"],[""," "],["Identifier","$optimized_parent"],["",";\n        } "],["Conditional","else"],[""," {\n            "],["Statement","return"],[""," subname("],["Identifier","$self"],["","->name, "],["Keyword","sub "],["","{\n                "],["Statement","return"],[""," "],["Operator","undef"],[""," "],["Conditional","unless"],[""," "],["Identifier","$optimized_parent"],["","->("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",");\n                "],["Statement","my"],[""," ("],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n                "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$args["],["Number","0"],["Identifier","]"],["",";\n                "],["Identifier","$check"],["","->("],["Identifier","@args"],["",");\n            });\n        }\n    } "],["Conditional","else"],[""," {\n        "],["Comment","# general case, check all the constraints, from the first parent to ourselves"],["","\n        "],["Statement","my"],[""," "],["Identifier","@checks"],[""," = "],["Identifier","@parents"],["",";\n        "],["Statement","push"],[""," "],["Identifier","@checks"],["",", "],["Identifier","$check"],[""," "],["Conditional","if"],[""," "],["Identifier","$check"],[""," != "],["Identifier","$null_constraint"],["",";\n        "],["Statement","return"],[""," subname("],["Identifier","$self"],["","->"],["String","name"],[""," => "],["Keyword","sub "],["","{\n            "],["Statement","my"],[""," ("],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n            "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$args["],["Number","0"],["Identifier","]"],["",";\n            "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$check"],[""," ("],["Identifier","@checks"],["",") {\n                "],["Statement","return"],[""," "],["Operator","undef"],[""," "],["Conditional","unless"],[""," "],["Identifier","$check"],["","->("],["Identifier","@args"],["",");\n            }\n            "],["Statement","return"],[""," "],["Number","1"],["",";\n        });\n    }\n}\n\n"],["Keyword","sub "],["Function","_compile_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$check"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$check"],[""," "],["Conditional","if"],[""," "],["Identifier","$check"],[""," == "],["Identifier","$null_constraint"],["","; "],["Comment","# Item, Any"],["","\n\n    "],["Statement","return"],[""," subname("],["Identifier","$self"],["","->"],["String","name"],[""," => "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," ("],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n        "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$args["],["Number","0"],["Identifier","]"],["",";\n        "],["Identifier","$check"],["","->("],["Identifier","@args"],["",");\n    });\n}\n\n"],["Comment","## other utils ..."],["","\n\n"],["Keyword","sub "],["Function","_collect_all_parents "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@parents"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$current"],[""," = "],["Identifier","$self"],["","->parent;\n    "],["Repeat","while"],[""," ("],["Operator","defined"],[""," "],["Identifier","$current"],["",") {\n        "],["Statement","push"],[""," "],["Identifier","@parents"],[""," => "],["Identifier","$current"],["",";\n        "],["Identifier","$current"],[""," = "],["Identifier","$current"],["","->parent;\n    }\n    "],["Statement","return"],[""," "],["Identifier","@parents"],["",";\n}\n\n"],["Keyword","sub "],["Function","create_child_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","%opts"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->new("],["Identifier","%opts"],["",", "],["String","parent"],[""," => "],["Identifier","$self"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The Moose Type Constraint metaclass"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint - The Moose Type Constraint metaclass\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class represents a single type constraint. Moose's built-in type\nconstraints, as well as constraints you define, are all stored in a\n"],["Identifier","L<Moose::Meta::TypeConstraint::Registry>"],[""," object as objects of this\nclass.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint>"],[""," is a subclass of "],["Identifier","L<Class::MOP::Object>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeConstraint->new(%options) >>"],["","\n\nThis creates a new type constraint based on the provided "],["Identifier","C<%options>"],["",":\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* name"],["","\n\nThe constraint name. If a name is not provided, it will be set to\n\"__ANON__\".\n\n"],["Statement","=item"],[""," "],["String","* parent"],["","\n\nA "],["Identifier","C<Moose::Meta::TypeConstraint>"],[""," object which is the parent type for\nthe type being created. This is optional.\n\n"],["Statement","=item"],[""," "],["String","* constraint"],["","\n\nThis is the subroutine reference that implements the actual constraint\ncheck. This defaults to a subroutine which always returns true.\n\n"],["Statement","=item"],[""," "],["String","* message"],["","\n\nA subroutine reference which is used to generate an error message when\nthe constraint fails. This is optional.\n\n"],["Statement","=item"],[""," "],["String","* coercion"],["","\n\nA "],["Identifier","L<Moose::Meta::TypeCoercion>"],[""," object representing the coercions to\nthe type. This is optional.\n\n"],["Statement","=item"],[""," "],["String","* inlined"],["","\n\nA subroutine which returns a string suitable for inlining this type\nconstraint. It will be called as a method on the type constraint object, and\nwill receive a single additional parameter, a variable name to be tested\n(usually "],["Identifier","C<\"$_\">"],[""," or "],["Identifier","C<\"$_[0]\">"],["",".\n\nThis is optional.\n\n"],["Statement","=item"],[""," "],["String","* inline_environment"],["","\n\nA hash reference of variables to close over. The keys are variables names, and\nthe values are "],["Identifier","I<references>"],[""," to the variables.\n\n"],["Statement","=item"],[""," "],["String","* optimized"],["","\n\n"],["Identifier","B<This option is deprecated.>"],["","\n\nThis is a variant of the "],["Identifier","C<constraint>"],[""," parameter that is somehow\noptimized. Typically, this means incorporating both the type's\nconstraint and all of its parents' constraints into a single\nsubroutine reference.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->equals($type_name_or_object) >>"],["","\n\nReturns true if the supplied name or type object is the same as the\ncurrent type.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->is_subtype_of($type_name_or_object) >>"],["","\n\nReturns true if the supplied name or type object is a parent of the\ncurrent type.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->is_a_type_of($type_name_or_object) >>"],["","\n\nReturns true if the given type is the same as the current type, or is\na parent of the current type. This is a shortcut for checking\n"],["Identifier","C<equals>"],[""," and "],["Identifier","C<is_subtype_of>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->coerce($value) >>"],["","\n\nThis will attempt to coerce the value to the type. If the type does not\nhave any defined coercions this will throw an error.\n\nIf no coercion can produce a value matching "],["Identifier","C<$constraint>"],["",", the original\nvalue is returned.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->assert_coerce($value) >>"],["","\n\nThis method behaves just like "],["Identifier","C<coerce>"],["",", but if the result is not valid\naccording to "],["Identifier","C<$constraint>"],["",", an error is thrown.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->check($value) >>"],["","\n\nReturns true if the given value passes the constraint for the type.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->validate($value) >>"],["","\n\nThis is similar to "],["Identifier","C<check>"],["",". However, if the type "],["Identifier","I<is valid>"],[""," then the\nmethod returns an explicit "],["Identifier","C<undef>"],["",". If the type is not valid, we call\n"],["Identifier","C<< $self->get_message($value) >>"],[""," internally to generate an error\nmessage.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->assert_valid($value) >>"],["","\n\nLike "],["Identifier","C<check>"],[""," and "],["Identifier","C<validate>"],["",", this method checks whether "],["Identifier","C<$value>"],[""," is\nvalid under the constraint.  If it is, it will return true.  If it is not,\nan exception will be thrown with the results of\n"],["Identifier","C<< $self->get_message($value) >>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->name >>"],["","\n\nReturns the type's name, as provided to the constructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->parent >>"],["","\n\nReturns the type's parent, as provided to the constructor, if any.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->has_parent >>"],["","\n\nReturns true if the type has a parent type.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->parents >>"],["","\n\nReturns all of the types parents as an list of type constraint objects.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->constraint >>"],["","\n\nReturns the type's constraint, as provided to the constructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->get_message($value) >>"],["","\n\nThis generates a method for the given value. If the type does not have\nan explicit message, we generate a default message.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->has_message >>"],["","\n\nReturns true if the type has a message.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->message >>"],["","\n\nReturns the type's message as a subroutine reference.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->coercion >>"],["","\n\nReturns the type's "],["Identifier","L<Moose::Meta::TypeCoercion>"],[""," object, if one\nexists.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->has_coercion >>"],["","\n\nReturns true if the type has a coercion.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->can_be_inlined >>"],["","\n\nReturns true if this type constraint can be inlined. A type constraint which\nsubtypes an inlinable constraint and does not add an additional constraint\n\"inherits\" its parent type's inlining.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->hand_optimized_type_constraint >>"],["","\n\n"],["Identifier","B<This method is deprecated.>"],["","\n\nReturns the type's hand optimized constraint, as provided to the\nconstructor via the "],["Identifier","C<optimized>"],[""," option.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->has_hand_optimized_type_constraint >>"],["","\n\n"],["Identifier","B<This method is deprecated.>"],["","\n\nReturns true if the type has an optimized constraint.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->create_child_type(%options) >>"],["","\n\nThis returns a new type constraint of the same class using the\nprovided "],["Identifier","C<%options>"],["",". The "],["Identifier","C<parent>"],[""," option will be the current type.\n\nThis method exists so that subclasses of this class can override this\nbehavior and change how child types are created.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]