[["","\n"],["Statement","package"],["Type"," Moose::Meta::Class"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Class::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Class::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Class::Load "],["String","qw(load_class)"],["",";\n"],["Statement","use "],["","Class::MOP;\n"],["Statement","use "],["","Carp "],["String","qw( confess )"],["",";\n"],["Statement","use "],["","Data::OptList;\n"],["Statement","use "],["","List::Util "],["String","qw( first )"],["",";\n"],["Statement","use "],["","List::MoreUtils "],["String","qw( any all uniq first_index )"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n\n"],["Statement","use "],["","Moose::Meta::Method::Overridden;\n"],["Statement","use "],["","Moose::Meta::Method::Augmented;\n"],["Statement","use "],["","Moose::Error::Default;\n"],["Statement","use "],["","Moose::Meta::Class::Immutable::Trait;\n"],["Statement","use "],["","Moose::Meta::Method::Constructor;\n"],["Statement","use "],["","Moose::Meta::Method::Destructor;\n"],["Statement","use "],["","Moose::Meta::Method::Meta;\n"],["Statement","use "],["","Moose::Util;\n"],["Statement","use "],["","Class::MOP::MiniTrait;\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Class'"],["",";\n\nClass::MOP::MiniTrait::apply(__PACKAGE__, "],["String","'Moose::Meta::Object::Trait'"],["",");\n\n__PACKAGE__->meta->add_attribute("],["String","'roles'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'roles'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ [] },\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'role_applications'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'_get_role_applications'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ [] },\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute(\n    Class::MOP::Attribute->new("],["String","'immutable_trait'"],[""," => (\n        "],["String","accessor"],[""," => "],["String","\"immutable_trait\""],["",",\n        "],["String","default"],["","  => "],["String","'Moose::Meta::Class::Immutable::Trait'"],["",",\n        Class::MOP::_definition_context(),\n    ))\n);\n\n__PACKAGE__->meta->add_attribute("],["String","'constructor_class'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'constructor_class'"],["",",\n    "],["String","default"],["","  => "],["String","'Moose::Meta::Method::Constructor'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'destructor_class'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'destructor_class'"],["",",\n    "],["String","default"],["","  => "],["String","'Moose::Meta::Method::Destructor'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'error_class'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'error_class'"],["",",\n    "],["String","default"],["","  => "],["String","'Moose::Error::Default'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","initialize "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@_"],["",";\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'package'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%opts"],[""," = "],["Identifier","@args"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$package"],[""," = "],["Statement","delete"],[""," "],["Identifier","$opts{"],["String","package"],["Identifier","}"],["",";\n    "],["Statement","return"],[""," Class::MOP::get_metaclass_by_name("],["Identifier","$package"],["",")\n        || "],["Identifier","$class"],["","->SUPER::initialize("],["Identifier","$package"],["",",\n                "],["String","'attribute_metaclass'"],[""," => "],["String","'Moose::Meta::Attribute'"],["",",\n                "],["String","'method_metaclass'"],["","    => "],["String","'Moose::Meta::Method'"],["",",\n                "],["String","'instance_metaclass'"],["","  => "],["String","'Moose::Meta::Instance'"],["",",\n                "],["Identifier","%opts"],["",",\n            );\n}\n\n"],["Keyword","sub "],["Function","create "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","'package'"],[""," "],["Conditional","if"],[""," "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@args"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","roles"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",")\n        || "],["Identifier","$class"],["","->throw_error("],["String","\"You must pass an ARRAY ref of roles\""],["",", "],["String","data"],[""," => "],["Identifier","$options{"],["String","roles"],["Identifier","}"],["",")\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{"],["String","roles"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$package"],[""," = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","package"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$roles"],["","   = "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","roles"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$new_meta"],[""," = "],["Identifier","$class"],["","->SUPER::create("],["Identifier","$package"],["",", "],["Identifier","%options"],["",");\n\n    "],["Conditional","if"],[""," ("],["Identifier","$roles"],["",") {\n        Moose::Util::apply_all_roles( "],["Identifier","$new_meta"],["",", "],["Identifier","@$roles"],[""," );\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$new_meta"],["",";\n}\n\n"],["Keyword","sub "],["Function","_meta_method_class "],["","{ "],["String","'Moose::Meta::Method::Meta'"],[""," }\n\n"],["Keyword","sub "],["Function","_anon_package_prefix "],["","{ "],["String","'Moose::Meta::Class::__ANON__::SERIAL::'"],[""," }\n\n"],["Keyword","sub "],["Function","_anon_cache_key "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$superclass_key"],[""," = "],["Statement","join"],["","("],["String","'|'"],["",",\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_->["],["Number","0"],["Identifier","]"],[""," "],["Statement","}"],[""," "],["Identifier","@{"],[""," Data::OptList::mkopt("],["Identifier","$options{"],["String","superclasses"],["Identifier","}"],[""," || []) "],["Identifier","}"],["","\n    );\n\n    "],["Statement","my"],[""," "],["Identifier","$roles"],[""," = Data::OptList::mkopt(("],["Identifier","$options{"],["String","roles"],["Identifier","}"],[""," || []), {\n        "],["String","moniker"],["","  => "],["String","'role'"],["",",\n        "],["String","val_test"],[""," => "],["Keyword","sub "],["","{ "],["Operator","ref"],["","("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") "],["Operator","eq"],[""," "],["String","'HASH'"],[""," },\n    });\n\n    "],["Statement","my"],[""," "],["Identifier","@role_keys"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$role_spec"],[""," ("],["Identifier","@$roles"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$role"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@$role_spec"],["",";\n        "],["Identifier","$params"],[""," = { "],["Identifier","%$params"],[""," } "],["Conditional","if"],[""," "],["Identifier","$params"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$key"],[""," = blessed("],["Identifier","$role"],["",") ? "],["Identifier","$role"],["","->name : "],["Identifier","$role"],["",";\n\n        "],["Conditional","if"],[""," ("],["Identifier","$params"],[""," && "],["Identifier","%$params"],["",") {\n            "],["Statement","my"],[""," "],["Identifier","$alias"],["","    = "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'-alias'"],["Identifier","}"],["","\n                        || "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'alias'"],["Identifier","}"],["","\n                        || {};\n            "],["Statement","my"],[""," "],["Identifier","$excludes"],[""," = "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'-excludes'"],["Identifier","}"],["","\n                        || "],["Statement","delete"],[""," "],["Identifier","$params->{"],["String","'excludes'"],["Identifier","}"],["","\n                        || [];\n            "],["Identifier","$excludes"],[""," = ["],["Identifier","$excludes"],["","] "],["Conditional","unless"],[""," "],["Operator","ref"],["","("],["Identifier","$excludes"],["",") "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",";\n\n            "],["Conditional","if"],[""," ("],["Identifier","%$params"],["",") {\n                "],["Statement","warn"],[""," "],["String","\"Roles with parameters cannot be cached. Consider \""],["","\n                   . "],["String","\"applying the parameters before calling \""],["","\n                   . "],["String","\"create_anon_class, or using 'weaken => 0' instead\""],["",";\n                "],["Statement","return"],["",";\n            }\n\n            "],["Statement","my"],[""," "],["Identifier","$alias_key"],[""," = "],["Statement","join"],["","("],["String","'%'"],["",",\n                "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$alias->{$_}"],[""," "],["Statement","}"],[""," "],["Statement","sort"],[""," "],["Statement","keys"],[""," "],["Identifier","%$alias"],["","\n            );\n            "],["Statement","my"],[""," "],["Identifier","$excludes_key"],[""," = "],["Statement","join"],["","("],["String","'%'"],["",",\n                "],["Statement","sort"],[""," "],["Identifier","@$excludes"],["","\n            );\n            "],["Identifier","$key"],[""," .= "],["String","'<'"],[""," . "],["Statement","join"],["","("],["String","'+'"],["",", "],["String","'a'"],["",", "],["Identifier","$alias_key"],["",", "],["String","'e'"],["",", "],["Identifier","$excludes_key"],["",") . "],["String","'>'"],["",";\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@role_keys"],["",", "],["Identifier","$key"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$role_key"],[""," = "],["Statement","join"],["","("],["String","'|'"],["",", "],["Statement","sort"],[""," "],["Identifier","@role_keys"],["",");\n\n    "],["Comment","# Makes something like Super::Class|Super::Class::2=Role|Role::1"],["","\n    "],["Statement","return"],[""," "],["Statement","join"],["","("],["String","'='"],["",", "],["Identifier","$superclass_key"],["",", "],["Identifier","$role_key"],["",");\n}\n\n"],["Keyword","sub "],["Function","reinitialize "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$pkg"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = blessed "],["Identifier","$pkg"],[""," ? "],["Identifier","$pkg"],[""," : Class::MOP::class_of("],["Identifier","$pkg"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","%existing_classes"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$meta"],["",") {\n        "],["Identifier","%existing_classes"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$meta"],["","->"],["Identifier","$_"],["","() "],["Statement","}"],[""," "],["String","qw("],["","\n"],["String","            attribute_metaclass"],["","\n"],["String","            method_metaclass"],["","\n"],["String","            wrapped_method_metaclass"],["","\n"],["String","            instance_metaclass"],["","\n"],["String","            constructor_class"],["","\n"],["String","            destructor_class"],["","\n"],["String","            error_class"],["","\n"],["String","        )"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::reinitialize(\n        "],["Identifier","$pkg"],["",",\n        "],["Identifier","%existing_classes"],["",",\n        "],["Identifier","@_"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","add_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role"],["",") = "],["Identifier","@_"],["",";\n    (blessed("],["Identifier","$role"],["",") && "],["Identifier","$role"],["","->isa("],["String","'Moose::Meta::Role'"],["","))\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Roles must be instances of Moose::Meta::Role\""],["",", "],["String","data"],[""," => "],["Identifier","$role"],["",");\n    "],["Statement","push"],[""," "],["Identifier","@{$self"],["","->roles"],["Identifier","}"],[""," => "],["Identifier","$role"],["",";\n}\n\n"],["Keyword","sub "],["Function","role_applications "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","@{$self"],["","->_get_role_applications"],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","add_role_application "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$application"],["",") = "],["Identifier","@_"],["",";\n    (blessed("],["Identifier","$application"],["",") && "],["Identifier","$application"],["","->isa("],["String","'Moose::Meta::Role::Application::ToClass'"],["","))\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Role applications must be instances of Moose::Meta::Role::Application::ToClass\""],["",", "],["String","data"],[""," => "],["Identifier","$application"],["",");\n    "],["Statement","push"],[""," "],["Identifier","@{$self"],["","->_get_role_applications"],["Identifier","}"],[""," => "],["Identifier","$application"],["",";\n}\n\n"],["Keyword","sub "],["Function","calculate_all_roles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%seen"],["",";\n    "],["Statement","grep"],[""," "],["Statement","{"],[""," !"],["Identifier","$seen{$_"],["","->name"],["Identifier","}"],["","++ "],["Statement","}"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->calculate_all_roles "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->roles "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_roles_with_inheritance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%seen"],["",";\n    "],["Statement","grep"],[""," "],["Statement","{"],[""," !"],["Identifier","$seen{$_"],["","->name"],["Identifier","}"],["","++ "],["Statement","}"],["","\n         "],["Statement","map"],[""," "],["Statement","{"],[""," Class::MOP::class_of("],["Identifier","$_"],["",")->can("],["String","'roles'"],["",")\n                   ? "],["Identifier","@{"],[""," Class::MOP::class_of("],["Identifier","$_"],["",")->roles "],["Identifier","}"],["","\n                   : () "],["Statement","}"],["","\n             "],["Identifier","$self"],["","->linearized_isa;\n}\n\n"],["Keyword","sub "],["Function","calculate_all_roles_with_inheritance "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%seen"],["",";\n    "],["Statement","grep"],[""," "],["Statement","{"],[""," !"],["Identifier","$seen{$_"],["","->name"],["Identifier","}"],["","++ "],["Statement","}"],["","\n         "],["Statement","map"],[""," "],["Statement","{"],[""," Class::MOP::class_of("],["Identifier","$_"],["",")->can("],["String","'calculate_all_roles'"],["",")\n                   ? Class::MOP::class_of("],["Identifier","$_"],["",")->calculate_all_roles\n                   : () "],["Statement","}"],["","\n             "],["Identifier","$self"],["","->linearized_isa;\n}\n\n"],["Keyword","sub "],["Function","does_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role_name"],["",") = "],["Identifier","@_"],["",";\n\n    ("],["Operator","defined"],[""," "],["Identifier","$role_name"],["",")\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"You must supply a role name to look for\""],["",");\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","$self"],["","->class_precedence_list) {\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::class_of("],["Identifier","$class"],["",");\n        "],["Comment","# when a Moose metaclass is itself extended with a role,"],["","\n        "],["Comment","# this check needs to be done since some items in the"],["","\n        "],["Comment","# class_precedence_list might in fact be Class::MOP"],["","\n        "],["Comment","# based still."],["","\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Identifier","$meta"],[""," && "],["Identifier","$meta"],["","->can("],["String","'roles'"],["",");\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ("],["Identifier","@{$meta"],["","->roles"],["Identifier","}"],["",") {\n            "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$role"],["","->does_role("],["Identifier","$role_name"],["",");\n        }\n    }\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","excludes_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role_name"],["",") = "],["Identifier","@_"],["",";\n\n    ("],["Operator","defined"],[""," "],["Identifier","$role_name"],["",")\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"You must supply a role name to look for\""],["",");\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","$self"],["","->class_precedence_list) {\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::class_of("],["Identifier","$class"],["",");\n        "],["Comment","# when a Moose metaclass is itself extended with a role,"],["","\n        "],["Comment","# this check needs to be done since some items in the"],["","\n        "],["Comment","# class_precedence_list might in fact be Class::MOP"],["","\n        "],["Comment","# based still."],["","\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Identifier","$meta"],[""," && "],["Identifier","$meta"],["","->can("],["String","'roles'"],["",");\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ("],["Identifier","@{$meta"],["","->roles"],["Identifier","}"],["",") {\n            "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$role"],["","->excludes_role("],["Identifier","$role_name"],["",");\n        }\n    }\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","new_object "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","@_"],[""," == "],["Number","1"],[""," ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," : {"],["Identifier","@_"],["","};\n    "],["Statement","my"],[""," "],["Identifier","$object"],[""," = "],["Identifier","$self"],["","->SUPER::new_object("],["Identifier","$params"],["",");\n\n    "],["Identifier","$self"],["","->_call_all_triggers("],["Identifier","$object"],["",", "],["Identifier","$params"],["",");\n\n    "],["Identifier","$object"],["","->BUILDALL("],["Identifier","$params"],["",") "],["Conditional","if"],[""," "],["Identifier","$object"],["","->can("],["String","'BUILDALL'"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$object"],["",";\n}\n\n"],["Keyword","sub "],["Function","_call_all_triggers "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$object"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ( "],["Identifier","$self"],["","->get_all_attributes() ) {\n\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Identifier","$attr"],["","->can("],["String","'has_trigger'"],["",") && "],["Identifier","$attr"],["","->has_trigger;\n\n        "],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$attr"],["","->init_arg;\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$init_arg"],["",";\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$params->{$init_arg}"],["",";\n\n        "],["Identifier","$attr"],["","->trigger->(\n            "],["Identifier","$object"],["",",\n            (\n                  "],["Identifier","$attr"],["","->should_coerce\n                ? "],["Identifier","$attr"],["","->get_read_method_ref->("],["Identifier","$object"],["",")\n                : "],["Identifier","$params->{$init_arg}"],["","\n            ),\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_generate_fallback_constructor "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$class"],[""," . "],["String","'->Moose::Object::new(@_)'"],["","\n}\n\n"],["Keyword","sub "],["Function","_inline_params "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$params"],["",", "],["Identifier","$class"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," (\n        "],["String","'my '"],[""," . "],["Identifier","$params"],[""," . "],["String","' = '"],["",",\n        "],["Identifier","$self"],["","->_inline_BUILDARGS("],["Identifier","$class"],["",", "],["String","'@_'"],["","),\n        "],["String","';'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_BUILDARGS "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$args"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$buildargs"],[""," = "],["Identifier","$self"],["","->find_method_by_name("],["String","\"BUILDARGS\""],["",");\n\n    "],["Conditional","if"],[""," ("],["Identifier","$args"],[""," "],["Operator","eq"],[""," "],["String","'@_'"],["","\n     && (!"],["Identifier","$buildargs"],[""," "],["Operator","or"],[""," "],["Identifier","$buildargs"],["","->body == \\"],["Identifier","&"],["Type","Moose::Object::"],["Identifier","BUILDARGS"],["",")) {\n        "],["Statement","return"],[""," (\n            "],["String","'do {'"],["",",\n                "],["String","'my $params;'"],["",",\n                "],["String","'if (scalar @_ == 1) {'"],["",",\n                    "],["String","'if (!defined($_[0]) || ref($_[0]) ne \\'HASH\\') {'"],["",",\n                        "],["Identifier","$self"],["","->_inline_throw_error(\n                            "],["String","'\"Single parameters to new() must be a HASH ref\"'"],["",",\n                            "],["String","'data => $_[0]'"],["",",\n                        ) . "],["String","';'"],["",",\n                    "],["String","'}'"],["",",\n                    "],["String","'$params = { %{ $_[0] } };'"],["",",\n                "],["String","'}'"],["",",\n                "],["String","'elsif (@_ % 2) {'"],["",",\n                    "],["String","'Carp::carp('"],["",",\n                        "],["String","'\"The new() method for '"],[""," . "],["Identifier","$class"],[""," . "],["String","' expects a '"],["","\n                      . "],["String","'hash reference or a key/value list. You passed an '"],["","\n                      . "],["String","'odd number of arguments\"'"],["",",\n                    "],["String","');'"],["",",\n                    "],["String","'$params = {@_, undef};'"],["",",\n                "],["String","'}'"],["",",\n                "],["String","'else {'"],["",",\n                    "],["String","'$params = {@_};'"],["",",\n                "],["String","'}'"],["",",\n                "],["String","'$params;'"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," "],["Identifier","$class"],[""," . "],["String","'->BUILDARGS('"],[""," . "],["Identifier","$args"],[""," . "],["String","')'"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_slot_initializer "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," (\n        "],["String","'## '"],[""," . "],["Identifier","$attr"],["","->name,\n        "],["Identifier","$self"],["","->_inline_check_required_attr("],["Identifier","$attr"],["","),\n        "],["Identifier","$self"],["","->SUPER::_inline_slot_initializer("],["Identifier","@_"],["","),\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_check_required_attr "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$attr"],["","->init_arg;\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$attr"],["","->can("],["String","'is_required'"],["",") && "],["Identifier","$attr"],["","->is_required;\n    "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$attr"],["","->has_default || "],["Identifier","$attr"],["","->has_builder;\n\n    "],["Statement","return"],[""," (\n        "],["String","'if (!exists $params->{\\''"],[""," . "],["Identifier","$attr"],["","->init_arg . "],["String","'\\'}) {'"],["",",\n            "],["Identifier","$self"],["","->_inline_throw_error(\n                "],["String","'\"Attribute ('"],[""," . "],["Statement","quotemeta"],["","("],["Identifier","$attr"],["","->name) . "],["String","') is required\"'"],["","\n            ) . "],["String","';'"],["",",\n        "],["String","'}'"],["",",\n    );\n}\n\n"],["Comment","# "],["Todo","XXX:"],["Comment"," these two are duplicated from cmop, because we have to pass the tc stuff"],["","\n"],["Comment","# through to _inline_set_value - this should probably be fixed, but i'm not"],["","\n"],["Comment","# quite sure how. -doy"],["","\n"],["Keyword","sub "],["Function","_inline_init_attr_from_constructor "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@initial_value"],[""," = "],["Identifier","$attr"],["","->_inline_set_value(\n        "],["String","'$instance'"],["",",\n        "],["String","'$params->{\\''"],[""," . "],["Identifier","$attr"],["","->init_arg . "],["String","'\\'}'"],["",",\n        "],["String","'$type_constraint_bodies['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']'"],["",",\n        "],["String","'$type_coercions['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']'"],["",",\n        "],["String","'$type_constraint_messages['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']'"],["",",\n        "],["String","'for constructor'"],["",",\n    );\n\n    "],["Statement","push"],[""," "],["Identifier","@initial_value"],["",", (\n        "],["String","'$attrs->['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']->set_initial_value('"],["",",\n            "],["String","'$instance,'"],["",",\n            "],["Identifier","$attr"],["","->_inline_instance_get("],["String","'$instance'"],["","),\n        "],["String","');'"],["",",\n    ) "],["Conditional","if"],[""," "],["Identifier","$attr"],["","->has_initializer;\n\n    "],["Statement","return"],[""," "],["Identifier","@initial_value"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_init_attr_from_default "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$attr"],["","->can("],["String","'is_lazy'"],["",") && "],["Identifier","$attr"],["","->is_lazy;\n    "],["Statement","my"],[""," "],["Identifier","$default"],[""," = "],["Identifier","$self"],["","->_inline_default_value("],["Identifier","$attr"],["",", "],["Identifier","$idx"],["",");\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$default"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@initial_value"],[""," = (\n        "],["String","'my $default = '"],[""," . "],["Identifier","$default"],[""," . "],["String","';'"],["",",\n        "],["Identifier","$attr"],["","->_inline_set_value(\n            "],["String","'$instance'"],["",",\n            "],["String","'$default'"],["",",\n            "],["String","'$type_constraint_bodies['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']'"],["",",\n            "],["String","'$type_coercions['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']'"],["",",\n            "],["String","'$type_constraint_messages['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']'"],["",",\n            "],["String","'for constructor'"],["",",\n        ),\n    );\n\n    "],["Statement","push"],[""," "],["Identifier","@initial_value"],["",", (\n        "],["String","'$attrs->['"],[""," . "],["Identifier","$idx"],[""," . "],["String","']->set_initial_value('"],["",",\n            "],["String","'$instance,'"],["",",\n            "],["Identifier","$attr"],["","->_inline_instance_get("],["String","'$instance'"],["","),\n        "],["String","');'"],["",",\n    ) "],["Conditional","if"],[""," "],["Identifier","$attr"],["","->has_initializer;\n\n    "],["Statement","return"],[""," "],["Identifier","@initial_value"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_extra_init "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," (\n        "],["Identifier","$self"],["","->_inline_triggers,\n        "],["Identifier","$self"],["","->_inline_BUILDALL,\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_triggers "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@trigger_calls"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@attrs"],[""," = "],["Statement","sort"],[""," "],["Statement","{"],[""," "],["Identifier","$a"],["","->name "],["Operator","cmp"],[""," "],["Identifier","$b"],["","->name "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_all_attributes;\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$i"],[""," ("],["Number","0"],[""," .. "],["Identifier","$#attrs"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$attr"],[""," = "],["Identifier","$attrs[$i]"],["",";\n\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Identifier","$attr"],["","->can("],["String","'has_trigger'"],["",") && "],["Identifier","$attr"],["","->has_trigger;\n\n        "],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$attr"],["","->init_arg;\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$init_arg"],["",";\n\n        "],["Statement","push"],[""," "],["Identifier","@trigger_calls"],["",",\n            "],["String","'if (exists $params->{\\''"],[""," . "],["Identifier","$init_arg"],[""," . "],["String","'\\'}) {'"],["",",\n                "],["String","'$triggers->['"],[""," . "],["Identifier","$i"],[""," . "],["String","']->('"],["",",\n                    "],["String","'$instance,'"],["",",\n                    "],["Identifier","$attr"],["","->_inline_instance_get("],["String","'$instance'"],["",") . "],["String","','"],["",",\n                "],["String","');'"],["",",\n            "],["String","'}'"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","@trigger_calls"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_BUILDALL "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@methods"],[""," = "],["Statement","reverse"],[""," "],["Identifier","$self"],["","->find_all_methods_by_name("],["String","'BUILD'"],["",");\n    "],["Statement","my"],[""," "],["Identifier","@BUILD_calls"],["",";\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," ("],["Identifier","@methods"],["",") {\n        "],["Statement","push"],[""," "],["Identifier","@BUILD_calls"],["",",\n            "],["String","'$instance->'"],[""," . "],["Identifier","$method->{"],["String","class"],["Identifier","}"],[""," . "],["String","'::BUILD($params);'"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","@BUILD_calls"],["",";\n}\n\n"],["Keyword","sub "],["Function","_eval_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@attrs"],[""," = "],["Statement","sort"],[""," "],["Statement","{"],[""," "],["Identifier","$a"],["","->name "],["Operator","cmp"],[""," "],["Identifier","$b"],["","->name "],["Statement","}"],[""," "],["Identifier","$self"],["","->get_all_attributes;\n\n    "],["Statement","my"],[""," "],["Identifier","$triggers"],[""," = [\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->can("],["String","'has_trigger'"],["",") && "],["Identifier","$_"],["","->has_trigger ? "],["Identifier","$_"],["","->trigger : "],["Operator","undef"],[""," "],["Statement","}"],["","\n            "],["Identifier","@attrs"],["","\n    ];\n\n    "],["Comment","# We need to check if the attribute ->can('type_constraint')"],["","\n    "],["Comment","# since we may be trying to immutabilize a Moose meta class,"],["","\n    "],["Comment","# which in turn has attributes which are Class::MOP::Attribute"],["","\n    "],["Comment","# objects, rather than Moose::Meta::Attribute. And"],["","\n    "],["Comment","# Class::MOP::Attribute attributes have no type constraints."],["","\n    "],["Comment","# However we need to make sure we leave an undef value there"],["","\n    "],["Comment","# because the inlined code is using the index of the attributes"],["","\n    "],["Comment","# to determine where to find the type constraint"],["","\n\n    "],["Statement","my"],[""," "],["Identifier","@type_constraints"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Identifier","$_"],["","->can("],["String","'type_constraint'"],["",") ? "],["Identifier","$_"],["","->type_constraint : "],["Operator","undef"],["","\n    "],["Statement","}"],[""," "],["Identifier","@attrs"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@type_constraint_bodies"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Operator","defined"],[""," "],["Identifier","$_"],[""," ? "],["Identifier","$_"],["","->_compiled_type_constraint : "],["Operator","undef"],["",";\n    "],["Statement","}"],[""," "],["Identifier","@type_constraints"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@type_coercions"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Operator","defined"],[""," "],["Identifier","$_"],[""," && "],["Identifier","$_"],["","->has_coercion\n            ? "],["Identifier","$_"],["","->coercion->_compiled_type_coercion\n            : "],["Operator","undef"],["","\n    "],["Statement","}"],[""," "],["Identifier","@type_constraints"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@type_constraint_messages"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Operator","defined"],[""," "],["Identifier","$_"],["","\n            ? ("],["Identifier","$_"],["","->has_message ? "],["Identifier","$_"],["","->message : "],["Identifier","$_"],["","->_default_message)\n            : "],["Operator","undef"],["","\n    "],["Statement","}"],[""," "],["Identifier","@type_constraints"],["",";\n\n    "],["Statement","return"],[""," {\n        "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->SUPER::_eval_environment "],["Identifier","}"],["",",\n        ((any { "],["Operator","defined"],[""," && "],["Identifier","$_"],["","->has_initializer } "],["Identifier","@attrs"],["",")\n            ? ("],["String","'$attrs'"],[""," => \\["],["Identifier","@attrs"],["","])\n            : ()),\n        "],["String","'$triggers'"],[""," => \\"],["Identifier","$triggers"],["",",\n        "],["String","'@type_coercions'"],[""," => \\"],["Identifier","@type_coercions"],["",",\n        "],["String","'@type_constraint_bodies'"],[""," => \\"],["Identifier","@type_constraint_bodies"],["",",\n        "],["String","'@type_constraint_messages'"],[""," => \\"],["Identifier","@type_constraint_messages"],["",",\n        ( "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Operator","defined"],["","("],["Identifier","$_"],["",") ? "],["Identifier","%{"],[""," "],["Identifier","$_"],["","->inline_environment "],["Identifier","}"],[""," : () "],["Statement","}"],["","\n              "],["Identifier","@type_constraints"],[""," ),\n        "],["Comment","# pretty sure this is only going to be closed over if you use a custom"],["","\n        "],["Comment","# error class at this point, but we should still get rid of this"],["","\n        "],["Comment","# at some point"],["","\n        "],["String","'$meta'"],["","  => \\"],["Identifier","$self"],["",",\n    };\n}\n\n"],["Keyword","sub "],["Function","superclasses "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$supers"],[""," = Data::OptList::mkopt(\\"],["Identifier","@_"],["",");\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$super"],[""," ("],["Identifier","@{"],[""," "],["Identifier","$supers"],[""," "],["Identifier","}"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$name"],["",", "],["Identifier","$opts"],["",") = "],["Identifier","@{"],[""," "],["Identifier","$super"],[""," "],["Identifier","}"],["",";\n        load_class("],["Identifier","$name"],["",", "],["Identifier","$opts"],["",");\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::class_of("],["Identifier","$name"],["",");\n        "],["Identifier","$self"],["","->throw_error("],["String","\"You cannot inherit from a Moose Role ("],["Identifier","$name"],["String",")\""],["",")\n            "],["Conditional","if"],[""," "],["Identifier","$meta"],[""," && "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",")\n    }\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::superclasses("],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_->["],["Number","0"],["Identifier","]"],[""," "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$supers"],[""," "],["Identifier","}"],["",");\n}\n\n"],["Comment","### ---------------------------------------------"],["","\n\n"],["Keyword","sub "],["Function","add_attribute "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$attr"],[""," =\n        (blessed "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," && "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->isa("],["String","'Class::MOP::Attribute'"],["",")\n            ? "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","\n            : "],["Identifier","$self"],["","->_process_attribute("],["Identifier","@_"],["","));\n    "],["Identifier","$self"],["","->SUPER::add_attribute("],["Identifier","$attr"],["",");\n    "],["Comment","# it may be a Class::MOP::Attribute, theoretically, which doesn't have"],["","\n    "],["Comment","# 'bare' and doesn't implement this method"],["","\n    "],["Conditional","if"],[""," ("],["Identifier","$attr"],["","->can("],["String","'_check_associated_methods'"],["",")) {\n        "],["Identifier","$attr"],["","->_check_associated_methods;\n    }\n    "],["Statement","return"],[""," "],["Identifier","$attr"],["",";\n}\n\n"],["Keyword","sub "],["Function","add_override_method_modifier "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$name"],["",", "],["Identifier","$method"],["",", "],["Identifier","$_super_package"],["",") = "],["Identifier","@_"],["",";\n\n    (!"],["Identifier","$self"],["","->has_method("],["Identifier","$name"],["","))\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Cannot add an override method if a local method is already present\""],["",");\n\n    "],["Identifier","$self"],["","->add_method("],["Identifier","$name"],[""," => Moose::Meta::Method::Overridden->new(\n        "],["String","method"],["","  => "],["Identifier","$method"],["",",\n        "],["String","class"],["","   => "],["Identifier","$self"],["",",\n        "],["String","package"],[""," => "],["Identifier","$_super_package"],["",", "],["Comment","# need this for roles"],["","\n        "],["String","name"],["","    => "],["Identifier","$name"],["",",\n    ));\n}\n\n"],["Keyword","sub "],["Function","add_augment_method_modifier "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$name"],["",", "],["Identifier","$method"],["",") = "],["Identifier","@_"],["",";\n    (!"],["Identifier","$self"],["","->has_method("],["Identifier","$name"],["","))\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Cannot add an augment method if a local method is already present\""],["",");\n\n    "],["Identifier","$self"],["","->add_method("],["Identifier","$name"],[""," => Moose::Meta::Method::Augmented->new(\n        "],["String","method"],["","  => "],["Identifier","$method"],["",",\n        "],["String","class"],["","   => "],["Identifier","$self"],["",",\n        "],["String","name"],["","    => "],["Identifier","$name"],["",",\n    ));\n}\n\n"],["Comment","## Private Utility methods ..."],["","\n\n"],["Keyword","sub "],["Function","_find_next_method_by_name_which_is_not_overridden "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$name"],["",") = "],["Identifier","@_"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," ("],["Identifier","$self"],["","->find_all_methods_by_name("],["Identifier","$name"],["",")) {\n        "],["Statement","return"],[""," "],["Identifier","$method->{"],["String","code"],["Identifier","}"],["","\n            "],["Conditional","if"],[""," blessed("],["Identifier","$method->{"],["String","code"],["Identifier","}"],["",") && !"],["Identifier","$method->{"],["String","code"],["Identifier","}"],["","->isa("],["String","'Moose::Meta::Method::Overridden'"],["",");\n    }\n    "],["Statement","return"],[""," "],["Operator","undef"],["",";\n}\n\n"],["Comment","## Metaclass compatibility"],["","\n\n"],["Keyword","sub "],["Function","_base_metaclasses "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%metaclasses"],[""," = "],["Identifier","$self"],["","->SUPER::_base_metaclasses;\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Statement","keys"],[""," "],["Identifier","%metaclasses"],["",") {\n        "],["Identifier","$metaclasses{$class}"],[""," =~ "],["Statement","s/"],["String","^Class::MOP"],["Statement","/"],["String","Moose::Meta"],["Statement","/"],["",";\n    }\n    "],["Statement","return"],[""," (\n        "],["Identifier","%metaclasses"],["",",\n        "],["String","error_class"],[""," => "],["String","'Moose::Error::Default'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_fix_class_metaclass_incompatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$super_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->SUPER::_fix_class_metaclass_incompatibility("],["Identifier","@_"],["",");\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->_class_metaclass_can_be_made_compatible("],["Identifier","$super_meta"],["",")) {\n        ("],["Identifier","$self"],["","->is_pristine)\n            || confess "],["String","\"Can't fix metaclass incompatibility for \""],["","\n                     . "],["Identifier","$self"],["","->name\n                     . "],["String","\" because it is not pristine.\""],["",";\n        "],["Statement","my"],[""," "],["Identifier","$super_meta_name"],[""," = "],["Identifier","$super_meta"],["","->_real_ref_name;\n        "],["Statement","my"],[""," "],["Identifier","$class_meta_subclass_meta_name"],[""," = Moose::Util::_reconcile_roles_for_metaclass(blessed("],["Identifier","$self"],["","), "],["Identifier","$super_meta_name"],["",");\n        "],["Statement","my"],[""," "],["Identifier","$new_self"],[""," = "],["Identifier","$class_meta_subclass_meta_name"],["","->reinitialize(\n            "],["Identifier","$self"],["","->name,\n        );\n\n        "],["Identifier","$self"],["","->_replace_self( "],["Identifier","$new_self"],["",", "],["Identifier","$class_meta_subclass_meta_name"],[""," );\n    }\n}\n\n"],["Keyword","sub "],["Function","_fix_single_metaclass_incompatibility "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$metaclass_type"],["",", "],["Identifier","$super_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->SUPER::_fix_single_metaclass_incompatibility("],["Identifier","@_"],["",");\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->_single_metaclass_can_be_made_compatible("],["Identifier","$super_meta"],["",", "],["Identifier","$metaclass_type"],["",")) {\n        ("],["Identifier","$self"],["","->is_pristine)\n            || confess "],["String","\"Can't fix metaclass incompatibility for \""],["","\n                     . "],["Identifier","$self"],["","->name\n                     . "],["String","\" because it is not pristine.\""],["",";\n        "],["Statement","my"],[""," "],["Identifier","$super_meta_name"],[""," = "],["Identifier","$super_meta"],["","->_real_ref_name;\n        "],["Statement","my"],[""," "],["Identifier","$class_specific_meta_subclass_meta_name"],[""," = Moose::Util::_reconcile_roles_for_metaclass("],["Identifier","$self"],["","->"],["Identifier","$metaclass_type"],["",", "],["Identifier","$super_meta"],["","->"],["Identifier","$metaclass_type"],["",");\n        "],["Statement","my"],[""," "],["Identifier","$new_self"],[""," = "],["Identifier","$super_meta"],["","->reinitialize(\n            "],["Identifier","$self"],["","->name,\n            "],["Identifier","$metaclass_type"],[""," => "],["Identifier","$class_specific_meta_subclass_meta_name"],["",",\n        );\n\n        "],["Identifier","$self"],["","->_replace_self( "],["Identifier","$new_self"],["",", "],["Identifier","$super_meta_name"],[""," );\n    }\n}\n\n"],["Keyword","sub "],["Function","_replace_self "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","      = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$new_self"],["",", "],["Identifier","$new_class"],["",")   = "],["Identifier","@_"],["",";\n\n    "],["Identifier","%$self"],[""," = "],["Identifier","%$new_self"],["",";\n    "],["Operator","bless"],[""," "],["Identifier","$self"],["",", "],["Identifier","$new_class"],["",";\n\n    "],["Comment","# We need to replace the cached metaclass instance or else when it goes"],["","\n    "],["Comment","# out of scope Class::MOP::Class destroy's the namespace for the"],["","\n    "],["Comment","# metaclass's class, causing much havoc."],["","\n    "],["Statement","my"],[""," "],["Identifier","$weaken"],[""," = Class::MOP::metaclass_is_weak( "],["Identifier","$self"],["","->name );\n    Class::MOP::store_metaclass_by_name( "],["Identifier","$self"],["","->name, "],["Identifier","$self"],[""," );\n    Class::MOP::weaken_metaclass( "],["Identifier","$self"],["","->name ) "],["Conditional","if"],[""," "],["Identifier","$weaken"],["",";\n}\n\n"],["Keyword","sub "],["Function","_process_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$name"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","@args"],[""," = "],["Identifier","%{$args["],["Number","0"],["Identifier","]}"],[""," "],["Conditional","if"],[""," "],["Statement","scalar"],[""," "],["Identifier","@args"],[""," == "],["Number","1"],[""," && "],["Operator","ref"],["","("],["Identifier","$args["],["Number","0"],["Identifier","]"],["",") "],["Operator","eq"],[""," "],["String","'HASH'"],["",";\n\n    "],["Conditional","if"],[""," (("],["Identifier","$name"],[""," || "],["String","''"],["",") =~ "],["Statement","/"],["String","^"],["Special","\\+(.*)"],["Statement","/"],["",") {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->_process_inherited_attribute("],["Identifier","$1"],["",", "],["Identifier","@args"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->_process_new_attribute("],["Identifier","$name"],["",", "],["Identifier","@args"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_new_attribute "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$name"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->attribute_metaclass->interpolate_class_and_new("],["Identifier","$name"],["",", "],["Identifier","@args"],["",");\n}\n\n"],["Keyword","sub "],["Function","_process_inherited_attribute "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$attr_name"],["",", "],["Identifier","%options"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$inherited_attr"],[""," = "],["Identifier","$self"],["","->find_attribute_by_name("],["Identifier","$attr_name"],["",");\n    ("],["Operator","defined"],[""," "],["Identifier","$inherited_attr"],["",")\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Could not find an attribute by the name of '"],["Identifier","$attr_name"],["String","' to inherit from in "],["Identifier","${"],["","\\"],["Identifier","$self"],["","->name"],["Identifier","}"],["String","\""],["",", "],["String","data"],[""," => "],["Identifier","$attr_name"],["",");\n    "],["Conditional","if"],[""," ("],["Identifier","$inherited_attr"],["","->isa("],["String","'Moose::Meta::Attribute'"],["",")) {\n        "],["Statement","return"],[""," "],["Identifier","$inherited_attr"],["","->clone_and_inherit_options("],["Identifier","%options"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# kind of a kludge to handle Class::MOP::Attributes"],["","\n        "],["Statement","return"],[""," "],["Identifier","$inherited_attr"],["","->Moose::Meta::Attribute::clone_and_inherit_options("],["Identifier","%options"],["",");\n    }\n}\n\n"],["Comment","# reinitialization support"],["","\n\n"],["Keyword","sub "],["Function","_restore_metaobjects_from "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$old_meta"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->SUPER::_restore_metaobjects_from("],["Identifier","$old_meta"],["",");\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$old_meta"],["","->roles "],["Identifier","}"],[""," ) {\n        "],["Identifier","$self"],["","->add_role("],["Identifier","$role"],["",");\n    }\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$application"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$old_meta"],["","->_get_role_applications "],["Identifier","}"],[""," ) {\n        "],["Identifier","$application"],["","->class("],["Identifier","$self"],["",");\n        "],["Identifier","$self"],["","->add_role_application ("],["Identifier","$application"],["",");\n    }\n}\n\n"],["Comment","## Immutability"],["","\n\n"],["Keyword","sub "],["Function","_immutable_options "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->SUPER::_immutable_options(\n        "],["String","inline_destructor"],[""," => "],["Number","1"],["",",\n\n        "],["Comment","# Moose always does this when an attribute is created"],["","\n        "],["String","inline_accessors"],[""," => "],["Number","0"],["",",\n\n        "],["Identifier","@args"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_fixup_attributes_after_rebless "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$rebless_from"],["",", "],["Identifier","%params"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->SUPER::_fixup_attributes_after_rebless(\n        "],["Identifier","$instance"],["",",\n        "],["Identifier","$rebless_from"],["",",\n        "],["Identifier","%params"],["","\n    );\n\n    "],["Identifier","$self"],["","->_call_all_triggers( "],["Identifier","$instance"],["",", \\"],["Identifier","%params"],[""," );\n}\n\n"],["Comment","## -------------------------------------------------"],["","\n\n"],["Statement","our"],[""," "],["Identifier","$error_level"],["",";\n\n"],["Keyword","sub "],["Function","throw_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","local"],[""," "],["Identifier","$error_level"],[""," = ("],["Identifier","$error_level"],[""," || "],["Number","0"],["",") + "],["Number","1"],["",";\n    "],["Identifier","$self"],["","->raise_error("],["Identifier","$self"],["","->create_error("],["Identifier","@args"],["","));\n}\n\n"],["Keyword","sub "],["Function","_inline_throw_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Identifier","$self"],["","->_inline_raise_error("],["Identifier","$self"],["","->_inline_create_error("],["Identifier","@args"],["","));\n}\n\n"],["Keyword","sub "],["Function","raise_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","die"],[""," "],["Identifier","@args"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_raise_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$message"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["String","'die '"],[""," . "],["Identifier","$message"],["",";\n}\n\n"],["Keyword","sub "],["Function","create_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","require"],[""," Carp::Heavy;\n\n    "],["Statement","local"],[""," "],["Identifier","$error_level"],[""," = ("],["Identifier","$error_level"],[""," || "],["Number","0"],[""," ) + "],["Number","1"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","@args"],[""," % "],["Number","2"],[""," == "],["Number","1"],[""," ) {\n        "],["Statement","unshift"],[""," "],["Identifier","@args"],["",", "],["String","\"message\""],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = ( "],["String","metaclass"],[""," => "],["Identifier","$self"],["",", "],["String","last_error"],[""," => "],["Identifier","$@"],["",", "],["Identifier","@args"],[""," );\n\n    "],["Identifier","$args{"],["String","depth"],["Identifier","}"],[""," += "],["Identifier","$error_level"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Operator","ref"],[""," "],["Identifier","$self"],[""," ? "],["Identifier","$self"],["","->error_class : "],["String","\"Moose::Error::Default\""],["",";\n\n    load_class("],["Identifier","$class"],["",");\n\n    "],["Identifier","$class"],["","->new(\n        Carp::caller_info("],["Identifier","$args{"],["String","depth"],["Identifier","}"],["","),\n        "],["Identifier","%args"],["","\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_create_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$msg"],["",", "],["Identifier","$args"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Comment","# "],["Todo","XXX"],["Comment"," ignore $args for now, nothing currently uses it anyway"],["","\n\n    "],["Statement","require"],[""," Carp::Heavy;\n\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = (\n        "],["String","metaclass"],["","  => "],["Identifier","$self"],["",",\n        "],["String","last_error"],[""," => "],["Identifier","$@"],["",",\n        "],["String","message"],["","    => "],["Identifier","$msg"],["",",\n    );\n\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Operator","ref"],[""," "],["Identifier","$self"],[""," ? "],["Identifier","$self"],["","->error_class : "],["String","\"Moose::Error::Default\""],["",";\n\n    load_class("],["Identifier","$class"],["",");\n\n    "],["Comment","# don't check inheritance here - the intention is that the class needs"],["","\n    "],["Comment","# to provide a non-inherited inlining method, because falling back to"],["","\n    "],["Comment","# the default inlining method is most likely going to be wrong"],["","\n    "],["Comment","# yes, this is a huge hack, but so is the entire error system, so."],["","\n    "],["Statement","return"],["","\n          "],["String","'$meta->create_error('"],["","\n        . "],["Identifier","$msg"],["","\n        . ( "],["Operator","defined"],[""," "],["Identifier","$args"],[""," ? "],["String","', '"],[""," . "],["Identifier","$args"],[""," : "],["String","q{}"],[""," ) . "],["String","');'"],["","\n        "],["Conditional","unless"],[""," "],["Identifier","$class"],["","->meta->has_method("],["String","'_inline_new'"],["",");\n\n    "],["Identifier","$class"],["","->_inline_new(\n        "],["Comment","# "],["Todo","XXX"],["Comment"," ignore this for now too"],["","\n        "],["Comment","# Carp::caller_info($args{depth}),"],["","\n        "],["Identifier","%args"],["","\n    );\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The Moose metaclass"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Class - The Moose metaclass\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class is a subclass of "],["Identifier","L<Class::MOP::Class>"],[""," that provides\nadditional Moose-specific functionality.\n\nTo really understand this class, you will need to start with the\n"],["Identifier","L<Class::MOP::Class>"],[""," documentation. This class can be understood as a\nset of additional features on top of the basic feature provided by\nthat parent class.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::Class>"],[""," is a subclass of "],["Identifier","L<Class::MOP::Class>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Class->initialize($package_name, %options) >>"],["","\n\nThis overrides the parent's method in order to provide its own\ndefaults for the "],["Identifier","C<attribute_metaclass>"],["",", "],["Identifier","C<instance_metaclass>"],["",", and\n"],["Identifier","C<method_metaclass>"],[""," options.\n\nThese all default to the appropriate Moose class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Class->create($package_name, %options) >>"],["","\n\nThis overrides the parent's method in order to accept a "],["Identifier","C<roles>"],["","\noption. This should be an array reference containing roles\nthat the class does, each optionally followed by a hashref of options\n("],["Identifier","C<-excludes>"],[""," and "],["Identifier","C<-alias>"],["",").\n\n"],["PreProc","  my $metaclass = Moose::Meta::Class->create( 'New::Class', roles => [...] );"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Class->create_anon_class >>"],["","\n\nThis overrides the parent's method to accept a "],["Identifier","C<roles>"],[""," option, just\nas "],["Identifier","C<create>"],[""," does.\n\nIt also accepts a "],["Identifier","C<cache>"],[""," option. If this is true, then the anonymous\nclass will be cached based on its superclasses and roles. If an\nexisting anonymous class in the cache has the same superclasses and\nroles, it will be reused.\n\n"],["PreProc","  my $metaclass = Moose::Meta::Class->create_anon_class("],["","\n"],["PreProc","      superclasses => ['Foo'],"],["","\n"],["PreProc","      roles        => [qw/Some Roles Go Here/],"],["","\n"],["PreProc","      cache        => 1,"],["","\n"],["PreProc","  );"],["","\n\nEach entry in both the "],["Identifier","C<superclasses>"],[""," and the "],["Identifier","C<roles>"],[""," option can be\nfollowed by a hash reference with arguments. The "],["Identifier","C<superclasses>"],["","\noption can be supplied with a "],["Identifier","L<-version|Class::MOP/Class Loading"],["","\n"],["Identifier","Options>"],[""," option that ensures the loaded superclass satisfies the\nrequired version. The "],["Identifier","C<role>"],[""," option also takes the "],["Identifier","C<-version>"],[""," as an\nargument, but the option hash reference can also contain any other\nrole relevant values like exclusions or parameterized role arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->new_object(%params) >>"],["","\n\nThis overrides the parent's method in order to add support for\nattribute triggers.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->superclasses(@superclasses) >>"],["","\n\nThis is the accessor allowing you to read or change the parents of\nthe class.\n\nEach superclass can be followed by a hash reference containing a\n"],["Identifier","L<-version|Class::MOP/Class Loading Options>"],[""," value. If the version\nrequirement is not satisfied an error will be thrown.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_override_method_modifier($name, $sub) >>"],["","\n\nThis adds an "],["Identifier","C<override>"],[""," method modifier to the package.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_augment_method_modifier($name, $sub) >>"],["","\n\nThis adds an "],["Identifier","C<augment>"],[""," method modifier to the package.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->calculate_all_roles >>"],["","\n\nThis will return a unique array of "],["Identifier","C<Moose::Meta::Role>"],[""," instances\nwhich are attached to this class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->calculate_all_roles_with_inheritance >>"],["","\n\nThis will return a unique array of "],["Identifier","C<Moose::Meta::Role>"],[""," instances\nwhich are attached to this class, and each of this class's ancestors.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_role($role) >>"],["","\n\nThis takes a "],["Identifier","L<Moose::Meta::Role>"],[""," object, and adds it to the class's\nlist of roles. This "],["Identifier","I<does not>"],[""," actually apply the role to the class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->role_applications >>"],["","\n\nReturns a list of "],["Identifier","L<Moose::Meta::Role::Application::ToClass>"],["","\nobjects, which contain the arguments to role application.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_role_application($application) >>"],["","\n\nThis takes a "],["Identifier","L<Moose::Meta::Role::Application::ToClass>"],[""," object, and\nadds it to the class's list of role applications. This "],["Identifier","I<does not>"],["","\nactually apply any role to the class; it is only for tracking role\napplications.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->does_role($role) >>"],["","\n\nThis returns a boolean indicating whether or not the class does the specified\nrole. The role provided can be either a role name or a "],["Identifier","L<Moose::Meta::Role>"],["","\nobject. This tests both the class and its parents.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->excludes_role($role_name) >>"],["","\n\nA class excludes a role if it has already composed a role which\nexcludes the named role. This tests both the class and its parents.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->add_attribute($attr_name, %params|$params) >>"],["","\n\nThis overrides the parent's method in order to allow the parameters to\nbe provided as a hash reference.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->constructor_class($class_name) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->destructor_class($class_name) >>"],["","\n\nThese are the names of classes used when making a class immutable. These\ndefault to "],["Identifier","L<Moose::Meta::Method::Constructor>"],[""," and\n"],["Identifier","L<Moose::Meta::Method::Destructor>"],[""," respectively. These accessors are\nread-write, so you can use them to change the class name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->error_class($class_name) >>"],["","\n\nThe name of the class used to throw errors. This defaults to\n"],["Identifier","L<Moose::Error::Default>"],["",", which generates an error with a stacktrace\njust like "],["Identifier","C<Carp::confess>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $metaclass->throw_error($message, %extra) >>"],["","\n\nThrows the error created by "],["Identifier","C<create_error>"],[""," using "],["Identifier","C<raise_error>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]