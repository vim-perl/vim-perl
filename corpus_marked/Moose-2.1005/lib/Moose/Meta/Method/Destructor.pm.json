[["","\n"],["Statement","package"],["Type"," Moose::Meta::Method::Destructor"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Method::Destructor::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Method::Destructor::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Devel::GlobalDestruction ();\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'weaken'"],["",";\n"],["Statement","use "],["","Try::Tiny;\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::Method'"],["",",\n         "],["String","'Class::MOP::Method::Inlined'"],["",";\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = "],["Identifier","@_"],["",";\n\n    ("],["Operator","ref"],[""," "],["Identifier","$options{"],["String","options"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",")\n        || "],["Identifier","$class"],["","->throw_error("],["String","\"You must pass a hash of options\""],["",", "],["String","data"],[""," => "],["Identifier","$options{"],["String","options"],["Identifier","}"],["",");\n\n    ("],["Identifier","$options{"],["String","package_name"],["Identifier","}"],[""," && "],["Identifier","$options{"],["String","name"],["Identifier","}"],["",")\n        || "],["Identifier","$class"],["","->throw_error("],["String","\"You must supply the package_name and name parameters "],["Identifier","$"],["Type","Class::MOP::Method::"],["Identifier","UPGRADE_ERROR_TEXT"],["String","\""],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Operator","bless"],[""," {\n        "],["Comment","# from our superclass"],["","\n        "],["String","'body'"],["","                 => "],["Operator","undef"],["",",\n        "],["String","'package_name'"],["","         => "],["Identifier","$options{"],["String","package_name"],["Identifier","}"],["",",\n        "],["String","'name'"],["","                 => "],["Identifier","$options{"],["String","name"],["Identifier","}"],["",",\n        "],["Comment","# ..."],["","\n        "],["String","'options'"],["","              => "],["Identifier","$options{"],["String","options"],["Identifier","}"],["",",\n        "],["String","'definition_context'"],["","   => "],["Identifier","$options{"],["String","definition_context"],["Identifier","}"],["",",\n        "],["String","'associated_metaclass'"],[""," => "],["Identifier","$options{"],["String","metaclass"],["Identifier","}"],["",",\n    } => "],["Identifier","$class"],["",";\n\n    "],["Comment","# we don't want this creating"],["","\n    "],["Comment","# a cycle in the code, if not"],["","\n    "],["Comment","# needed"],["","\n    weaken("],["Identifier","$self->{"],["String","'associated_metaclass'"],["Identifier","}"],["",");\n\n    "],["Identifier","$self"],["","->_initialize_body;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Comment","## accessors"],["","\n\n"],["Keyword","sub "],["Function","options              "],["","{ ("],["Statement","shift"],["",")->{"],["String","'options'"],["","}              }\n\n"],["Comment","## method"],["","\n\n"],["Keyword","sub "],["Function","is_needed "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","      = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$metaclass"],[""," = "],["Statement","shift"],["",";\n\n    ( blessed "],["Identifier","$metaclass"],[""," && "],["Identifier","$metaclass"],["","->isa("],["String","'Class::MOP::Class'"],["",") )\n        || "],["Identifier","$self"],["","->throw_error(\n        "],["String","\"The is_needed method expected a metaclass object as its arugment\""],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$metaclass"],["","->find_method_by_name("],["String","\"DEMOLISHALL\""],["",");\n}\n\n"],["Keyword","sub "],["Function","initialize_body "],["","{\n    Carp::cluck("],["String","'The initialize_body method has been made private.'"],["","\n        . "],["String","\" The public version is deprecated and will be removed in a future release."],["Special","\\n"],["String","\""],["",");\n    "],["Statement","shift"],["","->_initialize_body;\n}\n\n"],["Keyword","sub "],["Function","_initialize_body "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Comment","# "],["Todo","TODO:"],["","\n    "],["Comment","# the %options should also include a both"],["","\n    "],["Comment","# a call 'initializer' and call 'SUPER::'"],["","\n    "],["Comment","# options, which should cover approx 90%"],["","\n    "],["Comment","# of the possible use cases (even if it"],["","\n    "],["Comment","# requires some adaption on the part of"],["","\n    "],["Comment","# the author, after all, nothing is free)"],["","\n\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->associated_metaclass->name;\n    "],["Statement","my"],[""," "],["Identifier","@source"],[""," = (\n        "],["String","'sub {'"],["",",\n            "],["String","'my $self = shift;'"],["",",\n            "],["String","'return '"],[""," . "],["Identifier","$self"],["","->_generate_fallback_destructor("],["String","'$self'"],["","),\n                "],["String","'if Scalar::Util::blessed($self) ne \\''"],[""," . "],["Identifier","$class"],[""," . "],["String","'\\';'"],["",",\n            "],["Identifier","$self"],["","->_generate_DEMOLISHALL("],["String","'$self'"],["","),\n            "],["String","'return;'"],["",",\n        "],["String","'}'"],["",",\n    );\n    "],["Statement","warn"],[""," "],["Statement","join"],["","("],["String","\""],["Special","\\n"],["String","\""],["",", "],["Identifier","@source"],["",") "],["Conditional","if"],[""," "],["Identifier","$self"],["","->options->{debug};\n\n    "],["Statement","my"],[""," "],["Identifier","$code"],[""," = try {\n        "],["Identifier","$self"],["","->_compile_code("],["String","source"],[""," => \\"],["Identifier","@source"],["",");\n    }\n    catch {\n        "],["Statement","my"],[""," "],["Identifier","$source"],[""," = "],["Statement","join"],["","("],["String","\""],["Special","\\n"],["String","\""],["",", "],["Identifier","@source"],["",");\n        "],["Identifier","$self"],["","->throw_error(\n            "],["String","\"Could not eval the destructor :"],["Special","\\n\\n"],["Identifier","$source"],["Special","\\n\\n"],["String","because :"],["Special","\\n\\n"],["Identifier","$_"],["String","\""],["",",\n            "],["String","error"],[""," => "],["Identifier","$_"],["",",\n            "],["String","data"],["","  => "],["Identifier","$source"],["",",\n        );\n    };\n\n    "],["Identifier","$self->{"],["String","'body'"],["Identifier","}"],[""," = "],["Identifier","$code"],["",";\n}\n\n"],["Keyword","sub "],["Function","_generate_fallback_destructor "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$inv"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$inv"],[""," . "],["String","'->Moose::Object::DESTROY(@_)'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_generate_DEMOLISHALL "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$inv"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@methods"],[""," = "],["Identifier","$self"],["","->associated_metaclass->find_all_methods_by_name("],["String","'DEMOLISH'"],["",");\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@methods"],["",";\n\n    "],["Statement","return"],[""," (\n        "],["String","'local $?;'"],["",",\n        "],["String","'my $igd = Devel::GlobalDestruction::in_global_destruction;'"],["",",\n        "],["String","'Try::Tiny::try {'"],["",",\n            ("],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$inv"],[""," . "],["String","'->'"],[""," . "],["Identifier","$_->{"],["String","class"],["Identifier","}"],[""," . "],["String","'::DEMOLISH($igd);'"],[""," "],["Statement","}"],[""," "],["Identifier","@methods"],["","),\n        "],["String","'}'"],["",",\n        "],["String","'Try::Tiny::catch {'"],["",",\n            "],["String","'die $_;'"],["",",\n        "],["String","'};'"],["",",\n    );\n}\n\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Method Meta Object for destructors"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Method::Destructor - Method Meta Object for destructors\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class is a subclass of "],["Identifier","L<Class::MOP::Method::Inlined>"],[""," that\nprovides Moose-specific functionality for inlining destructors.\n\nTo understand this class, you should read the\n"],["Identifier","L<Class::MOP::Method::Inlined>"],[""," documentation as well.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::Method::Destructor>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::Method>"],[""," "],["Identifier","I<and>"],[""," "],["Identifier","L<Class::MOP::Method::Inlined>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Method::Destructor->new(%options) >>"],["","\n\nThis constructs a new object. It accepts the following options:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* package_name"],["","\n\nThe package for the class in which the destructor is being\ninlined. This option is required.\n\n"],["Statement","=item"],[""," "],["String","* name"],["","\n\nThe name of the destructor method. This option is required.\n\n"],["Statement","=item"],[""," "],["String","* metaclass"],["","\n\nThe metaclass for the class this destructor belongs to. This is\noptional, as it can be set later by calling "],["Identifier","C<<"],["","\n"],["Identifier","$metamethod->attach_to_class >>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta;:Method::Destructor->is_needed($metaclass) >>"],["","\n\nGiven a "],["Identifier","L<Moose::Meta::Class>"],[""," object, this method returns a boolean\nindicating whether the class needs a destructor. If the class or any\nof its parents defines a "],["Identifier","C<DEMOLISH>"],[""," method, it needs a destructor.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]