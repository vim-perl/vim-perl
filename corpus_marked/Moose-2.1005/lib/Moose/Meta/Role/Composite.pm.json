[["Statement","package"],["Type"," Moose::Meta::Role::Composite"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Role::Composite::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Role::Composite::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","Class::Load "],["String","qw(load_class)"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::Role'"],["",";\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# we need to override the ->name"],["","\n"],["Comment","# method from Class::MOP::Package"],["","\n"],["Comment","# since we don't have an actual"],["","\n"],["Comment","# package for this."],["","\n"],["Comment","# - SL"],["","\n__PACKAGE__->meta->add_attribute("],["String","'name'"],[""," => (\n    "],["String","reader"],[""," => "],["String","'name'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Comment","# "],["Todo","NOTE:"],["","\n"],["Comment","# Again, since we don't have a real"],["","\n"],["Comment","# package to store our methods in,"],["","\n"],["Comment","# we use a HASH ref instead."],["","\n"],["Comment","# - SL"],["","\n__PACKAGE__->meta->add_attribute("],["String","'_methods'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'_method_map'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ {} },\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute(\n    "],["String","'application_role_summation_class'"],["",",\n    "],["String","reader"],["","  => "],["String","'application_role_summation_class'"],["",",\n    "],["String","default"],[""," => "],["String","'Moose::Meta::Role::Application::RoleSummation'"],["",",\n    Class::MOP::_definition_context(),\n);\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","%params"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Comment","# the roles param is required ..."],["","\n    "],["Repeat","foreach"],[""," ( "],["Identifier","@{$params{"],["String","roles"],["Identifier","}}"],[""," ) {\n        "],["Conditional","unless"],[""," ( "],["Identifier","$_"],["","->isa("],["String","'Moose::Meta::Role'"],["",") ) {\n            "],["Statement","require"],[""," Moose;\n            Moose->throw_error("],["String","\"The list of roles must be instances of Moose::Meta::Role, not "],["Identifier","$_"],["String","\""],["",");\n        }\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","@composition_roles"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Identifier","$_"],["","->composition_class_roles\n    "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$params{"],["String","roles"],["Identifier","}"],[""," "],["Identifier","}"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","@composition_roles"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Moose::Meta::Class->create_anon_class(\n            "],["String","superclasses"],[""," => [ "],["Identifier","$class"],[""," ],\n            "],["String","roles"],["","        => [ "],["Identifier","@composition_roles"],[""," ],\n            "],["String","cache"],["","        => "],["Number","1"],["",",\n        );\n        "],["Identifier","$class"],[""," = "],["Identifier","$meta"],["","->name;\n    }\n\n    "],["Comment","# and the name is created from the"],["","\n    "],["Comment","# roles if one has not been provided"],["","\n    "],["Identifier","$params{"],["String","name"],["Identifier","}"],[""," ||= ("],["Statement","join"],[""," "],["String","\"|\""],[""," => "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],[""," "],["Identifier","@{$params{"],["String","roles"],["Identifier","}}"],["",");\n    "],["Identifier","$class"],["","->_new(\\"],["Identifier","%params"],["",");\n}\n\n"],["Comment","# This is largely a copy of what's in Moose::Meta::Role (itself"],["","\n"],["Comment","# largely a copy of Class::MOP::Class). However, we can't actually"],["","\n"],["Comment","# call add_package_symbol, because there's no package into which to"],["","\n"],["Comment","# add the symbol."],["","\n"],["Keyword","sub "],["Function","add_method "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",", "],["Identifier","$method"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$method_name"],[""," && "],["Identifier","$method_name"],[""," ) {\n        Moose->throw_error("],["String","\"You must define a method name\""],["",");\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$body"],["",";\n    "],["Conditional","if"],[""," (blessed("],["Identifier","$method"],["",")) {\n        "],["Identifier","$body"],[""," = "],["Identifier","$method"],["","->body;\n        "],["Conditional","if"],[""," ("],["Identifier","$method"],["","->package_name "],["Operator","ne"],[""," "],["Identifier","$self"],["","->name) {\n            "],["Identifier","$method"],[""," = "],["Identifier","$method"],["","->clone(\n                "],["String","package_name"],[""," => "],["Identifier","$self"],["","->name,\n                "],["String","name"],["","         => "],["Identifier","$method_name"],["","\n            ) "],["Conditional","if"],[""," "],["Identifier","$method"],["","->can("],["String","'clone'"],["",");\n        }\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$body"],[""," = "],["Identifier","$method"],["",";\n        "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->wrap_method_body( "],["String","body"],[""," => "],["Identifier","$body"],["",", "],["String","name"],[""," => "],["Identifier","$method_name"],[""," );\n    }\n\n    "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","} = "],["Identifier","$method"],["",";\n}\n\n"],["Keyword","sub "],["Function","get_method_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Statement","keys"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_method_map "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","_get_local_methods "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Statement","values"],[""," "],["Identifier","%{"],[""," "],["Identifier","$self"],["","->_method_map "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","has_method "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Statement","exists"],[""," "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","};\n}\n\n"],["Keyword","sub "],["Function","get_method "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$method_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_method_map->{"],["Identifier","$method_name"],["","};\n}\n\n"],["Keyword","sub "],["Function","apply_params "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role_params"],["",") = "],["Identifier","@_"],["",";\n    load_class("],["Identifier","$self"],["","->application_role_summation_class);\n\n    "],["Identifier","$self"],["","->application_role_summation_class->new(\n        "],["String","role_params"],[""," => "],["Identifier","$role_params"],["",",\n    )->apply("],["Identifier","$self"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","reinitialize "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$old_meta"],["",", "],["Identifier","@args"],[""," ) = "],["Identifier","@_"],["",";\n\n    Moose->throw_error(\n        "],["String","'Moose::Meta::Role::Composite instances can only be reinitialized from an existing metaclass instance'"],["","\n        )\n        "],["Conditional","if"],[""," !blessed "],["Identifier","$old_meta"],["","\n            || !"],["Identifier","$old_meta"],["","->isa("],["String","'Moose::Meta::Role::Composite'"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","%existing_classes"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$old_meta"],["","->"],["Identifier","$_"],["","() "],["Statement","}"],[""," "],["String","qw("],["","\n"],["String","        application_role_summation_class"],["","\n"],["String","    )"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$old_meta"],["","->meta->clone_object( "],["Identifier","$old_meta"],["",", "],["Identifier","%existing_classes"],["",", "],["Identifier","@args"],[""," );\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: An object to represent the set of roles"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Role::Composite - An object to represent the set of roles\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nA composite is a role that consists of a set of two or more roles.\n\nThe API of a composite role is almost identical to that of a regular\nrole.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::Role::Composite>"],[""," is a subclass of "],["Identifier","L<Moose::Meta::Role>"],["",".\n\n"],["Statement","=head2"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Role::Composite->new(%options) >>"],["","\n\nThis returns a new composite role object. It accepts the same\noptions as its parent class, with a few changes:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* roles"],["","\n\nThis option is an array reference containing a list of\n"],["Identifier","L<Moose::Meta::Role>"],[""," object. This is a required option.\n\n"],["Statement","=item"],[""," "],["String","* name"],["","\n\nIf a name is not given, one is generated from the roles provided.\n\n"],["Statement","=item"],[""," "],["String","* apply_params(\\%role_params)"],["","\n\nCreates a new RoleSummation role application with "],["Identifier","C<%role_params>"],[""," and applies\nthe composite role to it. The RoleSummation role application class used is\ndetermined by the composite role's "],["Identifier","C<application_role_summation_class>"],["","\nattribute.\n\n"],["Statement","=item"],[""," "],["String","* reinitialize($metaclass)"],["","\n\nLike "],["Identifier","C<< Class::MOP::Package->reinitialize >>"],["",", but doesn't allow passing a\nstring with the package name, as there is no real package for composite roles.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]