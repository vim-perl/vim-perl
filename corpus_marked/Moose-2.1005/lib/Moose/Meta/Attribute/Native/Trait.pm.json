[["","\n"],["Statement","package"],["Type"," Moose::Meta::Attribute::Native::Trait"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::Trait::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::Trait::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n"],["Statement","use "],["","Moose::Role;\n\n"],["Statement","use "],["","Class::Load "],["String","qw(load_class)"],["",";\n"],["Statement","use "],["","List::MoreUtils "],["String","qw( any uniq )"],["",";\n"],["Statement","use "],["","Moose::Deprecated;\n"],["Statement","use "],["","Moose::Util;\n"],["Statement","use "],["","Moose::Util::TypeConstraints;\n\nrequires "],["String","'_helper_type'"],["",";\n\nhas "],["String","_used_default_is"],[""," => (\n    "],["String","is"],["","      => "],["String","'rw'"],["",",\n    "],["String","isa"],["","     => "],["String","'Bool'"],["",",\n    "],["String","default"],[""," => "],["Number","0"],["",",\n);\n\nbefore "],["String","'_process_options'"],[""," => "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$self"],["","->_check_helper_type( "],["Identifier","$options"],["",", "],["Identifier","$name"],[""," );\n\n    "],["Conditional","if"],[""," ( !( any { "],["Statement","exists"],[""," "],["Identifier","$options->{$_}"],[""," } "],["String","qw( is reader writer accessor )"],[""," )\n        && "],["Identifier","$self"],["","->can("],["String","'_default_is'"],["",") ) {\n\n        "],["Identifier","$options->{"],["String","is"],["Identifier","}"],[""," = "],["Identifier","$self"],["","->_default_is;\n\n        "],["Identifier","$options->{"],["String","_used_default_is"],["Identifier","}"],[""," = "],["Number","1"],["",";\n    }\n\n    "],["Conditional","if"],[""," (\n        !(\n            "],["Identifier","$options->{"],["String","required"],["Identifier","}"],["","\n            || any { "],["Statement","exists"],[""," "],["Identifier","$options->{$_}"],[""," } "],["String","qw( default builder lazy_build )"],["","\n        )\n        && "],["Identifier","$self"],["","->can("],["String","'_default_default'"],["",")\n        ) {\n\n        "],["Identifier","$options->{"],["String","default"],["Identifier","}"],[""," = "],["Identifier","$self"],["","->_default_default;\n\n        Moose::Deprecated::deprecated(\n            "],["String","feature"],[""," => "],["String","'default default for Native Trait'"],["",",\n            "],["String","message"],[""," =>\n                "],["String","'Allowing a native trait to automatically supply a default is deprecated.'"],["","\n                . "],["String","' You can avoid this warning by supplying a default, builder, or making the attribute required'"],["","\n        );\n    }\n};\n\nafter "],["String","'install_accessors'"],[""," => "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->_used_default_is;\n\n    "],["Statement","my"],[""," "],["Identifier","@methods"],["","\n        = "],["Identifier","$self"],["","->_default_is "],["Operator","eq"],[""," "],["String","'rw'"],["","\n        ? "],["String","qw( reader writer accessor )"],["","\n        : "],["String","'reader'"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$self"],["","->name;\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->associated_class->name;\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$meth"],[""," ( uniq "],["Statement","grep"],[""," "],["Statement","{"],["Operator","defined"],["Statement","}"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$self"],["","->"],["Identifier","$_"],[""," "],["Statement","}"],[""," "],["Identifier","@methods"],[""," ) {\n\n        "],["Statement","my"],[""," "],["Identifier","$message"],["","\n            = "],["String","\"The "],["Identifier","$meth"],["String"," method in the "],["Identifier","$class"],["String"," class was automatically created\""],["","\n            . "],["String","\" by the native delegation trait for the "],["Identifier","$name"],["String"," attribute.\""],["","\n            . "],["String","q{ This \"default is\" feature is deprecated.}"],["","\n            . "],["String","q{ Explicitly set \"is\" or define accessor names to avoid this}"],["",";\n\n        "],["Identifier","$self"],["","->associated_class->add_before_method_modifier(\n            "],["Identifier","$meth"],[""," => "],["Keyword","sub "],["","{\n                Moose::Deprecated::deprecated(\n                    "],["String","feature"],[""," => "],["String","'default is for Native Trait'"],["",",\n                    "],["String","message"],[""," =>"],["Identifier","$message"],["",",\n                );\n            }\n        );\n    }\n    };\n\n"],["Keyword","sub "],["Function","_check_helper_type "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$options"],["",", "],["Identifier","$name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$type"],[""," = "],["Identifier","$self"],["","->_helper_type;\n\n    "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],[""," = "],["Identifier","$type"],["","\n        "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$isa"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$isa_name"],["",";\n\n    "],["Conditional","if"],[""," (\n        Moose::Util::does_role(\n            "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",", "],["String","'Specio::Constraint::Role::Interface'"],["","\n        )\n        ) {\n\n        "],["Identifier","$isa"],[""," = "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",";\n        "],["Statement","require"],[""," Specio::Library::Builtins;\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$isa"],["","->is_a_type_of( Specio::Library::Builtins::t("],["Identifier","$type"],["",") );\n        "],["Identifier","$isa_name"],[""," = "],["Identifier","$isa"],["","->name() || "],["Identifier","$isa"],["","->description();\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$isa"],[""," = Moose::Util::TypeConstraints::find_or_create_type_constraint(\n            "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],[""," );\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$isa"],["","->is_a_type_of("],["Identifier","$type"],["",");\n        "],["Identifier","$isa_name"],[""," = "],["Identifier","$isa"],["","->name();\n    }\n\n    confess\n        "],["String","\"The type constraint for "],["Identifier","$name"],["String"," must be a subtype of "],["Identifier","$type"],["String"," but it's a "],["Identifier","$isa_name"],["String","\""],["",";\n}\n\nbefore "],["String","'install_accessors'"],[""," => "],["Keyword","sub "],["","{ ("],["Statement","shift"],["",")->_check_handles_values };\n\n"],["Keyword","sub "],["Function","_check_handles_values "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%handles"],[""," = "],["Identifier","$self"],["","->_canonicalize_handles;\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$original_method"],[""," ( "],["Statement","values"],[""," "],["Identifier","%handles"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Identifier","$original_method->["],["Number","0"],["Identifier","]"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$accessor_class"],[""," = "],["Identifier","$self"],["","->_native_accessor_class_for("],["Identifier","$name"],["",");\n\n        ( "],["Identifier","$accessor_class"],[""," && "],["Identifier","$accessor_class"],["","->can("],["String","'new'"],["",") )\n            || confess\n            "],["String","\""],["Identifier","$name"],["String"," is an unsupported method type - "],["Identifier","$accessor_class"],["String","\""],["",";\n    }\n}\n\naround "],["String","'_canonicalize_handles'"],[""," => "],["Keyword","sub "],["","{\n    "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","    = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$handles"],[""," = "],["Identifier","$self"],["","->handles;\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$handles"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["String","'HASH'"],[""," "],["Operator","eq"],[""," "],["Operator","ref"],[""," "],["Identifier","$handles"],[""," ) {\n        "],["Identifier","$self"],["","->throw_error(\n            "],["String","\"The 'handles' option must be a HASH reference, not "],["Identifier","$handles"],["String","\""],["",");\n    }\n\n    "],["Statement","return"],["","\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$self"],["","->_canonicalize_handles_value( "],["Identifier","$handles->{$_}"],[""," ) "],["Statement","}"],["","\n        "],["Statement","keys"],[""," "],["Identifier","%$handles"],["",";\n};\n\n"],["Keyword","sub "],["Function","_canonicalize_handles_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$value"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Operator","ref"],[""," "],["Identifier","$value"],[""," && "],["String","'ARRAY'"],[""," "],["Operator","ne"],[""," "],["Operator","ref"],[""," "],["Identifier","$value"],[""," ) {\n        "],["Identifier","$self"],["","->throw_error(\n            "],["String","\"All values passed to handles must be strings or ARRAY references, not "],["Identifier","$value"],["String","\""],["","\n        );\n    }\n\n    "],["Statement","return"],[""," "],["Operator","ref"],[""," "],["Identifier","$value"],[""," ? "],["Identifier","$value"],[""," : ["],["Identifier","$value"],["","];\n}\n\naround "],["String","'_make_delegation_method'"],[""," => "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$next"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$handle_name"],["",", "],["Identifier","$method_to_call"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," ( "],["Identifier","$name"],["",", "],["Identifier","@curried_args"],[""," ) = "],["Identifier","@$method_to_call"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$accessor_class"],[""," = "],["Identifier","$self"],["","->_native_accessor_class_for("],["Identifier","$name"],["",");\n\n    "],["Statement","die"],[""," "],["String","\"Cannot find an accessor class for "],["Identifier","$name"],["String","\""],["","\n        "],["Conditional","unless"],[""," "],["Identifier","$accessor_class"],[""," && "],["Identifier","$accessor_class"],["","->can("],["String","'new'"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$accessor_class"],["","->new(\n        "],["String","name"],["","               => "],["Identifier","$handle_name"],["",",\n        "],["String","package_name"],["","       => "],["Identifier","$self"],["","->associated_class->name,\n        "],["String","delegate_to_method"],[""," => "],["Identifier","$name"],["",",\n        "],["String","attribute"],["","          => "],["Identifier","$self"],["",",\n        "],["String","is_inline"],["","          => "],["Number","1"],["",",\n        "],["String","curried_arguments"],["","  => \\"],["Identifier","@curried_args"],["",",\n        "],["String","root_types"],["","         => [ "],["Identifier","$self"],["","->_root_types ],\n    );\n};\n\n"],["Keyword","sub "],["Function","_root_types "],["","{\n    "],["Statement","return"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->_helper_type;\n}\n\n"],["Keyword","sub "],["Function","_native_accessor_class_for "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$suffix"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$role"],["","\n        = "],["String","'Moose::Meta::Method::Accessor::Native::'"],["","\n        . "],["Identifier","$self"],["","->_native_type . "],["String","'::'"],["","\n        . "],["Identifier","$suffix"],["",";\n\n    load_class("],["Identifier","$role"],["",");\n    "],["Statement","return"],[""," Moose::Meta::Class->create_anon_class(\n        "],["String","superclasses"],[""," =>\n            [ "],["Identifier","$self"],["","->accessor_metaclass, "],["Identifier","$self"],["","->delegation_metaclass ],\n        "],["String","roles"],[""," => ["],["Identifier","$role"],["","],\n        "],["String","cache"],[""," => "],["Number","1"],["",",\n    )->name;\n}\n\n"],["Keyword","sub "],["Function","_build_native_type "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$role_name"],[""," ( "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],[""," "],["Identifier","$self"],["","->meta->calculate_all_roles ) {\n        "],["Statement","return"],[""," "],["Identifier","$1"],[""," "],["Conditional","if"],[""," "],["Identifier","$role_name"],[""," =~ "],["Statement","/"],["String","::Native::Trait::"],["Special","(\\w+)"],["String","$"],["Statement","/"],["",";\n    }\n\n    "],["Statement","die"],[""," "],["String","\"Cannot calculate native type for \""],[""," . "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n}\n\nhas "],["String","'_native_type'"],[""," => (\n    "],["String","is"],["","      => "],["String","'ro'"],["",",\n    "],["String","isa"],["","     => "],["String","'Str'"],["",",\n    "],["String","lazy"],["","    => "],["Number","1"],["",",\n    "],["String","builder"],[""," => "],["String","'_build_native_type'"],["",",\n);\n\n"],["Statement","no "],["","Moose::Role;\n"],["Statement","no "],["","Moose::Util::TypeConstraints;\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Shared role for native delegation traits"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Attribute::Native::Trait - Shared role for native delegation traits\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","SEE ALSO"],["","\n\nDocumentation for Moose native traits can be found in\n"],["Identifier","L<Moose::Meta::Attribute::Native>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]