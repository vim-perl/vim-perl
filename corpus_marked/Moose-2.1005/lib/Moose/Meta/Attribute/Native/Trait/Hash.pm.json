[["","\n"],["Statement","package"],["Type"," Moose::Meta::Attribute::Native::Trait::Hash"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::Trait::Hash::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::Trait::Hash::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n"],["Statement","use "],["","Moose::Role;\n\nwith "],["String","'Moose::Meta::Attribute::Native::Trait'"],["",";\n\n"],["Keyword","sub "],["Function","_helper_type "],["","{ "],["String","'HashRef'"],[""," }\n\n"],["Statement","no "],["","Moose::Role;\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Helper trait for HashRef attributes"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Attribute::Native::Trait::Hash - Helper trait for HashRef attributes\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  package Stuff;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  has 'options' => ("],["","\n"],["PreProc","      traits    => ['Hash'],"],["","\n"],["PreProc","      is        => 'ro',"],["","\n"],["PreProc","      isa       => 'HashRef[Str]',"],["","\n"],["PreProc","      default   => sub { {} },"],["","\n"],["PreProc","      handles   => {"],["","\n"],["PreProc","          set_option     => 'set',"],["","\n"],["PreProc","          get_option     => 'get',"],["","\n"],["PreProc","          has_no_options => 'is_empty',"],["","\n"],["PreProc","          num_options    => 'count',"],["","\n"],["PreProc","          delete_option  => 'delete',"],["","\n"],["PreProc","          option_pairs   => 'kv',"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  );"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis trait provides native delegation methods for hash references.\n\n"],["Statement","=head1"],[""," "],["String","PROVIDED METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<get($key, $key2, $key3...)>"],["","\n\nReturns values from the hash.\n\nIn list context it returns a list of values in the hash for the given keys. In\nscalar context it returns the value for the last key specified.\n\nThis method requires at least one argument.\n\n"],["Statement","=item"],[""," "],["Identifier","B<set($key =E<"],["Constant","gt"],["Identifier","> $value, $key2 =E<"],["Constant","gt"],["Identifier","> $value2...)>"],["","\n\nSets the elements in the hash to the given values. It returns the new values\nset for each key, in the same order as the keys passed to the method.\n\nThis method requires at least two arguments, and expects an even number of\narguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<delete($key, $key2, $key3...)>"],["","\n\nRemoves the elements with the given keys.\n\nIn list context it returns a list of values in the hash for the deleted\nkeys. In scalar context it returns the value for the last key specified.\n\n"],["Statement","=item"],[""," "],["Identifier","B<keys>"],["","\n\nReturns the list of keys in the hash.\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<exists($key)>"],["","\n\nReturns true if the given key is present in the hash.\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["Identifier","B<defined($key)>"],["","\n\nReturns true if the value of a given key is defined.\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["Identifier","B<values>"],["","\n\nReturns the list of values in the hash.\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<kv>"],["","\n\nReturns the key/value pairs in the hash as an array of array references.\n\n"],["PreProc","  for my $pair ( $object->option_pairs ) {"],["","\n"],["PreProc","      print \"$pair->[0] = $pair->[1]\\n\";"],["","\n"],["PreProc","  }"],["","\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<elements>"],["","\n\nReturns the key/value pairs in the hash as a flattened list..\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<clear>"],["","\n\nResets the hash to an empty value, like "],["Identifier","C<%hash = ()>"],["",".\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<count>"],["","\n\nReturns the number of elements in the hash. Also useful for not empty:\n"],["Identifier","C<< has_options => 'count' >>"],["",".\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<is_empty>"],["","\n\nIf the hash is populated, returns false. Otherwise, returns true.\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","B<accessor($key)>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<accessor($key, $value)>"],["","\n\nIf passed one argument, returns the value of the specified key. If passed two\narguments, sets the value of the specified key.\n\nWhen called as a setter, this method returns the value that was set.\n\n"],["Statement","=item"],[""," "],["Identifier","B<shallow_clone>"],["","\n\nThis method returns a shallow clone of the hash reference.  The return value\nis a reference to a new hash with the same keys and values.  It is "],["Identifier","I<shallow>"],["","\nbecause any values that were references in the original will be the "],["Identifier","I<same>"],["","\nreferences in the clone.\n\n"],["Statement","=back"],["","\n\nNote that "],["Identifier","C<each>"],[""," is deliberately omitted, due to its stateful interaction\nwith the hash iterator. "],["Identifier","C<keys>"],[""," or "],["Identifier","C<kv>"],[""," are much safer.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<meta>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]