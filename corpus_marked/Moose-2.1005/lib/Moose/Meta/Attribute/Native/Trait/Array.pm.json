[["","\n"],["Statement","package"],["Type"," Moose::Meta::Attribute::Native::Trait::Array"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::Trait::Array::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::Trait::Array::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n"],["Statement","use "],["","Moose::Role;\n\nwith "],["String","'Moose::Meta::Attribute::Native::Trait'"],["",";\n\n"],["Keyword","sub "],["Function","_helper_type "],["","{ "],["String","'ArrayRef'"],[""," }\n\n"],["Statement","no "],["","Moose::Role;\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Helper trait for ArrayRef attributes"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Attribute::Native::Trait::Array - Helper trait for ArrayRef attributes\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","    package Stuff;"],["","\n"],["PreProc","    use Moose;"],["","\n\n"],["PreProc","    has 'options' => ("],["","\n"],["PreProc","        traits  => ['Array'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'ArrayRef[Str]',"],["","\n"],["PreProc","        default => sub { [] },"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            all_options    => 'elements',"],["","\n"],["PreProc","            add_option     => 'push',"],["","\n"],["PreProc","            map_options    => 'map',"],["","\n"],["PreProc","            filter_options => 'grep',"],["","\n"],["PreProc","            find_option    => 'first',"],["","\n"],["PreProc","            get_option     => 'get',"],["","\n"],["PreProc","            join_options   => 'join',"],["","\n"],["PreProc","            count_options  => 'count',"],["","\n"],["PreProc","            has_options    => 'count',"],["","\n"],["PreProc","            has_no_options => 'is_empty',"],["","\n"],["PreProc","            sorted_options => 'sort',"],["","\n"],["PreProc","        },"],["","\n"],["PreProc","    );"],["","\n\n"],["PreProc","    no Moose;"],["","\n"],["PreProc","    1;"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis trait provides native delegation methods for array references.\n\n"],["Statement","=head1"],[""," "],["String","DEFAULT TYPE"],["","\n\nIf you don't provide an "],["Identifier","C<isa>"],[""," value for your attribute, it will default to\n"],["Identifier","C<ArrayRef>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","PROVIDED METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<count>"],["","\n\nReturns the number of elements in the array.\n\n"],["PreProc","  $stuff = Stuff->new;"],["","\n"],["PreProc","  $stuff->options( [ \"foo\", \"bar\", \"baz\", \"boo\" ] );"],["","\n\n"],["PreProc","  print $stuff->count_options; # prints 4"],["","\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<is_empty>"],["","\n\nReturns a boolean value that is true when the array has no elements.\n\n"],["PreProc","  $stuff->has_no_options ? die \"No options!\\n\" : print \"Good boy.\\n\";"],["","\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<elements>"],["","\n\nReturns all of the elements of the array as an array (not an array reference).\n\n"],["PreProc","  my @option = $stuff->all_options;"],["","\n"],["PreProc","  print \"@options\\n\";    # prints \"foo bar baz boo\""],["","\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<get($index)>"],["","\n\nReturns an element of the array by its index. You can also use negative index\nnumbers, just as with Perl's core array handling.\n\n"],["PreProc","  my $option = $stuff->get_option(1);"],["","\n"],["PreProc","  print \"$option\\n\";    # prints \"bar\""],["","\n\nIf the specified element does not exist, this will return "],["Identifier","C<undef>"],["",".\n\nThis method accepts just one argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<pop>"],["","\n\nJust like Perl's builtin "],["Identifier","C<pop>"],["",".\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<push($value1, $value2, value3 ...)>"],["","\n\nJust like Perl's builtin "],["Identifier","C<push>"],["",". Returns the number of elements in the new\narray.\n\nThis method accepts any number of arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<shift>"],["","\n\nJust like Perl's builtin "],["Identifier","C<shift>"],["",".\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<unshift($value1, $value2, value3 ...)>"],["","\n\nJust like Perl's builtin "],["Identifier","C<unshift>"],["",". Returns the number of elements in the new\narray.\n\nThis method accepts any number of arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<splice($offset, $length, @values)>"],["","\n\nJust like Perl's builtin "],["Identifier","C<splice>"],["",". In scalar context, this returns the last\nelement removed, or "],["Identifier","C<undef>"],[""," if no elements were removed. In list context,\nthis returns all the elements removed from the array.\n\nThis method requires at least one argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<first( sub { ... } )>"],["","\n\nThis method returns the first matching item in the array, just like\n"],["Identifier","L<List::Util>"],["","'s "],["Identifier","C<first>"],[""," function. The matching is done with a subroutine\nreference you pass to this method. The subroutine will be called against each\nelement in the array until one matches or all elements have been checked.\n\n"],["PreProc","  my $found = $stuff->find_option( sub {/^b/} );"],["","\n"],["PreProc","  print \"$found\\n\";    # prints \"bar\""],["","\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<first_index( sub { ... } )>"],["","\n\nThis method returns the index of the first matching item in the array, just\nlike "],["Identifier","L<List::MoreUtils>"],["","'s "],["Identifier","C<first_index>"],[""," function. The matching is done with a\nsubroutine reference you pass to this method. The subroutine will be called\nagainst each element in the array until one matches or all elements have been\nchecked.\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<grep( sub { ... } )>"],["","\n\nThis method returns every element matching a given criteria, just like Perl's\ncore "],["Identifier","C<grep>"],[""," function. This method requires a subroutine which implements the\nmatching logic.\n\n"],["PreProc","  my @found = $stuff->filter_options( sub {/^b/} );"],["","\n"],["PreProc","  print \"@found\\n\";    # prints \"bar baz boo\""],["","\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<map( sub { ... } )>"],["","\n\nThis method transforms every element in the array and returns a new array,\njust like Perl's core "],["Identifier","C<map>"],[""," function. This method requires a subroutine which\nimplements the transformation.\n\n"],["PreProc","  my @mod_options = $stuff->map_options( sub { $_ . \"-tag\" } );"],["","\n"],["PreProc","  print \"@mod_options\\n\";    # prints \"foo-tag bar-tag baz-tag boo-tag\""],["","\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<reduce( sub { ... } )>"],["","\n\nThis method turns an array into a single value, by passing a function the\nvalue so far and the next value in the array, just like "],["Identifier","L<List::Util>"],["","'s\n"],["Identifier","C<reduce>"],[""," function. The reducing is done with a subroutine reference you pass\nto this method.\n\n"],["PreProc","  my $found = $stuff->reduce_options( sub { $_[0] . $_[1] } );"],["","\n"],["PreProc","  print \"$found\\n\";    # prints \"foobarbazboo\""],["","\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<sort>"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<sort( sub { ... } )>"],["","\n\nReturns the elements of the array in sorted order.\n\nYou can provide an optional subroutine reference to sort with (as you can with\nPerl's core "],["Identifier","C<sort>"],[""," function). However, instead of using "],["Identifier","C<$a>"],[""," and "],["Identifier","C<$b>"],[""," in\nthis subroutine, you will need to use "],["Identifier","C<$_[0]>"],[""," and "],["Identifier","C<$_[1]>"],["",".\n\n"],["PreProc","  # ascending ASCIIbetical"],["","\n"],["PreProc","  my @sorted = $stuff->sort_options();"],["","\n\n"],["PreProc","  # Descending alphabetical order"],["","\n"],["PreProc","  my @sorted_options = $stuff->sort_options( sub { lc $_[1] cmp lc $_[0] } );"],["","\n"],["PreProc","  print \"@sorted_options\\n\";    # prints \"foo boo baz bar\""],["","\n\nThis method accepts a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<sort_in_place>"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<sort_in_place( sub { ... } )>"],["","\n\nSorts the array "],["Identifier","I<in place>"],["",", modifying the value of the attribute.\n\nYou can provide an optional subroutine reference to sort with (as you can with\nPerl's core "],["Identifier","C<sort>"],[""," function). However, instead of using "],["Identifier","C<$a>"],[""," and "],["Identifier","C<$b>"],["",", you\nwill need to use "],["Identifier","C<$_[0]>"],[""," and "],["Identifier","C<$_[1]>"],[""," instead.\n\nThis method does not define a return value.\n\nThis method accepts a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<shuffle>"],["","\n\nReturns the elements of the array in random order, like "],["Identifier","C<shuffle>"],[""," from\n"],["Identifier","L<List::Util>"],["",".\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<uniq>"],["","\n\nReturns the array with all duplicate elements removed, like "],["Identifier","C<uniq>"],[""," from\n"],["Identifier","L<List::MoreUtils>"],["",".\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<join($str)>"],["","\n\nJoins every element of the array using the separator given as argument, just\nlike Perl's core "],["Identifier","C<join>"],[""," function.\n\n"],["PreProc","  my $joined = $stuff->join_options(':');"],["","\n"],["PreProc","  print \"$joined\\n\";    # prints \"foo:bar:baz:boo\""],["","\n\nThis method requires a single argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<set($index, $value)>"],["","\n\nGiven an index and a value, sets the specified array element's value.\n\nThis method returns the value at "],["Identifier","C<$index>"],[""," after the set.\n\nThis method requires two arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<delete($index)>"],["","\n\nRemoves the element at the given index from the array.\n\nThis method returns the deleted value. Note that if no value exists, it will\nreturn "],["Identifier","C<undef>"],["",".\n\nThis method requires one argument.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<insert($index, $value)>"],["","\n\nInserts a new element into the array at the given index.\n\nThis method returns the new value at "],["Identifier","C<$index>"],["",".\n\nThis method requires two arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<clear>"],["","\n\nEmpties the entire array, like "],["Identifier","C<@array = ()>"],["",".\n\nThis method does not define a return value.\n\nThis method does not accept any arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<accessor($index)>"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<accessor($index, $value)>"],["","\n\nThis method provides a get/set accessor for the array, based on array indexes.\nIf passed one argument, it returns the value at the specified index.  If\npassed two arguments, it sets the value of the specified index.\n\nWhen called as a setter, this method returns the new value at "],["Identifier","C<$index>"],["",".\n\nThis method accepts one or two arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<natatime($n)>"],["","\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<natatime($n, $code)>"],["","\n\nThis method returns an iterator which, on each call, returns "],["Identifier","C<$n>"],[""," more items\nfrom the array, in order, like "],["Identifier","C<natatime>"],[""," from "],["Identifier","L<List::MoreUtils>"],["",".\n\nIf you pass a coderef as the second argument, then this code ref will be\ncalled on each group of "],["Identifier","C<$n>"],[""," elements in the array until the array is\nexhausted.\n\nThis method accepts one or two arguments.\n\n"],["Statement","=item"],[""," "],["String","* "],["Identifier","B<shallow_clone>"],["","\n\nThis method returns a shallow clone of the array reference.  The return value\nis a reference to a new array with the same elements.  It is "],["Identifier","I<shallow>"],["","\nbecause any elements that were references in the original will be the "],["Identifier","I<same>"],["","\nreferences in the clone.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]