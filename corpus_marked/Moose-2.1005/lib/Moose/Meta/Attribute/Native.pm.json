[["Statement","package"],["Type"," Moose::Meta::Attribute::Native"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Native::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use "],["","Class::Load "],["String","qw(load_class)"],["",";\n\n"],["Statement","my"],[""," "],["Identifier","@trait_names"],[""," = "],["String","qw(Bool Counter Number String Array Hash Code)"],["",";\n\n"],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$trait_name"],[""," ("],["Identifier","@trait_names"],["",") {\n    "],["Statement","my"],[""," "],["Identifier","$trait_class"],[""," = "],["String","\"Moose::Meta::Attribute::Native::Trait::"],["Identifier","$trait_name"],["String","\""],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize(\n        "],["String","\"Moose::Meta::Attribute::Custom::Trait::"],["Identifier","$trait_name"],["String","\""],["","\n    );\n    "],["Conditional","if"],[""," ("],["Identifier","$meta"],["","->find_method_by_name("],["String","'register_implementation'"],["",")) {\n        "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$meta"],["","->name->register_implementation;\n        Moose->throw_error(\n            "],["String","\"An implementation for "],["Identifier","$trait_name"],["String"," already exists \""],[""," .\n            "],["String","\"(found '"],["Identifier","$class"],["String","' when trying to register '"],["Identifier","$trait_class"],["String","')\""],["","\n        );\n    }\n    "],["Identifier","$meta"],["","->add_method("],["String","register_implementation"],[""," => "],["Keyword","sub "],["","{\n        "],["Comment","# resolve_metatrait_alias will load classes anyway, but throws away"],["","\n        "],["Comment","# their error message; we WANT to die if there's a problem"],["","\n        load_class("],["Identifier","$trait_class"],["",");\n        "],["Statement","return"],[""," "],["Identifier","$trait_class"],["",";\n    });\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Delegate to native Perl types"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Attribute::Native - Delegate to native Perl types\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  package MyClass;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  has 'mapping' => ("],["","\n"],["PreProc","      traits  => ['Hash'],"],["","\n"],["PreProc","      is      => 'rw',"],["","\n"],["PreProc","      isa     => 'HashRef[Str]',"],["","\n"],["PreProc","      default => sub { {} },"],["","\n"],["PreProc","      handles => {"],["","\n"],["PreProc","          exists_in_mapping => 'exists',"],["","\n"],["PreProc","          ids_in_mapping    => 'keys',"],["","\n"],["PreProc","          get_mapping       => 'get',"],["","\n"],["PreProc","          set_mapping       => 'set',"],["","\n"],["PreProc","          set_quantity      => [ set => 'quantity' ],"],["","\n"],["PreProc","      },"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  my $obj = MyClass->new;"],["","\n"],["PreProc","  $obj->set_quantity(10);      # quantity => 10"],["","\n"],["PreProc","  $obj->set_mapping('foo', 4); # foo => 4"],["","\n"],["PreProc","  $obj->set_mapping('bar', 5); # bar => 5"],["","\n"],["PreProc","  $obj->set_mapping('baz', 6); # baz => 6"],["","\n\n"],["PreProc","  # prints 5"],["","\n"],["PreProc","  print $obj->get_mapping('bar') if $obj->exists_in_mapping('bar');"],["","\n\n"],["PreProc","  # prints 'quantity, foo, bar, baz'"],["","\n"],["PreProc","  print join ', ', $obj->ids_in_mapping;"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nNative delegations allow you to delegate to native Perl data\nstructures as if they were objects. For example, in the "],["Identifier","L</SYNOPSIS>"],[""," you can\nsee a hash reference being treated as if it has methods named "],["Identifier","C<exists()>"],["",",\n"],["Identifier","C<keys()>"],["",", "],["Identifier","C<get()>"],["",", and "],["Identifier","C<set()>"],["",".\n\nThe delegation methods (mostly) map to Perl builtins and operators. The return\nvalues of these delegations should be the same as the corresponding Perl\noperation. Any deviations will be explicitly documented.\n\n"],["Statement","=head1"],[""," "],["String","API"],["","\n\nNative delegations are enabled by passing certain options to "],["Identifier","C<has>"],[""," when\ncreating an attribute.\n\n"],["Statement","=head2"],[""," "],["String","traits"],["","\n\nTo enable this feature, pass the appropriate name in the "],["Identifier","C<traits>"],[""," array\nreference for the attribute. For example, to enable this feature for hash\nreference, we include "],["Identifier","C<'Hash'>"],[""," in the list of traits.\n\n"],["Statement","=head2"],[""," "],["String","isa"],["","\n\nYou will need to make sure that the attribute has an appropriate type. For\nexample, to use this with a Hash you must specify that your attribute is some\nsort of "],["Identifier","C<HashRef>"],["",".\n\n"],["Statement","=head2"],[""," "],["String","handles"],["","\n\nThis is just like any other delegation, but only a hash reference is allowed\nwhen defining native delegations. The keys are the methods to be created in\nthe class which contains the attribute. The values are the methods provided by\nthe associated trait. Currying works the same way as it does with any other\ndelegation.\n\nSee the docs for each native trait for details on what methods are available.\n\n"],["Statement","=head2"],[""," "],["String","is"],["","\n\nSome traits provide a default "],["Identifier","C<is>"],[""," for historical reasons. This behavior is\ndeprecated, and you are strongly encouraged to provide a value. If you don't\nplan to read and write the attribute value directly, not passing the "],["Identifier","C<is>"],["","\noption will prevent standard accessor generation.\n\n"],["Statement","=head2"],[""," "],["String","default or builder"],["","\n\nSome traits provide a default "],["Identifier","C<default>"],[""," for historical reasons. This behavior\nis deprecated, and you are strongly encouraged to provide a default value or\nmake the attribute required.\n\n"],["Statement","=head1"],[""," "],["String","TRAITS FOR NATIVE DELEGATIONS"],["","\n\nBelow are some simple examples of each native trait. More features are\navailable than what is shown here; this is just a quick synopsis.\n\n"],["Statement","=over"],["","\n\n"],["Statement","=item"],[""," "],["String","Array ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::Array>"],["String",")"],["","\n\n"],["PreProc","    has 'queue' => ("],["","\n"],["PreProc","        traits  => ['Array'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'ArrayRef[Str]',"],["","\n"],["PreProc","        default => sub { [] },"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            add_item  => 'push',"],["","\n"],["PreProc","            next_item => 'shift',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=item"],[""," "],["String","Bool ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::Bool>"],["String",")"],["","\n\n"],["PreProc","    has 'is_lit' => ("],["","\n"],["PreProc","        traits  => ['Bool'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'Bool',"],["","\n"],["PreProc","        default => 0,"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            illuminate  => 'set',"],["","\n"],["PreProc","            darken      => 'unset',"],["","\n"],["PreProc","            flip_switch => 'toggle',"],["","\n"],["PreProc","            is_dark     => 'not',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=item"],[""," "],["String","Code ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::Code>"],["String",")"],["","\n\n"],["PreProc","    has 'callback' => ("],["","\n"],["PreProc","        traits  => ['Code'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'CodeRef',"],["","\n"],["PreProc","        default => sub {"],["","\n"],["PreProc","            sub {'called'}"],["","\n"],["PreProc","        },"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            call => 'execute',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=item"],[""," "],["String","Counter ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::Counter>"],["String",")"],["","\n\n"],["PreProc","    has 'counter' => ("],["","\n"],["PreProc","        traits  => ['Counter'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'Num',"],["","\n"],["PreProc","        default => 0,"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            inc_counter   => 'inc',"],["","\n"],["PreProc","            dec_counter   => 'dec',"],["","\n"],["PreProc","            reset_counter => 'reset',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=item"],[""," "],["String","Hash ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::Hash>"],["String",")"],["","\n\n"],["PreProc","    has 'options' => ("],["","\n"],["PreProc","        traits  => ['Hash'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'HashRef[Str]',"],["","\n"],["PreProc","        default => sub { {} },"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            set_option => 'set',"],["","\n"],["PreProc","            get_option => 'get',"],["","\n"],["PreProc","            has_option => 'exists',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=item"],[""," "],["String","Number ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::Number>"],["String",")"],["","\n\n"],["PreProc","    has 'integer' => ("],["","\n"],["PreProc","        traits  => ['Number'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'Int',"],["","\n"],["PreProc","        default => 5,"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            set => 'set',"],["","\n"],["PreProc","            add => 'add',"],["","\n"],["PreProc","            sub => 'sub',"],["","\n"],["PreProc","            mul => 'mul',"],["","\n"],["PreProc","            div => 'div',"],["","\n"],["PreProc","            mod => 'mod',"],["","\n"],["PreProc","            abs => 'abs',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=item"],[""," "],["String","String ("],["Identifier","L<Moose::Meta::Attribute::Native::Trait::String>"],["String",")"],["","\n\n"],["PreProc","    has 'text' => ("],["","\n"],["PreProc","        traits  => ['String'],"],["","\n"],["PreProc","        is      => 'ro',"],["","\n"],["PreProc","        isa     => 'Str',"],["","\n"],["PreProc","        default => q{},"],["","\n"],["PreProc","        handles => {"],["","\n"],["PreProc","            add_text     => 'append',"],["","\n"],["PreProc","            replace_text => 'replace',"],["","\n"],["PreProc","            # ..."],["","\n"],["PreProc","        }"],["","\n"],["PreProc","    );"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","COMPATIBILITY WITH MooseX::AttributeHelpers"],["","\n\nThis feature used to be a separated CPAN distribution called\n"],["Identifier","L<MooseX::AttributeHelpers>"],["",".\n\nWhen the feature was incorporated into the Moose core, some of the API details\nwere changed. The underlying capabilities are the same, but some details of\nthe API were changed.\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]