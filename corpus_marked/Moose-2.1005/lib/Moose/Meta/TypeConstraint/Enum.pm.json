[["Statement","package"],["Type"," Moose::Meta::TypeConstraint::Enum"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Enum::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Enum::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","B;\n"],["Statement","use "],["","Moose::Util::TypeConstraints ();\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::TypeConstraint'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'values'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'values'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'_inline_var_name'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'_inline_var_name'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Statement","my"],[""," "],["Identifier","$inliner"],[""," = "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$val"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["String","'defined('"],[""," . "],["Identifier","$val"],[""," . "],["String","') '"],["","\n             . "],["String","'&& !ref('"],[""," . "],["Identifier","$val"],[""," . "],["String","') '"],["","\n             . "],["String","'&& $'"],[""," . "],["Identifier","$self"],["","->_inline_var_name . "],["String","'{'"],[""," . "],["Identifier","$val"],[""," . "],["String","'}'"],["",";\n};\n\n"],["Statement","my"],[""," "],["Identifier","$var_suffix"],[""," = "],["Number","0"],["",";\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$args{"],["String","parent"],["Identifier","}"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["String","'Str'"],["",");\n    "],["Identifier","$args{"],["String","inlined"],["Identifier","}"],[""," = "],["Identifier","$inliner"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Statement","scalar"],[""," "],["Identifier","@{"],[""," "],["Identifier","$args{"],["String","values"],["Identifier","}"],[""," "],["Identifier","}"],[""," < "],["Number","1"],[""," ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"You must have at least one value to enumerate through\""],["",");\n    }\n\n    "],["Repeat","for"],[""," ("],["Identifier","@{"],[""," "],["Identifier","$args{"],["String","values"],["Identifier","}"],[""," "],["Identifier","}"],["",") {\n        "],["Conditional","if"],[""," (!"],["Operator","defined"],["","("],["Identifier","$_"],["",")) {\n            "],["Statement","require"],[""," Moose;\n            Moose->throw_error("],["String","\"Enum values must be strings, not undef\""],["",");\n        }\n        "],["Conditional","elsif"],[""," ("],["Operator","ref"],["","("],["Identifier","$_"],["",")) {\n            "],["Statement","require"],[""," Moose;\n            Moose->throw_error("],["String","\"Enum values must be strings, not '"],["Identifier","$_"],["String","'\""],["",");\n        }\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","%values"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Number","1"],[""," "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$args{"],["String","values"],["Identifier","}"],[""," "],["Identifier","}"],["",";\n    "],["Identifier","$args{"],["String","constraint"],["Identifier","}"],[""," = "],["Keyword","sub "],["","{ "],["Identifier","$values{"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," "],["Identifier","}"],[""," };\n\n    "],["Statement","my"],[""," "],["Identifier","$var_name"],[""," = "],["String","'enums'"],[""," . "],["Identifier","$var_suffix"],["","++;;\n    "],["Identifier","$args{"],["String","_inline_var_name"],["Identifier","}"],[""," = "],["Identifier","$var_name"],["",";\n    "],["Identifier","$args{"],["String","inline_environment"],["Identifier","}"],[""," = { "],["String","'%'"],[""," . "],["Identifier","$var_name"],[""," => \\"],["Identifier","%values"],[""," };\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Identifier","$class"],["","->SUPER::new(\\"],["Identifier","%args"],["",");\n\n    "],["Identifier","$self"],["","->compile_type_constraint()\n        "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->_has_compiled_type_constraint;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","equals "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$other"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->isa(__PACKAGE__);\n\n    "],["Statement","my"],[""," "],["Identifier","@self_values"],["","  = "],["Statement","sort"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->"],["Statement","values"],[""," "],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@other_values"],[""," = "],["Statement","sort"],[""," "],["Identifier","@{"],[""," "],["Identifier","$other"],["","->"],["Statement","values"],[""," "],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@self_values"],[""," == "],["Identifier","@other_values"],["",";\n\n    "],["Repeat","while"],[""," ( "],["Identifier","@self_values"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$value"],[""," = "],["Statement","shift"],[""," "],["Identifier","@self_values"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$other_value"],[""," = "],["Statement","shift"],[""," "],["Identifier","@other_values"],["",";\n\n        "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$value"],[""," "],["Operator","eq"],[""," "],["Identifier","$other_value"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Number","1"],["",";\n}\n\n"],["Keyword","sub "],["Function","constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%values"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Operator","undef"],[""," "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->"],["Statement","values"],[""," "],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Keyword","sub "],["","{ "],["Statement","exists"],[""," "],["Identifier","$values{$_["],["Number","0"],["Identifier","]}"],[""," };\n}\n\n"],["Keyword","sub "],["Function","create_child_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," Moose::Meta::TypeConstraint->new("],["Identifier","@args"],["",", "],["String","parent"],[""," => "],["Identifier","$self"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Type constraint for enumerated values."],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::Enum - Type constraint for enumerated values.\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class represents type constraints based on an enumerated list of\nacceptable values.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::Enum>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeConstraint::Enum->new(%options) >>"],["","\n\nThis creates a new enum type constraint based on the given\n"],["Identifier","C<%options>"],["",".\n\nIt takes the same options as its parent, with several\nexceptions. First, it requires an additional option, "],["Identifier","C<values>"],["",". This\nshould be an array reference containing a list of valid string\nvalues. Second, it automatically sets the parent to the "],["Identifier","C<Str>"],[""," type.\n\nFinally, it ignores any provided "],["Identifier","C<constraint>"],[""," option. The constraint\nis generated automatically based on the provided "],["Identifier","C<values>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->values >>"],["","\n\nReturns the array reference of acceptable values provided to the\nconstructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->create_child_type >>"],["","\n\nThis returns a new "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object with the type\nas its parent.\n\nNote that it does "],["Identifier","I<not>"],[""," return a "],["Identifier","C<Moose::Meta::TypeConstraint::Enum>"],["","\nobject!\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]