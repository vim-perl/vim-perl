[["","\n"],["Statement","package"],["Type"," Moose::Meta::TypeConstraint::Registry"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Registry::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Registry::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Object'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'parent_registry'"],[""," => (\n    "],["String","reader"],["","    => "],["String","'get_parent_registry'"],["",",\n    "],["String","writer"],["","    => "],["String","'set_parent_registry'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_parent_registry'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'type_constraints'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'type_constraints'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ {} },\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = "],["Identifier","$class"],["","->_new("],["Identifier","@_"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","has_type_constraint "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_name"],["",") = "],["Identifier","@_"],["",";\n    ("],["Identifier","$type_name"],[""," "],["Operator","and"],[""," "],["Statement","exists"],[""," "],["Identifier","$self"],["","->type_constraints->{"],["Identifier","$type_name"],["","}) ? "],["Number","1"],[""," : "],["Number","0"],["","\n}\n\n"],["Keyword","sub "],["Function","get_type_constraint "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$type_name"],["",";\n    "],["Identifier","$self"],["","->type_constraints->{"],["Identifier","$type_name"],["","}\n}\n\n"],["Keyword","sub "],["Function","add_type_constraint "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["Identifier","$type"],[""," && blessed "],["Identifier","$type"],[""," && "],["Identifier","$type"],["","->isa("],["String","'Moose::Meta::TypeConstraint'"],["",") ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"No type supplied / type is not a valid type constraint\""],["",");\n    }\n\n    "],["Identifier","$self"],["","->type_constraints->{"],["Identifier","$type"],["","->name} = "],["Identifier","$type"],["",";\n}\n\n"],["Keyword","sub "],["Function","find_type_constraint "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_type_constraint("],["Identifier","$type_name"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_type_constraint("],["Identifier","$type_name"],["",");\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->get_parent_registry->find_type_constraint("],["Identifier","$type_name"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_parent_registry;\n    "],["Statement","return"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: registry for type constraints"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::Registry - registry for type constraints\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class is a registry that maps type constraint names to\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," objects.\n\nCurrently, it is only used internally by\n"],["Identifier","L<Moose::Util::TypeConstraints>"],["",", which creates a single global\nregistry.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::Registry>"],[""," is a subclass of\n"],["Identifier","L<Class::MOP::Object>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeConstraint::Registry->new(%options) >>"],["","\n\nThis creates a new registry object based on the provided "],["Identifier","C<%options>"],["",":\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* parent_registry"],["","\n\nThis is an optional "],["Identifier","L<Moose::Meta::TypeConstraint::Registry>"],["","\nobject.\n\n"],["Statement","=item"],[""," "],["String","* type_constraints"],["","\n\nThis is hash reference of type names to type objects. This is\noptional. Constraints can be added to the registry after it is\ncreated.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->get_parent_registry >>"],["","\n\nReturns the registry's parent registry, if it has one.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->has_parent_registry >>"],["","\n\nReturns true if the registry has a parent.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->set_parent_registry($registry) >>"],["","\n\nSets the parent registry.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->get_type_constraint($type_name) >>"],["","\n\nThis returns the "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object from the\nregistry for the given name, if one exists.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->has_type_constraint($type_name) >>"],["","\n\nReturns true if the registry has a type of the given name.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->add_type_constraint($type) >>"],["","\n\nAdds a new "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object to the registry.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $registry->find_type_constraint($type_name) >>"],["","\n\nThis method looks in the current registry for the named type. If the\ntype is not found, then this method will look in the registry's\nparent, if it has one.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]