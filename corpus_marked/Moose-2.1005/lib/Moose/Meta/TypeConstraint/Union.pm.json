[["","\n"],["Statement","package"],["Type"," Moose::Meta::TypeConstraint::Union"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Union::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Union::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","Moose::Meta::TypeCoercion::Union;\n\n"],["Statement","use "],["","List::MoreUtils "],["String","qw(all)"],["",";\n"],["Statement","use "],["","List::Util "],["String","qw(first)"],["",";\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::TypeConstraint'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'type_constraints'"],[""," => (\n    "],["String","accessor"],["","  => "],["String","'type_constraints'"],["",",\n    "],["String","default"],["","   => "],["Keyword","sub "],["","{ [] },\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","%options"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Statement","join"],[""," "],["String","'|'"],[""," => "],["Statement","sort"],[""," "],["Statement","{"],[""," "],["Identifier","$a"],[""," "],["Operator","cmp"],[""," "],["Identifier","$b"],[""," "],["Statement","}"],["","\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$options{"],["String","type_constraints"],["Identifier","}"],[""," "],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Identifier","$class"],["","->SUPER::new(\n        "],["String","name"],[""," => "],["Identifier","$name"],["",",\n        "],["Identifier","%options"],["",",\n    );\n\n    "],["Identifier","$self"],["","->_set_constraint( "],["Identifier","$self"],["","->_compiled_type_constraint );\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Comment","# "],["Todo","XXX"],["Comment"," - this is a rather gross implementation of laziness for the benefit of"],["","\n"],["Comment","# MX::Types. If we try to call ->has_coercion on the objects during object"],["","\n"],["Comment","# construction, this does not work when defining a recursive constraint with"],["","\n"],["Comment","# MX::Types."],["","\n"],["Keyword","sub "],["Function","coercion "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self->{"],["String","coercion"],["Identifier","}"],[""," "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$self->{"],["String","coercion"],["Identifier","}"],["",";\n\n    "],["Comment","# Using any instead of grep here causes a weird error with some corner"],["","\n    "],["Comment","# cases when MX::Types is in use. See RT #61001."],["","\n    "],["Conditional","if"],[""," ( "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->has_coercion "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],[""," ) {\n        "],["Statement","return"],[""," "],["Identifier","$self->{"],["String","coercion"],["Identifier","}"],[""," = Moose::Meta::TypeCoercion::Union->new(\n            "],["String","type_constraint"],[""," => "],["Identifier","$self"],[""," );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," "],["Identifier","$self->{"],["String","coercion"],["Identifier","}"],[""," = "],["Operator","undef"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","has_coercion "],["","{\n    "],["Statement","return"],[""," "],["Operator","defined"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->coercion;\n}\n\n"],["Keyword","sub "],["Function","_actually_compile_type_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@constraints"],[""," = "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$value"],[""," = "],["Statement","shift"],["",";\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$type"],[""," ("],["Identifier","@constraints"],["",") {\n            "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$type"],["","->check("],["Identifier","$value"],["",");\n        }\n        "],["Statement","return"],[""," "],["Operator","undef"],["",";\n    };\n}\n\n"],["Keyword","sub "],["Function","can_be_inlined "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Comment","# This was originally done with all() from List::MoreUtils, but that"],["","\n    "],["Comment","# caused some sort of bizarro parsing failure under 5.10."],["","\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$tc"],[""," ( "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],[""," ) {\n        "],["Statement","return"],[""," "],["Number","0"],[""," "],["Conditional","unless"],[""," "],["Identifier","$tc"],["","->can_be_inlined;\n    }\n\n    "],["Statement","return"],[""," "],["Number","1"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_check "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$val"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["String","'('"],["","\n               . (\n                  "],["Statement","join"],[""," "],["String","' || '"],["",", "],["Statement","map"],[""," "],["Statement","{"],[""," "],["String","'('"],[""," . "],["Identifier","$_"],["","->_inline_check("],["Identifier","$val"],["",") . "],["String","')'"],[""," "],["Statement","}"],["","\n                  "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["","\n                 )\n           . "],["String","')'"],["",";\n}\n\n"],["Keyword","sub "],["Function","inline_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," { "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","%{"],[""," "],["Identifier","$_"],["","->inline_environment "],["Identifier","}"],[""," "],["Statement","}"],["","\n            "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],[""," };\n}\n\n"],["Keyword","sub "],["Function","equals "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$other"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->isa(__PACKAGE__);\n\n    "],["Statement","my"],[""," "],["Identifier","@self_constraints"],["","  = "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@other_constraints"],[""," = "],["Identifier","@{"],[""," "],["Identifier","$other"],["","->type_constraints "],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@self_constraints"],[""," == "],["Identifier","@other_constraints"],["",";\n\n    "],["Comment","# "],["Todo","FIXME"],["Comment"," presort type constraints for efficiency?"],["","\n"],["Label","    constraint:"],[""," "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$constraint"],[""," ( "],["Identifier","@self_constraints"],[""," ) {\n        "],["Repeat","for"],[""," ( "],["Statement","my"],[""," "],["Identifier","$i"],[""," = "],["Number","0"],["","; "],["Identifier","$i"],[""," < "],["Identifier","@other_constraints"],["","; "],["Identifier","$i"],["","++ ) {\n            "],["Conditional","if"],[""," ( "],["Identifier","$constraint"],["","->equals("],["Identifier","$other_constraints[$i]"],["",") ) {\n                "],["Statement","splice"],[""," "],["Identifier","@other_constraints"],["",", "],["Identifier","$i"],["",", "],["Number","1"],["",";\n                "],["Statement","next"],[""," constraint;\n            }\n        }\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","@other_constraints"],[""," == "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","parent "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," ("],["Identifier","$first"],["",", "],["Identifier","@rest"],["",") = "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$parent"],[""," ( "],["Identifier","$first"],["","->_collect_all_parents ) {\n        "],["Statement","return"],[""," "],["Identifier","$parent"],[""," "],["Conditional","if"],[""," all { "],["Identifier","$_"],["","->is_a_type_of("],["Identifier","$parent"],["",") } "],["Identifier","@rest"],["",";\n    }\n\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","validate "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$message"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$type"],[""," ("],["Identifier","@{$self"],["","->type_constraints"],["Identifier","}"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$err"],[""," = "],["Identifier","$type"],["","->validate("],["Identifier","$value"],["",");\n        "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$err"],["",";\n        "],["Identifier","$message"],[""," .= ("],["Identifier","$message"],[""," ? "],["String","' and '"],[""," : "],["String","''"],["",") . "],["Identifier","$err"],["","\n            "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$err"],["",";\n    }\n    "],["Statement","return"],[""," ("],["Identifier","$message"],[""," . "],["String","' in ('"],[""," . "],["Identifier","$self"],["","->name . "],["String","')'"],["",") ;\n}\n\n"],["Keyword","sub "],["Function","find_type_for "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," first { "],["Identifier","$_"],["","->check("],["Identifier","$value"],["",") } "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","is_a_type_of "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," all { "],["Identifier","$_"],["","->is_a_type_of("],["Identifier","$type_name"],["",") } "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","is_subtype_of "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," all { "],["Identifier","$_"],["","->is_subtype_of("],["Identifier","$type_name"],["",") } "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->type_constraints "],["Identifier","}"],["",";\n}\n\n"],["Keyword","sub "],["Function","create_child_type "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%opts"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$constraint"],["","\n        = Moose::Meta::TypeConstraint->new( "],["Identifier","%opts"],["",", "],["String","parent"],[""," => "],["Identifier","$self"],[""," );\n\n    "],["Comment","# if we have a type constraint union, and no"],["","\n    "],["Comment","# type check, this means we are just aliasing"],["","\n    "],["Comment","# the union constraint, which means we need to"],["","\n    "],["Comment","# handle this differently."],["","\n    "],["Comment","# - SL"],["","\n    "],["Conditional","if"],[""," ( "],["Operator","not"],["","( "],["Operator","defined"],[""," "],["Identifier","$opts{"],["String","constraint"],["Identifier","}"],[""," )\n        && "],["Identifier","$self"],["","->has_coercion ) {\n        "],["Identifier","$constraint"],["","->coercion(\n            Moose::Meta::TypeCoercion::Union->new(\n                "],["String","type_constraint"],[""," => "],["Identifier","$self"],["",",\n            )\n        );\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$constraint"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: A union of Moose type constraints"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::Union - A union of Moose type constraints\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis metaclass represents a union of type constraints. A union takes\nmultiple type constraints, and is true if any one of its member\nconstraints is true.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::Union>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeConstraint::Union->new(%options) >>"],["","\n\nThis creates a new class type constraint based on the given\n"],["Identifier","C<%options>"],["",".\n\nIt takes the same options as its parent. It also requires an\nadditional option, "],["Identifier","C<type_constraints>"],["",". This is an array reference\ncontaining the "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," objects that are the\nmembers of the union type. The "],["Identifier","C<name>"],[""," option defaults to the names\nall of these member types sorted and then joined by a pipe (|).\n\nThe constructor sets the implementation of the constraint so that is\nsimply calls "],["Identifier","C<check>"],[""," on the newly created object.\n\nFinally, the constructor also makes sure that the object's "],["Identifier","C<coercion>"],["","\nattribute is a "],["Identifier","L<Moose::Meta::TypeCoercion::Union>"],[""," object.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->type_constraints >>"],["","\n\nThis returns the array reference of "],["Identifier","C<type_constraints>"],[""," provided to\nthe constructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->parent >>"],["","\n\nThis returns the nearest common ancestor of all the components of the union.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->check($value) >>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->validate($value) >>"],["","\n\nThese two methods simply call the relevant method on each of the\nmember type constraints in the union. If any type accepts the value,\nthe value is valid.\n\nWith "],["Identifier","C<validate>"],[""," the error message returned includes all of the error\nmessages returned by the member type constraints.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->equals($type_name_or_object) >>"],["","\n\nA type is considered equal if it is also a union type, and the two\nunions have the same member types.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->find_type_for($value) >>"],["","\n\nThis returns the first member type constraint for which "],["Identifier","C<check($value)>"],[""," is\ntrue, allowing you to determine which of the Union's member type constraints\na given value matches.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->is_a_type_of($type_name_or_object) >>"],["","\n\nThis returns true if all of the member type constraints return true\nfor the "],["Identifier","C<is_a_type_of>"],[""," method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->is_subtype_of >>"],["","\n\nThis returns true if all of the member type constraints return true\nfor the "],["Identifier","C<is_a_subtype_of>"],[""," method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->create_child_type(%options) >>"],["","\n\nThis returns a new "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object with the type\nas its parent.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]