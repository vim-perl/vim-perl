[["Statement","package"],["Type"," Moose::Meta::TypeConstraint::Parameterized"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Parameterized::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Parameterized::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","Moose::Util::TypeConstraints;\n"],["Statement","use "],["","Moose::Meta::TypeConstraint::Parameterizable;\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::TypeConstraint'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'type_parameter'"],[""," => (\n    "],["String","accessor"],["","  => "],["String","'type_parameter'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_type_parameter'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'parameterized_from'"],[""," => (\n    "],["String","accessor"],["","   => "],["String","'parameterized_from'"],["",",\n    "],["String","predicate"],["","  => "],["String","'has_parameterized_from'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","equals "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$other"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->isa(__PACKAGE__);\n\n    "],["Statement","return"],[""," (\n        "],["Identifier","$self"],["","->type_parameter->equals( "],["Identifier","$other"],["","->type_parameter )\n            "],["Operator","and"],["","\n        "],["Identifier","$self"],["","->parent->equals( "],["Identifier","$other"],["","->parent )\n    );\n}\n\n"],["Keyword","sub "],["Function","compile_type_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["Identifier","$self"],["","->has_type_parameter ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"You cannot create a Higher Order type without a type parameter\""],["",");\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Identifier","$self"],["","->type_parameter;\n\n    "],["Conditional","unless"],[""," ( blessed "],["Identifier","$type_parameter"],[""," && "],["Identifier","$type_parameter"],["","->isa("],["String","'Moose::Meta::TypeConstraint'"],["",") ) {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"The type parameter must be a Moose meta type\""],["",");\n    }\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$type"],[""," (Moose::Util::TypeConstraints::get_all_parameterizable_types()) {\n        "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$constraint"],[""," = "],["Identifier","$type"],["","->generate_constraint_for("],["Identifier","$self"],["",")) {\n            "],["Identifier","$self"],["","->_set_constraint("],["Identifier","$constraint"],["",");\n            "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::compile_type_constraint;\n        }\n    }\n\n    "],["Comment","# if we get here, then we couldn't"],["","\n    "],["Comment","# find a way to parameterize this type"],["","\n    "],["Statement","require"],[""," Moose;\n    Moose->throw_error("],["String","\"The \""],[""," . "],["Identifier","$self"],["","->name . "],["String","\" constraint cannot be used, because \""],["","\n          . "],["Identifier","$self"],["","->parent->name . "],["String","\" doesn't subtype or coerce from a parameterizable type.\""],["",");\n}\n\n"],["Keyword","sub "],["Function","can_be_inlined "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],["","\n           "],["Identifier","$self"],["","->has_parameterized_from\n        && "],["Identifier","$self"],["","->parameterized_from->has_inline_generator\n        && "],["Identifier","$self"],["","->type_parameter->can_be_inlined;\n}\n\n"],["Keyword","sub "],["Function","inline_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," {\n        ("],["Identifier","$self"],["","->has_parameterized_from\n            ? ("],["Identifier","%{"],[""," "],["Identifier","$self"],["","->parameterized_from->inline_environment "],["Identifier","}"],["",")\n            : ()),\n        ("],["Identifier","$self"],["","->has_type_parameter\n            ? ("],["Identifier","%{"],[""," "],["Identifier","$self"],["","->type_parameter->inline_environment "],["Identifier","}"],["",")\n            : ()),\n    };\n}\n\n"],["Keyword","sub "],["Function","_inline_check "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->can_be_inlined;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->parameterized_from->generate_inline_for( "],["Identifier","$self"],["","->type_parameter, "],["Identifier","@_"],[""," );\n}\n\n"],["Keyword","sub "],["Function","create_child_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","%opts"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," Moose::Meta::TypeConstraint::Parameterizable->new("],["Identifier","%opts"],["",", "],["String","parent"],["","=>"],["Identifier","$self"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Type constraints with a bound parameter (ArrayRef[Int])"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::Parameterized - Type constraints with a bound parameter (ArrayRef[Int])\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\nThis class is intentionally not documented because the API is\nconfusing and needs some work.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::Parameterized>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]