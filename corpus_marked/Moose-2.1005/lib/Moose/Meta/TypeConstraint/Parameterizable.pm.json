[["Statement","package"],["Type"," Moose::Meta::TypeConstraint::Parameterizable"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Parameterizable::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Parameterizable::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::TypeConstraint'"],["",";\n"],["Statement","use "],["","Moose::Meta::TypeConstraint::Parameterized;\n"],["Statement","use "],["","Moose::Util::TypeConstraints ();\n\n"],["Statement","use "],["","Carp "],["String","'confess'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'constraint_generator'"],[""," => (\n    "],["String","accessor"],["","  => "],["String","'constraint_generator'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_constraint_generator'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute("],["String","'inline_generator'"],[""," => (\n    "],["String","accessor"],["","  => "],["String","'inline_generator'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_inline_generator'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","generate_constraint_for "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_constraint_generator;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->constraint_generator->("],["Identifier","$type"],["","->type_parameter)\n        "],["Conditional","if"],[""," "],["Identifier","$type"],["","->is_subtype_of("],["Identifier","$self"],["","->name);\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->_can_coerce_constraint_from("],["Identifier","$type"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_coercion\n        && "],["Identifier","$self"],["","->coercion->has_coercion_for_type("],["Identifier","$type"],["","->parent->name);\n\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","_can_coerce_constraint_from "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$coercion"],["","   = "],["Identifier","$self"],["","->coercion;\n    "],["Statement","my"],[""," "],["Identifier","$constraint"],[""," = "],["Identifier","$self"],["","->constraint_generator->("],["Identifier","$type"],["","->type_parameter);\n    "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n        "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$coercion"],["","->coerce("],["Identifier","$_"],["",");\n        "],["Identifier","$constraint"],["","->("],["Identifier","@_"],["",");\n    };\n}\n\n"],["Keyword","sub "],["Function","generate_inline_for "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type"],["",", "],["Identifier","$val"],["",") = "],["Identifier","@_"],["",";\n\n    confess "],["String","\"Can't generate an inline constraint for "],["Identifier","$type"],["String",", since none \""],["","\n          . "],["String","\"was defined\""],["","\n        "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_inline_generator;\n\n    "],["Statement","return"],[""," "],["String","'( do { '"],[""," . "],["Identifier","$self"],["","->inline_generator->( "],["Identifier","$self"],["",", "],["Identifier","$type"],["",", "],["Identifier","$val"],[""," ) . "],["String","' } )'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_parse_type_parameter "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_parameter"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," Moose::Util::TypeConstraints::find_or_create_isa_type_constraint("],["Identifier","$type_parameter"],["",");\n}\n\n"],["Keyword","sub "],["Function","parameterize "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_parameter"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$contained_tc"],[""," = "],["Identifier","$self"],["","->_parse_type_parameter("],["Identifier","$type_parameter"],["",");\n\n    "],["Comment","## The type parameter should be a subtype of the parent's type parameter"],["","\n    "],["Comment","## if there is one."],["","\n\n    "],["Conditional","if"],["","("],["Statement","my"],[""," "],["Identifier","$parent"],[""," = "],["Identifier","$self"],["","->parent) {\n        "],["Conditional","if"],["","("],["Identifier","$parent"],["","->can("],["String","'type_parameter'"],["",")) {\n            "],["Conditional","unless"],[""," ( "],["Identifier","$contained_tc"],["","->is_a_type_of("],["Identifier","$parent"],["","->type_parameter) ) {\n                "],["Statement","require"],[""," Moose;\n                Moose->throw_error("],["String","\""],["Identifier","$type_parameter"],["String"," is not a subtype of \""],["","."],["Identifier","$parent"],["","->type_parameter);\n            }\n        }\n    }\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$contained_tc"],["","->isa("],["String","'Moose::Meta::TypeConstraint'"],["",") ) {\n        "],["Statement","my"],[""," "],["Identifier","$tc_name"],[""," = "],["Identifier","$self"],["","->name . "],["String","'['"],[""," . "],["Identifier","$contained_tc"],["","->name . "],["String","']'"],["",";\n        "],["Statement","return"],[""," Moose::Meta::TypeConstraint::Parameterized->new(\n            "],["String","name"],["","               => "],["Identifier","$tc_name"],["",",\n            "],["String","parent"],["","             => "],["Identifier","$self"],["",",\n            "],["String","type_parameter"],["","     => "],["Identifier","$contained_tc"],["",",\n            "],["String","parameterized_from"],[""," => "],["Identifier","$self"],["",",\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"The type parameter must be a Moose meta type\""],["",");\n    }\n}\n\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Type constraints which can take a parameter (ArrayRef)"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::Parameterizable - Type constraints which can take a parameter (ArrayRef)\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class represents a parameterizable type constraint. This is a\ntype constraint like "],["Identifier","C<ArrayRef>"],[""," or "],["Identifier","C<HashRef>"],["",", that can be\nparameterized and made more specific by specifying a contained\ntype. For example, instead of just an "],["Identifier","C<ArrayRef>"],[""," of anything, you can\nspecify that is an "],["Identifier","C<ArrayRef[Int]>"],["",".\n\nA parameterizable constraint should not be used as an attribute type\nconstraint. Instead, when parameterized it creates a\n"],["Identifier","L<Moose::Meta::TypeConstraint::Parameterized>"],[""," which should be used.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::Parameterizable>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\nThis class is intentionally not documented because the API is\nconfusing and needs some work.\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]