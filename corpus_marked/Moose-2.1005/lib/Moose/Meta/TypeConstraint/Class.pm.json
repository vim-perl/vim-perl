[["Statement","package"],["Type"," Moose::Meta::TypeConstraint::Class"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Class::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::Class::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","B;\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","Moose::Util::TypeConstraints ();\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::TypeConstraint'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'class'"],[""," => (\n    "],["String","reader"],[""," => "],["String","'class'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Statement","my"],[""," "],["Identifier","$inliner"],[""," = "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$val"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["String","'Scalar::Util::blessed('"],[""," . "],["Identifier","$val"],[""," . "],["String","')'"],["","\n             . "],["String","' && '"],[""," . "],["Identifier","$val"],[""," . "],["String","'->isa('"],[""," . B::perlstring("],["Identifier","$self"],["","->class) . "],["String","')'"],["",";\n};\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$args{"],["String","parent"],["Identifier","}"],["","\n        = Moose::Util::TypeConstraints::find_type_constraint("],["String","'Object'"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$class_name"],[""," = "],["Identifier","$args{"],["String","class"],["Identifier","}"],["",";\n    "],["Identifier","$args{"],["String","constraint"],["Identifier","}"],[""," = "],["Keyword","sub "],["","{ "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->isa("],["Identifier","$class_name"],["",") };\n\n    "],["Identifier","$args{"],["String","inlined"],["Identifier","}"],[""," = "],["Identifier","$inliner"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Identifier","$class"],["","->SUPER::new( \\"],["Identifier","%args"],[""," );\n\n    "],["Identifier","$self"],["","->compile_type_constraint();\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","parents "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," (\n        "],["Identifier","$self"],["","->parent,\n        "],["Statement","map"],[""," "],["Statement","{"],["","\n            "],["Comment","# "],["Todo","FIXME"],["Comment"," find_type_constraint might find a TC named after the class but that isn't really it"],["","\n            "],["Comment","# I did this anyway since it's a convention that preceded TypeConstraint::Class, and it should DWIM"],["","\n            "],["Comment","# if anybody thinks this problematic please discuss on IRC."],["","\n            "],["Comment","# a possible fix is to add by attr indexing to the type registry to find types of a certain property"],["","\n            "],["Comment","# regardless of their name"],["","\n            Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$_"],["",")\n                ||\n            __PACKAGE__->new( "],["String","class"],[""," => "],["Identifier","$_"],["",", "],["String","name"],[""," => "],["String","\"__ANON__\""],[""," )\n        "],["Statement","}"],[""," Class::MOP::class_of("],["Identifier","$self"],["","->class)->superclasses,\n    );\n}\n\n"],["Keyword","sub "],["Function","equals "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$other"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",");\n\n    "],["Conditional","if"],[""," (!"],["Operator","defined"],["","("],["Identifier","$other"],["",")) {\n        "],["Conditional","if"],[""," (!"],["Operator","ref"],["","("],["Identifier","$type_or_name"],["",")) {\n            "],["Statement","return"],[""," "],["Identifier","$self"],["","->class "],["Operator","eq"],[""," "],["Identifier","$type_or_name"],["",";\n        }\n        "],["Statement","return"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->isa(__PACKAGE__);\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->class "],["Operator","eq"],[""," "],["Identifier","$other"],["","->class;\n}\n\n"],["Keyword","sub "],["Function","is_a_type_of "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],["",") = "],["Identifier","@_"],["",";\n\n    ("],["Identifier","$self"],["","->equals("],["Identifier","$type_or_name"],["",") || "],["Identifier","$self"],["","->is_subtype_of("],["Identifier","$type_or_name"],["","));\n}\n\n"],["Keyword","sub "],["Function","is_subtype_of "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_or_name_or_class"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$type"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name_or_class"],["",");\n\n    "],["Conditional","if"],[""," ( "],["Operator","not"],[""," "],["Operator","defined"],[""," "],["Identifier","$type"],[""," ) {\n        "],["Conditional","if"],[""," ( "],["Operator","not"],[""," "],["Operator","ref"],[""," "],["Identifier","$type_or_name_or_class"],[""," ) {\n            "],["Comment","# it might be a class"],["","\n            "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->class;\n            "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$class"],[""," "],["Operator","ne"],[""," "],["Identifier","$type_or_name_or_class"],["","\n                     && "],["Identifier","$class"],["","->isa( "],["Identifier","$type_or_name_or_class"],[""," );\n        }\n        "],["Statement","return"],["",";\n    }\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$type"],["","->isa(__PACKAGE__) && "],["Identifier","$type"],["","->class "],["Operator","ne"],[""," "],["Identifier","$self"],["","->class) {\n        "],["Comment","# if $type_or_name_or_class isn't a class, it might be the TC name of another ::Class type"],["","\n        "],["Comment","# or it could also just be a type object in this branch"],["","\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->class->isa( "],["Identifier","$type"],["","->class );\n    } "],["Conditional","else"],[""," {\n        "],["Comment","# the only other thing we are a subtype of is Object"],["","\n        "],["Identifier","$self"],["","->SUPER::is_subtype_of("],["Identifier","$type"],["",");\n    }\n}\n\n"],["Comment","# This is a bit counter-intuitive, but a child type of a Class type"],["","\n"],["Comment","# constraint is not itself a Class type constraint (it has no class"],["","\n"],["Comment","# attribute). This whole create_child_type thing needs some changing"],["","\n"],["Comment","# though, probably making MMC->new a factory or something."],["","\n"],["Keyword","sub "],["Function","create_child_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," Moose::Meta::TypeConstraint->new("],["Identifier","@args"],["",", "],["String","parent"],[""," => "],["Identifier","$self"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_message "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_message) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::get_message("],["Identifier","@_"],["",");\n    }\n\n    "],["Identifier","$value"],[""," = ("],["Operator","defined"],[""," "],["Identifier","$value"],[""," ? overload::StrVal("],["Identifier","$value"],["",") : "],["String","'undef'"],["",");\n    "],["Statement","return"],[""," "],["String","\"Validation failed for '\""],[""," . "],["Identifier","$self"],["","->name . "],["String","\"' with value "],["Identifier","$value"],["String"," (not isa \""],[""," . "],["Identifier","$self"],["","->class . "],["String","\")\""],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Class/TypeConstraint parallel hierarchy"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::Class - Class/TypeConstraint parallel hierarchy\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class represents type constraints for a class.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::Class>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeConstraint::Class->new(%options) >>"],["","\n\nThis creates a new class type constraint based on the given\n"],["Identifier","C<%options>"],["",".\n\nIt takes the same options as its parent, with two exceptions. First,\nit requires an additional option, "],["Identifier","C<class>"],["",", which is name of the\nconstraint's class.  Second, it automatically sets the parent to the\n"],["Identifier","C<Object>"],[""," type.\n\nThe constructor also overrides the hand optimized type constraint with\none it creates internally.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->class >>"],["","\n\nReturns the class name associated with the constraint.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->parents >>"],["","\n\nReturns all the type's parent types, corresponding to its parent\nclasses.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->is_subtype_of($type_name_or_object) >>"],["","\n\nIf the given type is also a class type, then this checks that the\ntype's class is a subclass of the other type's class.\n\nOtherwise it falls back to the implementation in\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->create_child_type(%options) >>"],["","\n\nThis returns a new "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object with the type\nas its parent.\n\nNote that it does "],["Identifier","I<not>"],[""," return a\n"],["Identifier","C<Moose::Meta::TypeConstraint::Class>"],[""," object!\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->get_message($value) >>"],["","\n\nThis is the same as "],["Identifier","L<Moose::Meta::TypeConstraint/get_message>"],[""," except\nthat it explicitly says "],["Identifier","C<isa>"],[""," was checked. This is to help users deal\nwith accidentally autovivified type constraints.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]