[["Statement","package"],["Type"," Moose::Meta::TypeConstraint::DuckType"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::DuckType::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeConstraint::DuckType::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","B;\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","List::MoreUtils "],["String","qw(all)"],["",";\n"],["Statement","use "],["","Moose::Util "],["String","'english_list'"],["",";\n\n"],["Statement","use "],["","Moose::Util::TypeConstraints ();\n\n"],["Statement","use base"],[""," "],["String","'Moose::Meta::TypeConstraint'"],["",";\n\n__PACKAGE__->meta->add_attribute("],["String","'methods'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'methods'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Statement","my"],[""," "],["Identifier","$inliner"],[""," = "],["Keyword","sub "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$val"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->parent->_inline_check("],["Identifier","$val"],["",")\n         . "],["String","' && do {'"],[""," . "],["String","\""],["Special","\\n"],["String","\""],["","\n             . "],["String","'my $val = '"],[""," . "],["Identifier","$val"],[""," . "],["String","';'"],[""," . "],["String","\""],["Special","\\n"],["String","\""],["","\n             . "],["String","'&List::MoreUtils::all('"],[""," . "],["String","\""],["Special","\\n"],["String","\""],["","\n                 . "],["String","'sub { $val->can($_) },'"],[""," . "],["String","\""],["Special","\\n"],["String","\""],["","\n                 . "],["Statement","join"],["","("],["String","', '"],["",", "],["Statement","map"],[""," "],["Statement","{"],[""," B::perlstring("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->methods "],["Identifier","}"],["",")\n             . "],["String","');'"],[""," . "],["String","\""],["Special","\\n"],["String","\""],["","\n         . "],["String","'}'"],["",";\n};\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","%args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$args{"],["String","parent"],["Identifier","}"],["","\n        = Moose::Util::TypeConstraints::find_type_constraint("],["String","'Object'"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","@methods"],[""," = "],["Identifier","@{"],[""," "],["Identifier","$args{"],["String","methods"],["Identifier","}"],[""," "],["Identifier","}"],["",";\n    "],["Identifier","$args{"],["String","constraint"],["Identifier","}"],[""," = "],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$val"],[""," = "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",";\n        "],["Statement","return"],[""," all { "],["Identifier","$val"],["","->can("],["Identifier","$_"],["",") } "],["Identifier","@methods"],["",";\n    };\n\n    "],["Identifier","$args{"],["String","inlined"],["Identifier","}"],[""," = "],["Identifier","$inliner"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Identifier","$class"],["","->SUPER::new(\\"],["Identifier","%args"],["",");\n\n    "],["Identifier","$self"],["","->compile_type_constraint()\n        "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->_has_compiled_type_constraint;\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","equals "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$type_or_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$other"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["Identifier","$type_or_name"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$other"],["","->isa(__PACKAGE__);\n\n    "],["Statement","my"],[""," "],["Identifier","@self_methods"],["","  = "],["Statement","sort"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->methods "],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@other_methods"],[""," = "],["Statement","sort"],[""," "],["Identifier","@{"],[""," "],["Identifier","$other"],["","->methods "],["Identifier","}"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@self_methods"],[""," == "],["Identifier","@other_methods"],["",";\n\n    "],["Repeat","while"],[""," ( "],["Identifier","@self_methods"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Statement","shift"],[""," "],["Identifier","@self_methods"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$other_method"],[""," = "],["Statement","shift"],[""," "],["Identifier","@other_methods"],["",";\n\n        "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$method"],[""," "],["Operator","eq"],[""," "],["Identifier","$other_method"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Number","1"],["",";\n}\n\n"],["Keyword","sub "],["Function","create_child_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," Moose::Meta::TypeConstraint->new("],["Identifier","@args"],["",", "],["String","parent"],[""," => "],["Identifier","$self"],["",");\n}\n\n"],["Keyword","sub "],["Function","get_message "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_message) {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::get_message("],["Identifier","@_"],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::get_message("],["Identifier","$value"],["",") "],["Conditional","unless"],[""," blessed("],["Identifier","$value"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","@methods"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," !"],["Identifier","$value"],["","->can("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->methods "],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = blessed "],["Identifier","$value"],["",";\n    "],["Identifier","$class"],[""," ||= "],["Identifier","$value"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","\n         . "],["String","\" is missing methods \""],["","\n         . english_list("],["Statement","map"],[""," "],["Statement","{"],[""," "],["String","\"'"],["Identifier","$_"],["String","'\""],[""," "],["Statement","}"],[""," "],["Identifier","@methods"],["",");\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Type constraint for duck typing"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeConstraint::DuckType - Type constraint for duck typing\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class represents type constraints based on an enumerated list of\nrequired methods.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::TypeConstraint::DuckType>"],[""," is a subclass of\n"],["Identifier","L<Moose::Meta::TypeConstraint>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeConstraint::DuckType->new(%options) >>"],["","\n\nThis creates a new duck type constraint based on the given\n"],["Identifier","C<%options>"],["",".\n\nIt takes the same options as its parent, with several\nexceptions. First, it requires an additional option, "],["Identifier","C<methods>"],["",". This\nshould be an array reference containing a list of required method\nnames. Second, it automatically sets the parent to the "],["Identifier","C<Object>"],[""," type.\n\nFinally, it ignores any provided "],["Identifier","C<constraint>"],[""," option. The constraint\nis generated automatically based on the provided "],["Identifier","C<methods>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->methods >>"],["","\n\nReturns the array reference of required methods provided to the\nconstructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $constraint->create_child_type >>"],["","\n\nThis returns a new "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object with the type\nas its parent.\n\nNote that it does "],["Identifier","I<not>"],[""," return a "],["Identifier","C<Moose::Meta::TypeConstraint::DuckType>"],["","\nobject!\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]