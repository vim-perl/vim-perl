[["","\n"],["Statement","package"],["Type"," Moose::Meta::Attribute"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","B ();\n"],["Statement","use "],["","Class::Load "],["String","qw(is_class_loaded load_class)"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",", "],["String","'weaken'"],["",";\n"],["Statement","use "],["","List::MoreUtils "],["String","'any'"],["",";\n"],["Statement","use "],["","Try::Tiny;\n"],["Statement","use overload"],["","     ();\n\n"],["Statement","use "],["","Moose::Deprecated;\n"],["Statement","use "],["","Moose::Meta::Method::Accessor;\n"],["Statement","use "],["","Moose::Meta::Method::Delegation;\n"],["Statement","use "],["","Moose::Util ();\n"],["Statement","use "],["","Moose::Util::TypeConstraints ();\n"],["Statement","use "],["","Class::MOP::MiniTrait;\n\n"],["Statement","use base"],[""," "],["String","'Class::MOP::Attribute'"],["",", "],["String","'Moose::Meta::Mixin::AttributeCore'"],["",";\n\nClass::MOP::MiniTrait::apply(__PACKAGE__, "],["String","'Moose::Meta::Object::Trait'"],["",");\n\n__PACKAGE__->meta->add_attribute("],["String","'traits'"],[""," => (\n    "],["String","reader"],["","    => "],["String","'applied_traits'"],["",",\n    "],["String","predicate"],[""," => "],["String","'has_applied_traits'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Comment","# we need to have a ->does method in here to"],["","\n"],["Comment","# more easily support traits, and the introspection"],["","\n"],["Comment","# of those traits. We extend the does check to look"],["","\n"],["Comment","# for metatrait aliases."],["","\n"],["Keyword","sub "],["Function","does "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = try {\n        Moose::Util::resolve_metatrait_alias("],["String","Attribute"],[""," => "],["Identifier","$role_name"],["",")\n    };\n    "],["Statement","return"],[""," "],["Number","0"],[""," "],["Conditional","if"],[""," !"],["Operator","defined"],["","("],["Identifier","$name"],["","); "],["Comment","# failed to load class"],["","\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->Moose::Object::does("],["Identifier","$name"],["",");\n}\n\n"],["Keyword","sub "],["Function","_error_thrower "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","require"],[""," Moose::Meta::Class;\n    ( "],["Operator","ref"],[""," "],["Identifier","$self"],[""," && "],["Identifier","$self"],["","->associated_class ) || "],["String","\"Moose::Meta::Class\""],["",";\n}\n\n"],["Keyword","sub "],["Function","throw_error "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$inv"],[""," = "],["Identifier","$self"],["","->_error_thrower;\n    "],["Statement","unshift"],[""," "],["Identifier","@_"],["",", "],["String","\"message\""],[""," "],["Conditional","if"],[""," "],["Identifier","@_"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n    "],["Statement","unshift"],[""," "],["Identifier","@_"],["",", "],["String","attr"],[""," => "],["Identifier","$self"],[""," "],["Conditional","if"],[""," "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n    "],["Statement","unshift"],[""," "],["Identifier","@_"],["",", "],["Identifier","$inv"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$handler"],[""," = "],["Identifier","$inv"],["","->can("],["String","\"throw_error\""],["","); "],["Comment","# to avoid incrementing depth by 1"],["","\n    "],["Statement","goto"],[""," "],["Identifier","$handler"],["",";\n}\n\n"],["Keyword","sub "],["Function","_inline_throw_error "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$msg"],["",", "],["Identifier","$args"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$inv"],[""," = "],["Identifier","$self"],["","->_error_thrower;\n    "],["Comment","# "],["Todo","XXX"],["Comment"," ugh"],["","\n    "],["Identifier","$inv"],[""," = "],["String","'Moose::Meta::Class'"],[""," "],["Conditional","unless"],[""," "],["Identifier","$inv"],["","->can("],["String","'_inline_throw_error'"],["",");\n\n    "],["Comment","# "],["Todo","XXX"],["Comment"," ugh ugh UGH"],["","\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->associated_class;\n    "],["Conditional","if"],[""," ("],["Identifier","$class"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$class_name"],[""," = B::perlstring("],["Identifier","$class"],["","->name);\n        "],["Statement","my"],[""," "],["Identifier","$attr_name"],[""," = B::perlstring("],["Identifier","$self"],["","->name);\n        "],["Identifier","$args"],[""," = "],["String","'attr => Class::MOP::class_of('"],[""," . "],["Identifier","$class_name"],[""," . "],["String","')'"],["","\n              . "],["String","'->find_attribute_by_name('"],[""," . "],["Identifier","$attr_name"],[""," . "],["String","'), '"],["","\n              . ("],["Operator","defined"],[""," "],["Identifier","$args"],[""," ? "],["Identifier","$args"],[""," : "],["String","''"],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$inv"],["","->_inline_throw_error("],["Identifier","$msg"],["",", "],["Identifier","$args"],["",")\n}\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","%options"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$class"],["","->_process_options("],["Identifier","$name"],["",", \\"],["Identifier","%options"],["",") "],["Conditional","unless"],[""," "],["Identifier","$options{"],["String","__hack_no_process_options"],["Identifier","}"],["","; "],["Comment","# used from clone()... YECHKKK "],["Todo","FIXME"],["Comment"," ICKY YUCK GROSS"],["","\n\n    "],["Statement","delete"],[""," "],["Identifier","$options{"],["String","__hack_no_process_options"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%attrs"],[""," =\n        ( "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Number","1"],[""," "],["Statement","}"],["","\n          "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Operator","defined"],[""," "],["Statement","}"],["","\n          "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->init_arg() "],["Statement","}"],["","\n          "],["Identifier","$class"],["","->meta()->get_all_attributes()\n        );\n\n    "],["Statement","my"],[""," "],["Identifier","@bad"],[""," = "],["Statement","sort"],[""," "],["Statement","grep"],[""," "],["Statement","{"],[""," ! "],["Identifier","$attrs{$_}"],[""," "],["Statement","}"],["","  "],["Statement","keys"],[""," "],["Identifier","%options"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","@bad"],["",")\n    {\n        "],["Statement","my"],[""," "],["Identifier","$s"],[""," = "],["Identifier","@bad"],[""," > "],["Number","1"],[""," ? "],["String","'s'"],[""," : "],["String","''"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$list"],[""," = "],["Statement","join"],[""," "],["String","\"', '\""],["",", "],["Identifier","@bad"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$package"],[""," = "],["Identifier","$options{"],["String","definition_context"],["Identifier","}{"],["String","package"],["Identifier","}"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$context"],[""," = "],["Identifier","$options{"],["String","definition_context"],["Identifier","}{"],["String","context"],["Identifier","}"],["","\n                   || "],["String","'attribute constructor'"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$type"],[""," = "],["Identifier","$options{"],["String","definition_context"],["Identifier","}{"],["String","type"],["Identifier","}"],[""," || "],["String","'class'"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$location"],[""," = "],["String","''"],["",";\n        "],["Conditional","if"],[""," ("],["Operator","defined"],["","("],["Identifier","$package"],["",")) {\n            "],["Identifier","$location"],[""," = "],["String","\" in \""],["",";\n            "],["Identifier","$location"],[""," .= "],["String","\""],["Identifier","$type"],["String"," \""],[""," "],["Conditional","if"],[""," "],["Identifier","$type"],["",";\n            "],["Identifier","$location"],[""," .= "],["Identifier","$package"],["",";\n        }\n\n        Carp::cluck "],["String","\"Found unknown argument"],["Identifier","$s"],["String"," '"],["Identifier","$list"],["String","' in the "],["Identifier","$context"],["String"," for '"],["Identifier","$name"],["String","'"],["Identifier","$location"],["String","\""],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$class"],["","->SUPER::new("],["Identifier","$name"],["",", "],["Identifier","%options"],["",");\n}\n\n"],["Keyword","sub "],["Function","interpolate_class_and_new "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","%args"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," ( "],["Identifier","$new_class"],["",", "],["Identifier","@traits"],[""," ) = "],["Identifier","$class"],["","->interpolate_class(\\"],["Identifier","%args"],["",");\n\n    "],["Identifier","$new_class"],["","->new("],["Identifier","$name"],["",", "],["Identifier","%args"],["",", ( "],["Statement","scalar"],["","("],["Identifier","@traits"],["",") ? ( "],["String","traits"],[""," => \\"],["Identifier","@traits"],[""," ) : () ) );\n}\n\n"],["Keyword","sub "],["Function","interpolate_class "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$options"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$class"],[""," = "],["Operator","ref"],["","("],["Identifier","$class"],["",") || "],["Identifier","$class"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$metaclass_name"],[""," = "],["Statement","delete"],[""," "],["Identifier","$options->{"],["String","metaclass"],["Identifier","}"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$new_class"],[""," = Moose::Util::resolve_metaclass_alias( "],["String","Attribute"],[""," => "],["Identifier","$metaclass_name"],[""," );\n\n        "],["Conditional","if"],[""," ( "],["Identifier","$class"],[""," "],["Operator","ne"],[""," "],["Identifier","$new_class"],[""," ) {\n            "],["Conditional","if"],[""," ( "],["Identifier","$new_class"],["","->can("],["String","\"interpolate_class\""],["",") ) {\n                "],["Statement","return"],[""," "],["Identifier","$new_class"],["","->interpolate_class("],["Identifier","$options"],["",");\n            } "],["Conditional","else"],[""," {\n                "],["Identifier","$class"],[""," = "],["Identifier","$new_class"],["",";\n            }\n        }\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","@traits"],["",";\n\n    "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$traits"],[""," = "],["Identifier","$options->{"],["String","traits"],["Identifier","}"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$i"],[""," = "],["Number","0"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$has_foreign_options"],[""," = "],["Number","0"],["",";\n\n        "],["Repeat","while"],[""," ("],["Identifier","$i"],[""," < "],["Identifier","@$traits"],["",") {\n            "],["Statement","my"],[""," "],["Identifier","$trait"],[""," = "],["Identifier","$traits->[$i"],["","++"],["Identifier","]"],["",";\n            "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Operator","ref"],["","("],["Identifier","$trait"],["","); "],["Comment","# options to a trait we discarded"],["","\n\n            "],["Identifier","$trait"],[""," = Moose::Util::resolve_metatrait_alias("],["String","Attribute"],[""," => "],["Identifier","$trait"],["",")\n                  || "],["Identifier","$trait"],["",";\n\n            "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$class"],["","->does("],["Identifier","$trait"],["",");\n\n            "],["Statement","push"],[""," "],["Identifier","@traits"],["",", "],["Identifier","$trait"],["",";\n\n            "],["Comment","# are there options?"],["","\n            "],["Conditional","if"],[""," ("],["Identifier","$traits->[$i]"],[""," && "],["Operator","ref"],["","("],["Identifier","$traits->[$i]"],["",")) {\n                "],["Identifier","$has_foreign_options"],[""," = "],["Number","1"],["","\n                    "],["Conditional","if"],[""," any { "],["Identifier","$_"],[""," "],["Operator","ne"],[""," "],["String","'-alias'"],[""," && "],["Identifier","$_"],[""," "],["Operator","ne"],[""," "],["String","'-excludes'"],[""," } "],["Statement","keys"],[""," "],["Identifier","%{"],[""," "],["Identifier","$traits->[$i]"],[""," "],["Identifier","}"],["",";\n\n                "],["Statement","push"],[""," "],["Identifier","@traits"],["",", "],["Identifier","$traits->[$i"],["","++"],["Identifier","]"],["",";\n            }\n        }\n\n        "],["Conditional","if"],[""," ("],["Identifier","@traits"],["",") {\n            "],["Statement","my"],[""," "],["Identifier","%options"],[""," = (\n                "],["String","superclasses"],[""," => [ "],["Identifier","$class"],[""," ],\n                "],["String","roles"],["","        => [ "],["Identifier","@traits"],[""," ],\n            );\n\n            "],["Conditional","if"],[""," ("],["Identifier","$has_foreign_options"],["",") {\n                "],["Identifier","$options{"],["String","weaken"],["Identifier","}"],[""," = "],["Number","0"],["",";\n            }\n            "],["Conditional","else"],[""," {\n                "],["Identifier","$options{"],["String","cache"],["Identifier","}"],[""," = "],["Number","1"],["",";\n            }\n\n            "],["Statement","my"],[""," "],["Identifier","$anon_class"],[""," = Moose::Meta::Class->create_anon_class("],["Identifier","%options"],["",");\n            "],["Identifier","$class"],[""," = "],["Identifier","$anon_class"],["","->name;\n        }\n    }\n\n    "],["Statement","return"],[""," ( "],["Statement","wantarray"],[""," ? ( "],["Identifier","$class"],["",", "],["Identifier","@traits"],[""," ) : "],["Identifier","$class"],[""," );\n}\n\n"],["Comment","# ..."],["","\n\n"],["Comment","# method-generating options shouldn't be overridden"],["","\n"],["Keyword","sub "],["Function","illegal_options_for_inheritance "],["","{\n    "],["String","qw(reader writer accessor clearer predicate)"],["","\n}\n\n"],["Comment","# "],["Todo","NOTE"],["Comment","/"],["Todo","TODO"],["","\n"],["Comment","# This method *must* be able to handle"],["","\n"],["Comment","# Class::MOP::Attribute instances as"],["","\n"],["Comment","# well. Yes, I know that is wrong, but"],["","\n"],["Comment","# apparently we didn't realize it was"],["","\n"],["Comment","# doing that and now we have some code"],["","\n"],["Comment","# which is dependent on it. The real"],["","\n"],["Comment","# solution of course is to push this"],["","\n"],["Comment","# feature back up into Class::MOP::Attribute"],["","\n"],["Comment","# but I not right now, I am too lazy."],["","\n"],["Comment","# However if you are reading this and"],["","\n"],["Comment","# looking for something to do,.. please"],["","\n"],["Comment","# be my guest."],["","\n"],["Comment","# - stevan"],["","\n"],["Keyword","sub "],["Function","clone_and_inherit_options "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","%options"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# we may want to extends a Class::MOP::Attribute"],["","\n    "],["Comment","# in which case we need to be able to use the"],["","\n    "],["Comment","# core set of legal options that have always"],["","\n    "],["Comment","# been here. But we allows Moose::Meta::Attribute"],["","\n    "],["Comment","# instances to changes them."],["","\n    "],["Comment","# - SL"],["","\n    "],["Statement","my"],[""," "],["Identifier","@illegal_options"],[""," = "],["Identifier","$self"],["","->can("],["String","'illegal_options_for_inheritance'"],["",")\n        ? "],["Identifier","$self"],["","->illegal_options_for_inheritance\n        : ();\n\n    "],["Statement","my"],[""," "],["Identifier","@found_illegal_options"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Statement","exists"],[""," "],["Identifier","$options{$_}"],[""," && "],["Statement","exists"],[""," "],["Identifier","$self->{$_}"],[""," ? "],["Identifier","$_"],[""," : "],["Operator","undef"],[""," "],["Statement","}"],[""," "],["Identifier","@illegal_options"],["",";\n    ("],["Statement","scalar"],[""," "],["Identifier","@found_illegal_options"],[""," == "],["Number","0"],["",")\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Illegal inherited options => (\""],[""," . ("],["Statement","join"],[""," "],["String","', '"],[""," => "],["Identifier","@found_illegal_options"],["",") . "],["String","\")\""],["",", "],["String","data"],[""," => \\"],["Identifier","%options"],["",");\n\n    "],["Identifier","$self"],["","->_process_isa_option( "],["Identifier","$self"],["","->name, \\"],["Identifier","%options"],[""," );\n    "],["Identifier","$self"],["","->_process_does_option( "],["Identifier","$self"],["","->name, \\"],["Identifier","%options"],[""," );\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# this doesn't apply to Class::MOP::Attributes,"],["","\n    "],["Comment","# so we can ignore it for them."],["","\n    "],["Comment","# - SL"],["","\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->can("],["String","'interpolate_class'"],["",")) {\n        ( "],["Identifier","$options{"],["String","metaclass"],["Identifier","}"],["",", "],["Statement","my"],[""," "],["Identifier","@traits"],[""," ) = "],["Identifier","$self"],["","->interpolate_class(\\"],["Identifier","%options"],["",");\n\n        "],["Statement","my"],[""," "],["Identifier","%seen"],["",";\n        "],["Statement","my"],[""," "],["Identifier","@all_traits"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$seen{$_}"],["","++ "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->applied_traits || [] "],["Identifier","}"],["",", "],["Identifier","@traits"],["",";\n        "],["Identifier","$options{"],["String","traits"],["Identifier","}"],[""," = \\"],["Identifier","@all_traits"],[""," "],["Conditional","if"],[""," "],["Identifier","@all_traits"],["",";\n    }\n\n    "],["Comment","# This method can be called on a CMOP::Attribute object, so we need to"],["","\n    "],["Comment","# make sure we can call this method."],["","\n    "],["Identifier","$self"],["","->_process_lazy_build_option( "],["Identifier","$self"],["","->name, \\"],["Identifier","%options"],[""," )\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->can("],["String","'_process_lazy_build_option'"],["",");\n\n    "],["Identifier","$self"],["","->clone("],["Identifier","%options"],["",");\n}\n\n"],["Keyword","sub "],["Function","clone "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","%params"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","delete"],[""," "],["Identifier","$params{"],["String","metaclass"],["Identifier","}"],[""," || "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n\n    "],["Statement","my"],[""," ( "],["Identifier","@init"],["",", "],["Identifier","@non_init"],[""," );\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ( "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->has_value("],["Identifier","$self"],["",") "],["Statement","}"],[""," Class::MOP::class_of("],["Identifier","$self"],["",")->get_all_attributes ) {\n        "],["Statement","push"],[""," "],["Identifier","@{"],[""," "],["Identifier","$attr"],["","->has_init_arg ? \\"],["Identifier","@init"],[""," : \\"],["Identifier","@non_init"],[""," "],["Identifier","}"],["",", "],["Identifier","$attr"],["",";\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","%new_params"],[""," = ( ( "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->"],["String","init_arg"],[""," => "],["Identifier","$_"],["","->get_value("],["Identifier","$self"],["",") "],["Statement","}"],[""," "],["Identifier","@init"],[""," ), "],["Identifier","%params"],[""," );\n\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Statement","delete"],[""," "],["Identifier","$new_params{"],["String","name"],["Identifier","}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$clone"],[""," = "],["Identifier","$class"],["","->new("],["Identifier","$name"],["",", "],["Identifier","%new_params"],["",", "],["String","__hack_no_process_options"],[""," => "],["Number","1"],[""," );\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ( "],["Identifier","@non_init"],[""," ) {\n        "],["Identifier","$attr"],["","->set_value("],["Identifier","$clone"],["",", "],["Identifier","$attr"],["","->get_value("],["Identifier","$self"],["","));\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$clone"],["",";\n}\n\n"],["Keyword","sub "],["Function","_process_options "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$class"],["","->_process_is_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_isa_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_does_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_coerce_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_trigger_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_auto_deref_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_lazy_build_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_lazy_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n    "],["Identifier","$class"],["","->_process_required_option( "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," );\n}\n\n"],["Keyword","sub "],["Function","_process_is_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$options->{"],["String","is"],["Identifier","}"],["",";\n\n    "],["Comment","### -------------------------"],["","\n    "],["Comment","## is => ro, writer => _foo    # turns into (reader => foo, writer => _foo) as before"],["","\n    "],["Comment","## is => rw, writer => _foo    # turns into (reader => foo, writer => _foo)"],["","\n    "],["Comment","## is => rw, accessor => _foo  # turns into (accessor => _foo)"],["","\n    "],["Comment","## is => ro, accessor => _foo  # error, accesor is rw"],["","\n    "],["Comment","### -------------------------"],["","\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$options->{"],["String","is"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'ro'"],[""," ) {\n        "],["Identifier","$class"],["","->throw_error(\n            "],["String","\"Cannot define an accessor name on a read-only attribute, accessors are read/write\""],["",",\n            "],["String","data"],[""," => "],["Identifier","$options"],[""," )\n            "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","accessor"],["Identifier","}"],["",";\n        "],["Identifier","$options->{"],["String","reader"],["Identifier","}"],[""," ||= "],["Identifier","$name"],["",";\n    }\n    "],["Conditional","elsif"],[""," ( "],["Identifier","$options->{"],["String","is"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'rw'"],[""," ) {\n        "],["Conditional","if"],[""," ( "],["Identifier","$options->{"],["String","writer"],["Identifier","}"],[""," ) {\n            "],["Identifier","$options->{"],["String","reader"],["Identifier","}"],[""," ||= "],["Identifier","$name"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$options->{"],["String","accessor"],["Identifier","}"],[""," ||= "],["Identifier","$name"],["",";\n        }\n    }\n    "],["Conditional","elsif"],[""," ( "],["Identifier","$options->{"],["String","is"],["Identifier","}"],[""," "],["Operator","eq"],[""," "],["String","'bare'"],[""," ) {\n        "],["Statement","return"],["",";\n        "],["Comment","# do nothing, but don't complain (later) about missing methods"],["","\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$class"],["","->throw_error( "],["String","\"I do not understand this option (is => \""],["","\n                . "],["Identifier","$options->{"],["String","is"],["Identifier","}"],["","\n                . "],["String","\") on attribute ("],["Identifier","$name"],["String",")\""],["",", "],["String","data"],[""," => "],["Identifier","$options->{"],["String","is"],["Identifier","}"],[""," );\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_isa_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","does"],["Identifier","}"],[""," ) {\n        "],["Conditional","if"],[""," ( try { "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["","->can("],["String","'does'"],["",") } ) {\n            ( "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["","->does( "],["Identifier","$options->{"],["String","does"],["Identifier","}"],[""," ) )\n                || "],["Identifier","$class"],["","->throw_error(\n                "],["String","\"Cannot have an isa option and a does option if the isa does not do the does on attribute ("],["Identifier","$name"],["String",")\""],["",",\n                "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$class"],["","->throw_error(\n                "],["String","\"Cannot have an isa option which cannot ->does() on attribute ("],["Identifier","$name"],["String",")\""],["",",\n                "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n        }\n    }\n\n    "],["Comment","# allow for anon-subtypes here ..."],["","\n    "],["Comment","#"],["","\n    "],["Comment","# Checking for Specio explicitly is completely revolting. At some point"],["","\n    "],["Comment","# this needs to be refactored so that Moose core defines a standard type"],["","\n    "],["Comment","# API that all types must implement. Unfortunately, the current core API"],["","\n    "],["Comment","# is _not_ the right API, so we probably need to A) come up with the new"],["","\n    "],["Comment","# API (Specio is a good start); B) refactor the core types to implement"],["","\n    "],["Comment","# that API; C) do duck type checking on type objects."],["","\n    "],["Conditional","if"],[""," ( blessed( "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],[""," )\n        && "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["","->isa("],["String","'Moose::Meta::TypeConstraint'"],["",") ) {\n        "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],[""," = "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",";\n    }\n    "],["Conditional","elsif"],[""," (\n        blessed( "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],[""," )\n        && Moose::Util::does_role(\n            "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",", "],["String","'Specio::Constraint::Role::Interface'"],["","\n        )\n        ) {\n        "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],[""," = "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],["","\n            = Moose::Util::TypeConstraints::find_or_create_isa_type_constraint(\n            "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",",\n            { "],["String","package_defined_in"],[""," => "],["Identifier","$options->{"],["String","definition_context"],["Identifier","}->{"],["String","package"],["Identifier","}"],[""," }\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_does_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","does"],["Identifier","}"],[""," && ! "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","isa"],["Identifier","}"],["",";\n\n    "],["Comment","# allow for anon-subtypes here ..."],["","\n    "],["Conditional","if"],[""," ( blessed( "],["Identifier","$options->{"],["String","does"],["Identifier","}"],[""," )\n        && "],["Identifier","$options->{"],["String","does"],["Identifier","}"],["","->isa("],["String","'Moose::Meta::TypeConstraint'"],["",") ) {\n        "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],[""," = "],["Identifier","$options->{"],["String","does"],["Identifier","}"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],["","\n            = Moose::Util::TypeConstraints::find_or_create_does_type_constraint(\n            "],["Identifier","$options->{"],["String","does"],["Identifier","}"],["",",\n            { "],["String","package_defined_in"],[""," => "],["Identifier","$options->{"],["String","definition_context"],["Identifier","}->{"],["String","package"],["Identifier","}"],[""," }\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_coerce_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$options->{"],["String","coerce"],["Identifier","}"],["",";\n\n    ( "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],[""," )\n        || "],["Identifier","$class"],["","->throw_error(\n        "],["String","\"You cannot have coercion without specifying a type constraint on attribute ("],["Identifier","$name"],["String",")\""],["",",\n        "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n\n    "],["Identifier","$class"],["","->throw_error(\n        "],["String","\"You cannot have a weak reference to a coerced value on attribute ("],["Identifier","$name"],["String",")\""],["",",\n        "],["String","data"],[""," => "],["Identifier","$options"],[""," )\n        "],["Conditional","if"],[""," "],["Identifier","$options->{"],["String","weak_ref"],["Identifier","}"],["",";\n\n    "],["Conditional","unless"],[""," ( "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],["","->has_coercion ) {\n        "],["Statement","my"],[""," "],["Identifier","$type"],[""," = "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],["","->name;\n\n        Moose::Deprecated::deprecated(\n            "],["String","feature"],[""," => "],["String","'coerce without coercion'"],["",",\n            "],["String","message"],[""," =>\n                "],["String","\"You cannot coerce an attribute ("],["Identifier","$name"],["String",") unless its type ("],["Identifier","$type"],["String",") has a coercion\""],["","\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_trigger_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","trigger"],["Identifier","}"],["",";\n\n    ( "],["String","'CODE'"],[""," "],["Operator","eq"],[""," "],["Operator","ref"],[""," "],["Identifier","$options->{"],["String","trigger"],["Identifier","}"],[""," )\n        || "],["Identifier","$class"],["","->throw_error("],["String","\"Trigger must be a CODE ref on attribute ("],["Identifier","$name"],["String",")\""],["",", "],["String","data"],[""," => "],["Identifier","$options->{"],["String","trigger"],["Identifier","}"],["",");\n}\n\n"],["Keyword","sub "],["Function","_process_auto_deref_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$options->{"],["String","auto_deref"],["Identifier","}"],["",";\n\n    ( "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],[""," )\n        || "],["Identifier","$class"],["","->throw_error(\n        "],["String","\"You cannot auto-dereference without specifying a type constraint on attribute ("],["Identifier","$name"],["String",")\""],["",",\n        "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n\n    ( "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],["","->is_a_type_of("],["String","'ArrayRef'"],["",")\n      || "],["Identifier","$options->{"],["String","type_constraint"],["Identifier","}"],["","->is_a_type_of("],["String","'HashRef'"],["",") )\n        || "],["Identifier","$class"],["","->throw_error(\n        "],["String","\"You cannot auto-dereference anything other than a ArrayRef or HashRef on attribute ("],["Identifier","$name"],["String",")\""],["",",\n        "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n}\n\n"],["Keyword","sub "],["Function","_process_lazy_build_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$options->{"],["String","lazy_build"],["Identifier","}"],["",";\n\n    "],["Identifier","$class"],["","->throw_error(\n        "],["String","\"You can not use lazy_build and default for the same attribute ("],["Identifier","$name"],["String",")\""],["",",\n        "],["String","data"],[""," => "],["Identifier","$options"],[""," )\n        "],["Conditional","if"],[""," "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","default"],["Identifier","}"],["",";\n\n    "],["Identifier","$options->{"],["String","lazy"],["Identifier","}"],[""," = "],["Number","1"],["",";\n    "],["Identifier","$options->{"],["String","builder"],["Identifier","}"],[""," ||= "],["String","\"_build_"],["Identifier","${name}"],["String","\""],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$name"],[""," =~ "],["Statement","/"],["String","^_"],["Statement","/"],[""," ) {\n        "],["Identifier","$options->{"],["String","clearer"],["Identifier","}"],["","   ||= "],["String","\"_clear"],["Identifier","${name}"],["String","\""],["",";\n        "],["Identifier","$options->{"],["String","predicate"],["Identifier","}"],[""," ||= "],["String","\"_has"],["Identifier","${name}"],["String","\""],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$options->{"],["String","clearer"],["Identifier","}"],["","   ||= "],["String","\"clear_"],["Identifier","${name}"],["String","\""],["",";\n        "],["Identifier","$options->{"],["String","predicate"],["Identifier","}"],[""," ||= "],["String","\"has_"],["Identifier","${name}"],["String","\""],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_lazy_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$options->{"],["String","lazy"],["Identifier","}"],["",";\n\n    ( "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","default"],["Identifier","}"],[""," || "],["Operator","defined"],[""," "],["Identifier","$options->{"],["String","builder"],["Identifier","}"],[""," )\n        || "],["Identifier","$class"],["","->throw_error(\n        "],["String","\"You cannot have a lazy attribute ("],["Identifier","$name"],["String",") without specifying a default value for it\""],["",",\n        "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n}\n\n"],["Keyword","sub "],["Function","_process_required_option "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class"],["",", "],["Identifier","$name"],["",", "],["Identifier","$options"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," (\n        "],["Identifier","$options->{"],["String","required"],["Identifier","}"],["","\n        && !(\n            ( !"],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","init_arg"],["Identifier","}"],[""," || "],["Operator","defined"],[""," "],["Identifier","$options->{"],["String","init_arg"],["Identifier","}"],[""," )\n            || "],["Statement","exists"],[""," "],["Identifier","$options->{"],["String","default"],["Identifier","}"],["","\n            || "],["Operator","defined"],[""," "],["Identifier","$options->{"],["String","builder"],["Identifier","}"],["","\n        )\n        ) {\n        "],["Identifier","$class"],["","->throw_error(\n            "],["String","\"You cannot have a required attribute ("],["Identifier","$name"],["String",") without a default, builder, or an init_arg\""],["",",\n            "],["String","data"],[""," => "],["Identifier","$options"],[""," );\n    }\n}\n\n"],["Keyword","sub "],["Function","initialize_instance_slot "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$init_arg"],[""," = "],["Identifier","$self"],["","->init_arg();\n    "],["Comment","# try to fetch the init arg from the %params ..."],["","\n\n    "],["Statement","my"],[""," "],["Identifier","$val"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$value_is_set"],["",";\n    "],["Conditional","if"],[""," ( "],["Operator","defined"],["","("],["Identifier","$init_arg"],["",") "],["Operator","and"],[""," "],["Statement","exists"],[""," "],["Identifier","$params->{$init_arg}"],["",") {\n        "],["Identifier","$val"],[""," = "],["Identifier","$params->{$init_arg}"],["",";\n        "],["Identifier","$value_is_set"],[""," = "],["Number","1"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Comment","# skip it if it's lazy"],["","\n        "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Identifier","$self"],["","->is_lazy;\n        "],["Comment","# and die if it's required and doesn't have a default value"],["","\n        "],["Identifier","$self"],["","->throw_error("],["String","\"Attribute (\""],[""," . "],["Identifier","$self"],["","->name . "],["String","\") is required\""],["",", "],["String","object"],[""," => "],["Identifier","$instance"],["",", "],["String","data"],[""," => "],["Identifier","$params"],["",")\n            "],["Conditional","if"],[""," "],["Identifier","$self"],["","->is_required && !"],["Identifier","$self"],["","->has_default && !"],["Identifier","$self"],["","->has_builder;\n\n        "],["Comment","# if nothing was in the %params, we can use the"],["","\n        "],["Comment","# attribute's default value (if it has one)"],["","\n        "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_default) {\n            "],["Identifier","$val"],[""," = "],["Identifier","$self"],["","->"],["Conditional","default"],["","("],["Identifier","$instance"],["",");\n            "],["Identifier","$value_is_set"],[""," = "],["Number","1"],["",";\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$self"],["","->has_builder) {\n            "],["Identifier","$val"],[""," = "],["Identifier","$self"],["","->_call_builder("],["Identifier","$instance"],["",");\n            "],["Identifier","$value_is_set"],[""," = "],["Number","1"],["",";\n        }\n    }\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$value_is_set"],["",";\n\n    "],["Identifier","$val"],[""," = "],["Identifier","$self"],["","->_coerce_and_verify( "],["Identifier","$val"],["",", "],["Identifier","$instance"],[""," );\n\n    "],["Identifier","$self"],["","->set_initial_value("],["Identifier","$instance"],["",", "],["Identifier","$val"],["",");\n\n    "],["Conditional","if"],[""," ( "],["Operator","ref"],[""," "],["Identifier","$val"],[""," && "],["Identifier","$self"],["","->is_weak_ref ) {\n        "],["Identifier","$self"],["","->_weaken_value("],["Identifier","$instance"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_call_builder "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$instance"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$builder"],[""," = "],["Identifier","$self"],["","->builder();\n\n    "],["Statement","return"],[""," "],["Identifier","$instance"],["","->"],["Identifier","$builder"],["","()\n        "],["Conditional","if"],[""," "],["Identifier","$instance"],["","->can( "],["Identifier","$self"],["","->builder );\n\n    "],["Identifier","$self"],["","->throw_error(  blessed("],["Identifier","$instance"],["",")\n            . "],["String","\" does not support builder method '\""],["","\n            . "],["Identifier","$self"],["","->builder\n            . "],["String","\"' for attribute '\""],["","\n            . "],["Identifier","$self"],["","->name\n            . "],["String","\"'\""],["",",\n            "],["String","object"],[""," => "],["Identifier","$instance"],["",",\n     );\n}\n\n"],["Comment","## Slot management"],["","\n\n"],["Keyword","sub "],["Function","_make_initializer_writer_callback "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$meta_instance"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$slot_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$old_callback"],[""," = "],["Identifier","$self"],["","->SUPER::_make_initializer_writer_callback("],["Identifier","@_"],["",");\n    "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n        "],["Identifier","$old_callback"],["","->("],["Identifier","$self"],["","->_coerce_and_verify("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",", "],["Identifier","$instance"],["","));\n    };\n}\n\n"],["Keyword","sub "],["Function","set_value "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$instance"],["",", "],["Identifier","@args"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$value"],[""," = "],["Identifier","$args["],["Number","0"],["Identifier","]"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$attr_name"],[""," = "],["Statement","quotemeta"],["","("],["Identifier","$self"],["","->name);\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->is_required "],["Operator","and"],[""," "],["Operator","not"],[""," "],["Identifier","@args"],["",") {\n        "],["Identifier","$self"],["","->throw_error("],["String","\"Attribute ("],["Identifier","$attr_name"],["String",") is required\""],["",", "],["String","object"],[""," => "],["Identifier","$instance"],["",");\n    }\n\n    "],["Identifier","$value"],[""," = "],["Identifier","$self"],["","->_coerce_and_verify( "],["Identifier","$value"],["",", "],["Identifier","$instance"],[""," );\n\n    "],["Statement","my"],[""," "],["Identifier","@old"],["",";\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->has_trigger && "],["Identifier","$self"],["","->has_value("],["Identifier","$instance"],["",") ) {\n        "],["Identifier","@old"],[""," = "],["Identifier","$self"],["","->get_value("],["Identifier","$instance"],["",", "],["String","'for trigger'"],["",");\n    }\n\n    "],["Identifier","$self"],["","->SUPER::set_value("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",");\n\n    "],["Conditional","if"],[""," ( "],["Operator","ref"],[""," "],["Identifier","$value"],[""," && "],["Identifier","$self"],["","->is_weak_ref ) {\n        "],["Identifier","$self"],["","->_weaken_value("],["Identifier","$instance"],["",");\n    }\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_trigger) {\n        "],["Identifier","$self"],["","->trigger->("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",", "],["Identifier","@old"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_set_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",", "],["Identifier","$for_constructor"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$old"],["","     = "],["String","'@old'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$copy"],["","    = "],["String","'$val'"],["",";\n    "],["Identifier","$tc"],["","       ||= "],["String","'$type_constraint'"],["",";\n    "],["Identifier","$coercion"],[""," ||= "],["String","'$type_coercion'"],["",";\n    "],["Identifier","$message"],["","  ||= "],["String","'$type_message'"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@code"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->_writer_value_needs_copy) {\n        "],["Statement","push"],[""," "],["Identifier","@code"],["",", "],["Identifier","$self"],["","->_inline_copy_value("],["Identifier","$value"],["",", "],["Identifier","$copy"],["",");\n        "],["Identifier","$value"],[""," = "],["Identifier","$copy"],["",";\n    }\n\n    "],["Comment","# constructors already handle required checks"],["","\n    "],["Statement","push"],[""," "],["Identifier","@code"],["",", "],["Identifier","$self"],["","->_inline_check_required\n        "],["Conditional","unless"],[""," "],["Identifier","$for_constructor"],["",";\n\n    "],["Statement","push"],[""," "],["Identifier","@code"],["",", "],["Identifier","$self"],["","->_inline_tc_code("],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",");\n\n    "],["Comment","# constructors do triggers all at once at the end"],["","\n    "],["Statement","push"],[""," "],["Identifier","@code"],["",", "],["Identifier","$self"],["","->_inline_get_old_value_for_trigger("],["Identifier","$instance"],["",", "],["Identifier","$old"],["",")\n        "],["Conditional","unless"],[""," "],["Identifier","$for_constructor"],["",";\n\n    "],["Statement","push"],[""," "],["Identifier","@code"],["",", (\n        "],["Identifier","$self"],["","->SUPER::_inline_set_value("],["Identifier","$instance"],["",", "],["Identifier","$value"],["","),\n        "],["Identifier","$self"],["","->_inline_weaken_value("],["Identifier","$instance"],["",", "],["Identifier","$value"],["","),\n    );\n\n    "],["Comment","# constructors do triggers all at once at the end"],["","\n    "],["Statement","push"],[""," "],["Identifier","@code"],["",", "],["Identifier","$self"],["","->_inline_trigger("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",", "],["Identifier","$old"],["",")\n        "],["Conditional","unless"],[""," "],["Identifier","$for_constructor"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","@code"],["",";\n}\n\n"],["Keyword","sub "],["Function","_writer_value_needs_copy "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->should_coerce;\n}\n\n"],["Keyword","sub "],["Function","_inline_copy_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$value"],["",", "],["Identifier","$copy"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["String","'my '"],[""," . "],["Identifier","$copy"],[""," . "],["String","' = '"],[""," . "],["Identifier","$value"],[""," . "],["String","';'"],["","\n}\n\n"],["Keyword","sub "],["Function","_inline_check_required "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->is_required;\n\n    "],["Statement","my"],[""," "],["Identifier","$attr_name"],[""," = "],["Statement","quotemeta"],["","("],["Identifier","$self"],["","->name);\n\n    "],["Statement","return"],[""," (\n        "],["String","'if (@_ < 2) {'"],["",",\n            "],["Identifier","$self"],["","->_inline_throw_error(\n                "],["String","'\"Attribute ('"],[""," . "],["Identifier","$attr_name"],[""," . "],["String","') is required\"'"],["","\n            ) . "],["String","';'"],["",",\n        "],["String","'}'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_tc_code "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",", "],["Identifier","$is_lazy"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," (\n        "],["Identifier","$self"],["","->_inline_check_coercion(\n            "],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$is_lazy"],["",",\n        ),\n        "],["Identifier","$self"],["","->_inline_check_constraint(\n            "],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$message"],["",", "],["Identifier","$is_lazy"],["",",\n        ),\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_check_coercion "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->should_coerce && "],["Identifier","$self"],["","->type_constraint->has_coercion;\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->type_constraint->can_be_inlined ) {\n        "],["Statement","return"],[""," (\n            "],["String","'if (! ('"],[""," . "],["Identifier","$self"],["","->type_constraint->_inline_check("],["Identifier","$value"],["",") . "],["String","')) {'"],["",",\n                "],["Identifier","$value"],[""," . "],["String","' = '"],[""," . "],["Identifier","$coercion"],[""," . "],["String","'->('"],[""," . "],["Identifier","$value"],[""," . "],["String","');'"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," (\n            "],["String","'if (!'"],[""," . "],["Identifier","$tc"],[""," . "],["String","'->('"],[""," . "],["Identifier","$value"],[""," . "],["String","')) {'"],["",",\n                "],["Identifier","$value"],[""," . "],["String","' = '"],[""," . "],["Identifier","$coercion"],[""," . "],["String","'->('"],[""," . "],["Identifier","$value"],[""," . "],["String","');'"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_check_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$value"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$message"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_type_constraint;\n\n    "],["Statement","my"],[""," "],["Identifier","$attr_name"],[""," = "],["Statement","quotemeta"],["","("],["Identifier","$self"],["","->name);\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->type_constraint->can_be_inlined ) {\n        "],["Statement","return"],[""," (\n            "],["String","'if (! ('"],[""," . "],["Identifier","$self"],["","->type_constraint->_inline_check("],["Identifier","$value"],["",") . "],["String","')) {'"],["",",\n                "],["Identifier","$self"],["","->_inline_throw_error(\n                    "],["String","'\"Attribute ('"],[""," . "],["Identifier","$attr_name"],[""," . "],["String","') does not pass the type '"],["","\n                  . "],["String","'constraint because: \" . '"],["","\n                  . "],["String","'do { local $_ = '"],[""," . "],["Identifier","$value"],[""," . "],["String","'; '"],["","\n                      . "],["Identifier","$message"],[""," . "],["String","'->('"],[""," . "],["Identifier","$value"],[""," . "],["String","')'"],["","\n                  . "],["String","'}'"],["",",\n                    "],["String","'data => '"],[""," . "],["Identifier","$value"],["","\n                ) . "],["String","';'"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," (\n            "],["String","'if (!'"],[""," . "],["Identifier","$tc"],[""," . "],["String","'->('"],[""," . "],["Identifier","$value"],[""," . "],["String","')) {'"],["",",\n                "],["Identifier","$self"],["","->_inline_throw_error(\n                    "],["String","'\"Attribute ('"],[""," . "],["Identifier","$attr_name"],[""," . "],["String","') does not pass the type '"],["","\n                  . "],["String","'constraint because: \" . '"],["","\n                  . "],["String","'do { local $_ = '"],[""," . "],["Identifier","$value"],[""," . "],["String","'; '"],["","\n                      . "],["Identifier","$message"],[""," . "],["String","'->('"],[""," . "],["Identifier","$value"],[""," . "],["String","')'"],["","\n                  . "],["String","'}'"],["",",\n                    "],["String","'data => '"],[""," . "],["Identifier","$value"],["","\n                ) . "],["String","';'"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_get_old_value_for_trigger "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$old"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_trigger;\n\n    "],["Statement","return"],[""," (\n        "],["String","'my '"],[""," . "],["Identifier","$old"],[""," . "],["String","' = '"],[""," . "],["Identifier","$self"],["","->_inline_instance_has("],["Identifier","$instance"],["","),\n            "],["String","'? '"],[""," . "],["Identifier","$self"],["","->_inline_instance_get("],["Identifier","$instance"],["","),\n            "],["String","': ();'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_weaken_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->is_weak_ref;\n\n    "],["Statement","my"],[""," "],["Identifier","$mi"],[""," = "],["Identifier","$self"],["","->associated_class->get_meta_instance;\n    "],["Statement","return"],[""," (\n        "],["Identifier","$mi"],["","->inline_weaken_slot_value("],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name),\n            "],["String","'if ref '"],[""," . "],["Identifier","$value"],[""," . "],["String","';'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_trigger "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",", "],["Identifier","$old"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_trigger;\n\n    "],["Statement","return"],[""," "],["String","'$trigger->('"],[""," . "],["Identifier","$instance"],[""," . "],["String","', '"],[""," . "],["Identifier","$value"],[""," . "],["String","', '"],[""," . "],["Identifier","$old"],[""," . "],["String","');'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_eval_environment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$env"],[""," = { };\n\n    "],["Identifier","$env->{"],["String","'$trigger'"],["Identifier","}"],[""," = \\("],["Identifier","$self"],["","->trigger)\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_trigger;\n    "],["Identifier","$env->{"],["String","'$attr_default'"],["Identifier","}"],[""," = \\("],["Identifier","$self"],["","->"],["Conditional","default"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_default;\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_type_constraint) {\n        "],["Statement","my"],[""," "],["Identifier","$tc_obj"],[""," = "],["Identifier","$self"],["","->type_constraint;\n\n        "],["Identifier","$env->{"],["String","'$type_constraint'"],["Identifier","}"],[""," = \\(\n            "],["Identifier","$tc_obj"],["","->_compiled_type_constraint\n        ) "],["Conditional","unless"],[""," "],["Identifier","$tc_obj"],["","->can_be_inlined;\n        "],["Comment","# these two could probably get inlined versions too"],["","\n        "],["Identifier","$env->{"],["String","'$type_coercion'"],["Identifier","}"],[""," = \\(\n            "],["Identifier","$tc_obj"],["","->coercion->_compiled_type_coercion\n        ) "],["Conditional","if"],[""," "],["Identifier","$tc_obj"],["","->has_coercion;\n        "],["Identifier","$env->{"],["String","'$type_message'"],["Identifier","}"],[""," = \\(\n            "],["Identifier","$tc_obj"],["","->has_message ? "],["Identifier","$tc_obj"],["","->message : "],["Identifier","$tc_obj"],["","->_default_message\n        );\n\n        "],["Identifier","$env"],[""," = { "],["Identifier","%$env"],["",", "],["Identifier","%{"],[""," "],["Identifier","$tc_obj"],["","->inline_environment "],["Identifier","}"],[""," };\n    }\n\n    "],["Comment","# "],["Todo","XXX"],["Comment"," ugh, fix these"],["","\n    "],["Identifier","$env->{"],["String","'$attr'"],["Identifier","}"],[""," = \\"],["Identifier","$self"],["","\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_initializer && "],["Identifier","$self"],["","->is_lazy;\n    "],["Comment","# pretty sure this is only going to be closed over if you use a custom"],["","\n    "],["Comment","# error class at this point, but we should still get rid of this"],["","\n    "],["Comment","# at some point"],["","\n    "],["Identifier","$env->{"],["String","'$meta'"],["Identifier","}"],[""," = \\("],["Identifier","$self"],["","->associated_class);\n\n    "],["Statement","return"],[""," "],["Identifier","$env"],["",";\n}\n\n"],["Keyword","sub "],["Function","_weaken_value "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$instance"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta_instance"],[""," = Class::MOP::Class->initialize( blessed("],["Identifier","$instance"],["",") )\n        ->get_meta_instance;\n\n    "],["Identifier","$meta_instance"],["","->weaken_slot_value( "],["Identifier","$instance"],["",", "],["Identifier","$self"],["","->name );\n}\n\n"],["Keyword","sub "],["Function","get_value "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$instance"],["",", "],["Identifier","$for_trigger"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->is_lazy) {\n        "],["Conditional","unless"],[""," ("],["Identifier","$self"],["","->has_value("],["Identifier","$instance"],["",")) {\n            "],["Statement","my"],[""," "],["Identifier","$value"],["",";\n            "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_default) {\n                "],["Identifier","$value"],[""," = "],["Identifier","$self"],["","->"],["Conditional","default"],["","("],["Identifier","$instance"],["",");\n            } "],["Conditional","elsif"],[""," ( "],["Identifier","$self"],["","->has_builder ) {\n                "],["Identifier","$value"],[""," = "],["Identifier","$self"],["","->_call_builder("],["Identifier","$instance"],["",");\n            }\n\n            "],["Identifier","$value"],[""," = "],["Identifier","$self"],["","->_coerce_and_verify( "],["Identifier","$value"],["",", "],["Identifier","$instance"],[""," );\n\n            "],["Identifier","$self"],["","->set_initial_value("],["Identifier","$instance"],["",", "],["Identifier","$value"],["",");\n\n            "],["Conditional","if"],[""," ( "],["Operator","ref"],[""," "],["Identifier","$value"],[""," && "],["Identifier","$self"],["","->is_weak_ref ) {\n                "],["Identifier","$self"],["","->_weaken_value("],["Identifier","$instance"],["",");\n            }\n        }\n    }\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$self"],["","->should_auto_deref && ! "],["Identifier","$for_trigger"],[""," ) {\n\n        "],["Statement","my"],[""," "],["Identifier","$type_constraint"],[""," = "],["Identifier","$self"],["","->type_constraint;\n\n        "],["Conditional","if"],[""," ("],["Identifier","$type_constraint"],["","->is_a_type_of("],["String","'ArrayRef'"],["",")) {\n            "],["Statement","my"],[""," "],["Identifier","$rv"],[""," = "],["Identifier","$self"],["","->SUPER::get_value("],["Identifier","$instance"],["",");\n            "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$rv"],["",";\n            "],["Statement","return"],[""," "],["Statement","wantarray"],[""," ? "],["Identifier","@{"],[""," "],["Identifier","$rv"],[""," "],["Identifier","}"],[""," : "],["Identifier","$rv"],["",";\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$type_constraint"],["","->is_a_type_of("],["String","'HashRef'"],["",")) {\n            "],["Statement","my"],[""," "],["Identifier","$rv"],[""," = "],["Identifier","$self"],["","->SUPER::get_value("],["Identifier","$instance"],["",");\n            "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$rv"],["",";\n            "],["Statement","return"],[""," "],["Statement","wantarray"],[""," ? "],["Identifier","%{"],[""," "],["Identifier","$rv"],[""," "],["Identifier","}"],[""," : "],["Identifier","$rv"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$self"],["","->throw_error("],["String","\"Can not auto de-reference the type constraint '\""],[""," . "],["Identifier","$type_constraint"],["","->name . "],["String","\"'\""],["",", "],["String","object"],[""," => "],["Identifier","$instance"],["",", "],["String","type_constraint"],[""," => "],["Identifier","$type_constraint"],["",");\n        }\n\n    }\n    "],["Conditional","else"],[""," {\n\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->SUPER::get_value("],["Identifier","$instance"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_get_value "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$slot_access"],[""," = "],["Identifier","$self"],["","->_inline_instance_get("],["Identifier","$instance"],["",");\n    "],["Identifier","$tc"],["","           ||= "],["String","'$type_constraint'"],["",";\n    "],["Identifier","$coercion"],["","     ||= "],["String","'$type_coercion'"],["",";\n    "],["Identifier","$message"],["","      ||= "],["String","'$type_message'"],["",";\n\n    "],["Statement","return"],[""," (\n        "],["Identifier","$self"],["","->_inline_check_lazy("],["Identifier","$instance"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["","),\n        "],["Identifier","$self"],["","->_inline_return_auto_deref("],["Identifier","$slot_access"],["","),\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_check_lazy "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->is_lazy;\n\n    "],["Statement","my"],[""," "],["Identifier","$slot_exists"],[""," = "],["Identifier","$self"],["","->_inline_instance_has("],["Identifier","$instance"],["",");\n\n    "],["Statement","return"],[""," (\n        "],["String","'if (!'"],[""," . "],["Identifier","$slot_exists"],[""," . "],["String","') {'"],["",",\n            "],["Identifier","$self"],["","->_inline_init_from_default("],["Identifier","$instance"],["",", "],["String","'$default'"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",", "],["String","'lazy'"],["","),\n        "],["String","'}'"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_init_from_default "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$default"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$message"],["",", "],["Identifier","$for_lazy"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," (!("],["Identifier","$self"],["","->has_default || "],["Identifier","$self"],["","->has_builder)) {\n        "],["Identifier","$self"],["","->throw_error(\n            "],["String","'You cannot have a lazy attribute '"],["","\n          . "],["String","'('"],[""," . "],["Identifier","$self"],["","->name . "],["String","') '"],["","\n          . "],["String","'without specifying a default value for it'"],["",",\n            "],["String","attr"],[""," => "],["Identifier","$self"],["",",\n        );\n    }\n\n    "],["Statement","return"],[""," (\n        "],["Identifier","$self"],["","->_inline_generate_default("],["Identifier","$instance"],["",", "],["Identifier","$default"],["","),\n        "],["Comment","# intentionally not using _inline_tc_code, since that can be overridden"],["","\n        "],["Comment","# to do things like possibly only do member tc checks, which isn't"],["","\n        "],["Comment","# appropriate for checking the result of a default"],["","\n        "],["Identifier","$self"],["","->has_type_constraint\n            ? ("],["Identifier","$self"],["","->_inline_check_coercion("],["Identifier","$default"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$coercion"],["",", "],["Identifier","$for_lazy"],["","),\n               "],["Identifier","$self"],["","->_inline_check_constraint("],["Identifier","$default"],["",", "],["Identifier","$tc"],["",", "],["Identifier","$message"],["",", "],["Identifier","$for_lazy"],["","))\n            : (),\n        "],["Identifier","$self"],["","->_inline_init_slot("],["Identifier","$instance"],["",", "],["Identifier","$default"],["","),\n        "],["Identifier","$self"],["","->_inline_weaken_value("],["Identifier","$instance"],["",", "],["Identifier","$default"],["","),\n    );\n}\n\n"],["Keyword","sub "],["Function","_inline_generate_default "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$instance"],["",", "],["Identifier","$default"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_default) {\n        "],["Statement","my"],[""," "],["Identifier","$source"],[""," = "],["String","'my '"],[""," . "],["Identifier","$default"],[""," . "],["String","' = $attr_default'"],["",";\n        "],["Identifier","$source"],[""," .= "],["String","'->('"],[""," . "],["Identifier","$instance"],[""," . "],["String","')'"],["","\n            "],["Conditional","if"],[""," "],["Identifier","$self"],["","->is_default_a_coderef;\n        "],["Statement","return"],[""," "],["Identifier","$source"],[""," . "],["String","';'"],["",";\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","$self"],["","->has_builder) {\n        "],["Statement","my"],[""," "],["Identifier","$builder"],[""," = B::perlstring("],["Identifier","$self"],["","->builder);\n        "],["Statement","my"],[""," "],["Identifier","$builder_str"],[""," = "],["Statement","quotemeta"],["","("],["Identifier","$self"],["","->builder);\n        "],["Statement","my"],[""," "],["Identifier","$attr_name_str"],[""," = "],["Statement","quotemeta"],["","("],["Identifier","$self"],["","->name);\n        "],["Statement","return"],[""," (\n            "],["String","'my '"],[""," . "],["Identifier","$default"],[""," . "],["String","';'"],["",",\n            "],["String","'if (my $builder = '"],[""," . "],["Identifier","$instance"],[""," . "],["String","'->can('"],[""," . "],["Identifier","$builder"],[""," . "],["String","')) {'"],["",",\n                "],["Identifier","$default"],[""," . "],["String","' = '"],[""," . "],["Identifier","$instance"],[""," . "],["String","'->$builder;'"],["",",\n            "],["String","'}'"],["",",\n            "],["String","'else {'"],["",",\n                "],["String","'my $class = ref('"],[""," . "],["Identifier","$instance"],[""," . "],["String","') || '"],[""," . "],["Identifier","$instance"],[""," . "],["String","';'"],["",",\n                "],["Identifier","$self"],["","->_inline_throw_error(\n                    "],["String","'\"$class does not support builder method '"],["","\n                  . "],["String","'\\''"],[""," . "],["Identifier","$builder_str"],[""," . "],["String","'\\' for attribute '"],["","\n                  . "],["String","'\\''"],[""," . "],["Identifier","$attr_name_str"],[""," . "],["String","'\\'\"'"],["","\n                ) . "],["String","';'"],["",",\n            "],["String","'}'"],["",",\n        );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$self"],["","->throw_error(\n            "],["String","\"Can't generate a default for \""],[""," . "],["Identifier","$self"],["","->name\n          . "],["String","\" since no default or builder was specified\""],["","\n        );\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_init_slot "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$inv"],["",", "],["Identifier","$value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," ("],["Identifier","$self"],["","->has_initializer) {\n        "],["Statement","return"],[""," "],["String","'$attr->set_initial_value('"],[""," . "],["Identifier","$inv"],[""," . "],["String","', '"],[""," . "],["Identifier","$value"],[""," . "],["String","');'"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," "],["Identifier","$self"],["","->_inline_instance_set("],["Identifier","$inv"],["",", "],["Identifier","$value"],["",") . "],["String","';'"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_inline_return_auto_deref "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["String","'return '"],[""," . "],["Identifier","$self"],["","->_auto_deref("],["Identifier","@_"],["",") . "],["String","';'"],["",";\n}\n\n"],["Keyword","sub "],["Function","_auto_deref "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$ref_value"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$ref_value"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->should_auto_deref;\n\n    "],["Statement","my"],[""," "],["Identifier","$type_constraint"],[""," = "],["Identifier","$self"],["","->type_constraint;\n\n    "],["Statement","my"],[""," "],["Identifier","$sigil"],["",";\n    "],["Conditional","if"],[""," ("],["Identifier","$type_constraint"],["","->is_a_type_of("],["String","'ArrayRef'"],["",")) {\n        "],["Identifier","$sigil"],[""," = "],["String","'@'"],["",";\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","$type_constraint"],["","->is_a_type_of("],["String","'HashRef'"],["",")) {\n        "],["Identifier","$sigil"],[""," = "],["String","'%'"],["",";\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$self"],["","->throw_error(\n            "],["String","'Can not auto de-reference the type constraint \\''"],["","\n          . "],["Identifier","$type_constraint"],["","->name\n          . "],["String","'\\''"],["",",\n            "],["String","type_constraint"],[""," => "],["Identifier","$type_constraint"],["",",\n        );\n    }\n\n    "],["Statement","return"],[""," "],["String","'wantarray '"],["","\n             . "],["String","'? '"],[""," . "],["Identifier","$sigil"],[""," . "],["String","'{ ('"],[""," . "],["Identifier","$ref_value"],[""," . "],["String","') || return } '"],["","\n             . "],["String","': ('"],[""," . "],["Identifier","$ref_value"],[""," . "],["String","')'"],["",";\n}\n\n"],["Comment","## installing accessors"],["","\n\n"],["Keyword","sub "],["Function","accessor_metaclass "],["","{ "],["String","'Moose::Meta::Method::Accessor'"],[""," }\n\n"],["Keyword","sub "],["Function","install_accessors "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->SUPER::install_accessors("],["Identifier","@_"],["",");\n    "],["Identifier","$self"],["","->install_delegation "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_handles;\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","_check_associated_methods "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Conditional","unless"],[""," (\n        "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->associated_methods "],["Identifier","}"],["","\n        || ("],["Identifier","$self"],["","->_is_metadata || "],["String","''"],["",") "],["Operator","eq"],[""," "],["String","'bare'"],["","\n    ) {\n        Carp::cluck(\n            "],["String","'Attribute ('"],[""," . "],["Identifier","$self"],["","->name . "],["String","') of class '"],["","\n            . "],["Identifier","$self"],["","->associated_class->name\n            . "],["String","' has no associated methods'"],["","\n            . "],["String","' (did you mean to provide an \"is\" argument?)'"],["","\n            . "],["String","\""],["Special","\\n"],["String","\""],["","\n        )\n    }\n}\n\n"],["Keyword","sub "],["Function","_process_accessors "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$type"],["",", "],["Identifier","$accessor"],["",", "],["Identifier","$generate_as_inline_methods"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Identifier","$accessor"],[""," = ( "],["Statement","keys"],[""," "],["Identifier","%$accessor"],[""," )["],["Number","0"],["","] "],["Conditional","if"],[""," ( "],["Operator","ref"],["","("],["Identifier","$accessor"],["",") || "],["String","''"],[""," ) "],["Operator","eq"],[""," "],["String","'HASH'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->associated_class->get_method("],["Identifier","$accessor"],["",");\n\n    "],["Conditional","if"],[""," (   "],["Identifier","$method"],["","\n        && "],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method::Accessor'"],["",")\n        && "],["Identifier","$method"],["","->associated_attribute->name "],["Operator","ne"],[""," "],["Identifier","$self"],["","->name ) {\n\n        "],["Statement","my"],[""," "],["Identifier","$other_attr_name"],[""," = "],["Identifier","$method"],["","->associated_attribute->name;\n        "],["Statement","my"],[""," "],["Identifier","$name"],["","            = "],["Identifier","$self"],["","->name;\n\n        Carp::cluck(\n            "],["String","\"You are overwriting an accessor ("],["Identifier","$accessor"],["String",") for the "],["Identifier","$other_attr_name"],["String"," attribute\""],["","\n                . "],["String","\" with a new accessor method for the "],["Identifier","$name"],["String"," attribute\""],[""," );\n    }\n\n    "],["Conditional","if"],[""," (\n           "],["Identifier","$method"],["","\n        && !"],["Identifier","$method"],["","->is_stub\n        && !"],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method::Accessor'"],["",")\n        && (  !"],["Identifier","$self"],["","->definition_context\n            || "],["Identifier","$method"],["","->package_name "],["Operator","eq"],[""," "],["Identifier","$self"],["","->definition_context->{package} )\n        ) {\n\n        Carp::cluck(\n            "],["String","\"You are overwriting a locally defined method ("],["Identifier","$accessor"],["String",") with \""],["","\n                . "],["String","\"an accessor\""],[""," );\n    }\n\n    "],["Conditional","if"],[""," (  !"],["Identifier","$self"],["","->associated_class->has_method("],["Identifier","$accessor"],["",")\n        && "],["Identifier","$self"],["","->associated_class->has_package_symbol( "],["String","'&'"],[""," . "],["Identifier","$accessor"],[""," ) ) {\n\n        Carp::cluck(\n            "],["String","\"You are overwriting a locally defined function ("],["Identifier","$accessor"],["String",") with \""],["","\n                . "],["String","\"an accessor\""],[""," );\n    }\n\n    "],["Identifier","$self"],["","->SUPER::_process_accessors("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","remove_accessors "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Identifier","$self"],["","->SUPER::remove_accessors("],["Identifier","@_"],["",");\n    "],["Identifier","$self"],["","->remove_delegation "],["Conditional","if"],[""," "],["Identifier","$self"],["","->has_handles;\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","install_delegation "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["","\n    "],["Comment","# Here we canonicalize the 'handles' option"],["","\n    "],["Comment","# this will sort out any details and always"],["","\n    "],["Comment","# return an hash of methods which we want"],["","\n    "],["Comment","# to delagate to, see that method for details"],["","\n    "],["Statement","my"],[""," "],["Identifier","%handles"],[""," = "],["Identifier","$self"],["","->_canonicalize_handles;\n\n\n    "],["Comment","# install the delegation ..."],["","\n    "],["Statement","my"],[""," "],["Identifier","$associated_class"],[""," = "],["Identifier","$self"],["","->associated_class;\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$handle"],[""," ("],["Statement","sort"],[""," "],["Statement","keys"],[""," "],["Identifier","%handles"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$method_to_call"],[""," = "],["Identifier","$handles{$handle}"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$class_name"],[""," = "],["Identifier","$associated_class"],["","->name;\n        "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["String","\""],["Identifier","${class_name}"],["String","::"],["Identifier","${handle}"],["String","\""],["",";\n\n        "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$associated_class"],["","->get_method("],["Identifier","$handle"],["",") ) {\n            "],["Identifier","$self"],["","->throw_error(\n                "],["String","\"You cannot overwrite a locally defined method ("],["Identifier","$handle"],["String",") with a delegation\""],["",",\n                "],["String","method_name"],[""," => "],["Identifier","$handle"],["","\n            ) "],["Conditional","unless"],[""," "],["Identifier","$method"],["","->is_stub;\n        }\n\n        "],["Comment","# "],["Todo","NOTE:"],["","\n        "],["Comment","# handles is not allowed to delegate"],["","\n        "],["Comment","# any of these methods, as they will"],["","\n        "],["Comment","# override the ones in your class, which"],["","\n        "],["Comment","# is almost certainly not what you want."],["","\n\n        "],["Comment","# "],["Todo","FIXME"],["Comment"," warn when $handle was explicitly specified, but not if the source is a regex or something"],["","\n        "],["Comment","#cluck(\"Not delegating method '$handle' because it is a core method\") and"],["","\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$class_name"],["","->isa("],["String","\"Moose::Object\""],["",") "],["Operator","and"],[""," "],["Identifier","$handle"],[""," =~ "],["Statement","/"],["String","^BUILD|DEMOLISH$"],["Statement","/"],[""," || Moose::Object->can("],["Identifier","$handle"],["",");\n\n        "],["Statement","my"],[""," "],["Identifier","$method"],[""," = "],["Identifier","$self"],["","->_make_delegation_method("],["Identifier","$handle"],["",", "],["Identifier","$method_to_call"],["",");\n\n        "],["Identifier","$self"],["","->associated_class->add_method("],["Identifier","$method"],["","->name, "],["Identifier","$method"],["",");\n        "],["Identifier","$self"],["","->associate_method("],["Identifier","$method"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","remove_delegation "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%handles"],[""," = "],["Identifier","$self"],["","->_canonicalize_handles;\n    "],["Statement","my"],[""," "],["Identifier","$associated_class"],[""," = "],["Identifier","$self"],["","->associated_class;\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$handle"],[""," ("],["Statement","keys"],[""," "],["Identifier","%handles"],["",") {\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," any { "],["Identifier","$handle"],[""," "],["Operator","eq"],[""," "],["Identifier","$_"],[""," }\n                    "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],["","\n                    "],["Identifier","@{"],[""," "],["Identifier","$self"],["","->associated_methods "],["Identifier","}"],["",";\n        "],["Identifier","$self"],["","->associated_class->remove_method("],["Identifier","$handle"],["",");\n    }\n}\n\n"],["Comment","# private methods to help delegation ..."],["","\n\n"],["Keyword","sub "],["Function","_canonicalize_handles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","    = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$handles"],[""," = "],["Identifier","$self"],["","->handles;\n    "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$handle_type"],[""," = "],["Operator","ref"],["","("],["Identifier","$handles"],["",")) {\n        "],["Conditional","if"],[""," ("],["Identifier","$handle_type"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],["",") {\n            "],["Statement","return"],[""," "],["Identifier","%{$handles}"],["",";\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$handle_type"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",") {\n            "],["Statement","return"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$_"],[""," "],["Statement","}"],[""," "],["Identifier","@{$handles}"],["",";\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$handle_type"],[""," "],["Operator","eq"],[""," "],["String","'Regexp'"],["",") {\n            ("],["Identifier","$self"],["","->has_type_constraint)\n                || "],["Identifier","$self"],["","->throw_error("],["String","\"Cannot delegate methods based on a Regexp without a type constraint (isa)\""],["",", "],["String","data"],[""," => "],["Identifier","$handles"],["",");\n            "],["Statement","return"],[""," "],["Statement","map"],["","  "],["Statement","{"],[""," ("],["Identifier","$_"],[""," => "],["Identifier","$_"],["",") "],["Statement","}"],["","\n                   "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Statement","/"],["Identifier","$handles"],["Statement","/"],[""," "],["Statement","}"],[""," "],["Identifier","$self"],["","->_get_delegate_method_list;\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$handle_type"],[""," "],["Operator","eq"],[""," "],["String","'CODE'"],["",") {\n            "],["Statement","return"],[""," "],["Identifier","$handles"],["","->("],["Identifier","$self"],["",", "],["Identifier","$self"],["","->_find_delegate_metaclass);\n        }\n        "],["Conditional","elsif"],[""," (blessed("],["Identifier","$handles"],["",") && "],["Identifier","$handles"],["","->isa("],["String","'Moose::Meta::TypeConstraint::DuckType'"],["",")) {\n            "],["Statement","return"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$_"],[""," "],["Statement","}"],[""," "],["Identifier","@{"],[""," "],["Identifier","$handles"],["","->methods "],["Identifier","}"],["",";\n        }\n        "],["Conditional","elsif"],[""," (blessed("],["Identifier","$handles"],["",") && "],["Identifier","$handles"],["","->isa("],["String","'Moose::Meta::TypeConstraint::Role'"],["",")) {\n            "],["Identifier","$handles"],[""," = "],["Identifier","$handles"],["","->role;\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$self"],["","->throw_error("],["String","\"Unable to canonicalize the 'handles' option with "],["Identifier","$handles"],["String","\""],["",", "],["String","data"],[""," => "],["Identifier","$handles"],["",");\n        }\n    }\n\n    load_class("],["Identifier","$handles"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$role_meta"],[""," = Class::MOP::class_of("],["Identifier","$handles"],["",");\n\n    (blessed "],["Identifier","$role_meta"],[""," && "],["Identifier","$role_meta"],["","->isa("],["String","'Moose::Meta::Role'"],["","))\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Unable to canonicalize the 'handles' option with "],["Identifier","$handles"],["String"," because its metaclass is not a Moose::Meta::Role\""],["",", "],["String","data"],[""," => "],["Identifier","$handles"],["",");\n\n    "],["Statement","return"],[""," "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Identifier","$_"],[""," "],["Statement","}"],["","\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],["","\n        "],["Statement","grep"],[""," "],["Statement","{"],[""," !"],["Identifier","$_"],["","->isa("],["String","'Class::MOP::Method::Meta'"],["",") "],["Statement","}"],[""," (\n        "],["Identifier","$role_meta"],["","->_get_local_methods,\n        "],["Identifier","$role_meta"],["","->get_required_method_list,\n        );\n}\n\n"],["Keyword","sub "],["Function","_get_delegate_method_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Identifier","$self"],["","->_find_delegate_metaclass;\n    "],["Conditional","if"],[""," ("],["Identifier","$meta"],["","->isa("],["String","'Class::MOP::Class'"],["",")) {\n        "],["Statement","return"],[""," "],["Statement","map"],["","  "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],["","  "],["Comment","# "],["Todo","NOTE:"],["Comment"," !never! delegate &meta"],["","\n               "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->package_name "],["Operator","ne"],[""," "],["String","'Moose::Object'"],[""," && !"],["Identifier","$_"],["","->isa("],["String","'Class::MOP::Method::Meta'"],["",") "],["Statement","}"],["","\n                    "],["Identifier","$meta"],["","->get_all_methods;\n    }\n    "],["Conditional","elsif"],[""," ("],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",")) {\n        "],["Statement","return"],[""," "],["Identifier","$meta"],["","->get_method_list;\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$self"],["","->throw_error("],["String","\"Unable to recognize the delegate metaclass '"],["Identifier","$meta"],["String","'\""],["",", "],["String","data"],[""," => "],["Identifier","$meta"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","_find_delegate_metaclass "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Conditional","if"],[""," ("],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$self"],["","->_isa_metadata) {\n        "],["Conditional","unless"],[""," ( is_class_loaded("],["Identifier","$class"],["",") ) {\n            "],["Identifier","$self"],["","->throw_error(\n                "],["Statement","sprintf"],["","(\n                    "],["String","'The %s attribute is trying to delegate to a class which has not been loaded - %s'"],["",",\n                    "],["Identifier","$self"],["","->name, "],["Identifier","$class"],["","\n                )\n            );\n        }\n        "],["Comment","# we might be dealing with a non-Moose class,"],["","\n        "],["Comment","# and need to make our own metaclass. if there's"],["","\n        "],["Comment","# already a metaclass, it will be returned"],["","\n        "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$class"],["",");\n    }\n    "],["Conditional","elsif"],[""," ("],["Statement","my"],[""," "],["Identifier","$role"],[""," = "],["Identifier","$self"],["","->_does_metadata) {\n        "],["Conditional","unless"],[""," ( is_class_loaded("],["Identifier","$class"],["",") ) {\n            "],["Identifier","$self"],["","->throw_error(\n                "],["Statement","sprintf"],["","(\n                    "],["String","'The %s attribute is trying to delegate to a role which has not been loaded - %s'"],["",",\n                    "],["Identifier","$self"],["","->name, "],["Identifier","$role"],["","\n                )\n            );\n        }\n\n        "],["Statement","return"],[""," Class::MOP::class_of("],["Identifier","$role"],["",");\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$self"],["","->throw_error("],["String","\"Cannot find delegate metaclass for attribute \""],[""," . "],["Identifier","$self"],["","->name);\n    }\n}\n\n"],["Keyword","sub "],["Function","delegation_metaclass "],["","{ "],["String","'Moose::Meta::Method::Delegation'"],[""," }\n\n"],["Keyword","sub "],["Function","_make_delegation_method "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self"],["",", "],["Identifier","$handle_name"],["",", "],["Identifier","$method_to_call"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@curried_arguments"],["",";\n\n    ("],["Identifier","$method_to_call"],["",", "],["Identifier","@curried_arguments"],["",") = "],["Identifier","@$method_to_call"],["","\n        "],["Conditional","if"],[""," "],["String","'ARRAY'"],[""," "],["Operator","eq"],[""," "],["Operator","ref"],["","("],["Identifier","$method_to_call"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$self"],["","->delegation_metaclass->new(\n        "],["String","name"],["","               => "],["Identifier","$handle_name"],["",",\n        "],["String","package_name"],["","       => "],["Identifier","$self"],["","->associated_class->name,\n        "],["String","attribute"],["","          => "],["Identifier","$self"],["",",\n        "],["String","delegate_to_method"],[""," => "],["Identifier","$method_to_call"],["",",\n        "],["String","curried_arguments"],["","  => \\"],["Identifier","@curried_arguments"],["",",\n    );\n}\n\n"],["Keyword","sub "],["Function","_coerce_and_verify "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","     = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$val"],["","      = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$instance"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$val"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->has_type_constraint;\n\n    "],["Identifier","$val"],[""," = "],["Identifier","$self"],["","->type_constraint->coerce("],["Identifier","$val"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$self"],["","->should_coerce && "],["Identifier","$self"],["","->type_constraint->has_coercion;\n\n    "],["Identifier","$self"],["","->verify_against_type_constraint("],["Identifier","$val"],["",", "],["String","instance"],[""," => "],["Identifier","$instance"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$val"],["",";\n}\n\n"],["Keyword","sub "],["Function","verify_against_type_constraint "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$val"],["","  = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," !"],["Identifier","$self"],["","->has_type_constraint;\n\n    "],["Statement","my"],[""," "],["Identifier","$type_constraint"],[""," = "],["Identifier","$self"],["","->type_constraint;\n\n    "],["Identifier","$type_constraint"],["","->check("],["Identifier","$val"],["",")\n        || "],["Identifier","$self"],["","->throw_error("],["String","\"Attribute (\""],["","\n                 . "],["Identifier","$self"],["","->name\n                 . "],["String","\") does not pass the type constraint because: \""],["","\n                 . "],["Identifier","$type_constraint"],["","->get_message("],["Identifier","$val"],["","), "],["String","data"],[""," => "],["Identifier","$val"],["",", "],["Identifier","@_"],["",");\n}\n\n"],["Statement","package"],["Type"," Moose::Meta::Attribute::Custom::Moose"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Custom::Moose::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::Attribute::Custom::Moose::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n"],["Keyword","sub "],["Function","register_implementation "],["","{ "],["String","'Moose::Meta::Attribute'"],[""," }\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The Moose attribute metaclass"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::Attribute - The Moose attribute metaclass\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class is a subclass of "],["Identifier","L<Class::MOP::Attribute>"],[""," that provides\nadditional Moose-specific functionality.\n\nTo really understand this class, you will need to start with the\n"],["Identifier","L<Class::MOP::Attribute>"],[""," documentation. This class can be understood\nas a set of additional features on top of the basic feature provided\nby that parent class.\n\n"],["Statement","=head1"],[""," "],["String","INHERITANCE"],["","\n\n"],["Identifier","C<Moose::Meta::Attribute>"],[""," is a subclass of "],["Identifier","L<Class::MOP::Attribute>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\nMany of the documented below override methods in\n"],["Identifier","L<Class::MOP::Attribute>"],[""," and add Moose specific features.\n\n"],["Statement","=head2"],[""," "],["String","Creation"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Attribute->new($name, %options) >>"],["","\n\nThis method overrides the "],["Identifier","L<Class::MOP::Attribute>"],[""," constructor.\n\nMany of the options below are described in more detail in the\n"],["Identifier","L<Moose::Manual::Attributes>"],[""," document.\n\nIt adds the following options to the constructor:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* is => 'ro', 'rw', 'bare'"],["","\n\nThis provides a shorthand for specifying the "],["Identifier","C<reader>"],["",", "],["Identifier","C<writer>"],["",", or\n"],["Identifier","C<accessor>"],[""," names. If the attribute is read-only ('ro') then it will\nhave a "],["Identifier","C<reader>"],[""," method with the same attribute as the name.\n\nIf it is read-write ('rw') then it will have an "],["Identifier","C<accessor>"],[""," method\nwith the same name. If you provide an explicit "],["Identifier","C<writer>"],[""," for a\nread-write attribute, then you will have a "],["Identifier","C<reader>"],[""," with the same\nname as the attribute, and a "],["Identifier","C<writer>"],[""," with the name you provided.\n\nUse 'bare' when you are deliberately not installing any methods\n(accessor, reader, etc.) associated with this attribute; otherwise,\nMoose will issue a deprecation warning when this attribute is added to a\nmetaclass.\n\n"],["Statement","=item"],[""," "],["String","* isa => $type"],["","\n\nThis option accepts a type. The type can be a string, which should be\na type name. If the type name is unknown, it is assumed to be a class\nname.\n\nThis option can also accept a "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object.\n\nIf you "],["Identifier","I<also>"],[""," provide a "],["Identifier","C<does>"],[""," option, then your "],["Identifier","C<isa>"],[""," option must\nbe a class name, and that class must do the role specified with\n"],["Identifier","C<does>"],["",".\n\n"],["Statement","=item"],[""," "],["String","* does => $role"],["","\n\nThis is short-hand for saying that the attribute's type must be an\nobject which does the named role.\n\n"],["Statement","=item"],[""," "],["String","* coerce => $bool"],["","\n\nThis option is only valid for objects with a type constraint\n("],["Identifier","C<isa>"],["",") that defined a coercion. If this is true, then coercions will be applied whenever\nthis attribute is set.\n\nYou can make both this and the "],["Identifier","C<weak_ref>"],[""," option true.\n\n"],["Statement","=item"],[""," "],["String","* trigger => $sub"],["","\n\nThis option accepts a subroutine reference, which will be called after\nthe attribute is set.\n\n"],["Statement","=item"],[""," "],["String","* required => $bool"],["","\n\nAn attribute which is required must be provided to the constructor. An\nattribute which is required can also have a "],["Identifier","C<default>"],[""," or "],["Identifier","C<builder>"],["",",\nwhich will satisfy its required-ness.\n\nA required attribute must have a "],["Identifier","C<default>"],["",", "],["Identifier","C<builder>"],[""," or a\nnon-"],["Identifier","C<undef>"],[""," "],["Identifier","C<init_arg>"],["","\n\n"],["Statement","=item"],[""," "],["String","* lazy => $bool"],["","\n\nA lazy attribute must have a "],["Identifier","C<default>"],[""," or "],["Identifier","C<builder>"],["",". When an\nattribute is lazy, the default value will not be calculated until the\nattribute is read.\n\n"],["Statement","=item"],[""," "],["String","* weak_ref => $bool"],["","\n\nIf this is true, the attribute's value will be stored as a weak\nreference.\n\n"],["Statement","=item"],[""," "],["String","* auto_deref => $bool"],["","\n\nIf this is true, then the reader will dereference the value when it is\ncalled. The attribute must have a type constraint which defines the\nattribute as an array or hash reference.\n\n"],["Statement","=item"],[""," "],["String","* lazy_build => $bool"],["","\n\nSetting this to true makes the attribute lazy and provides a number of\ndefault methods.\n\n"],["PreProc","  has 'size' => ("],["","\n"],["PreProc","      is         => 'ro',"],["","\n"],["PreProc","      lazy_build => 1,"],["","\n"],["PreProc","  );"],["","\n\nis equivalent to this:\n\n"],["PreProc","  has 'size' => ("],["","\n"],["PreProc","      is        => 'ro',"],["","\n"],["PreProc","      lazy      => 1,"],["","\n"],["PreProc","      builder   => '_build_size',"],["","\n"],["PreProc","      clearer   => 'clear_size',"],["","\n"],["PreProc","      predicate => 'has_size',"],["","\n"],["PreProc","  );"],["","\n\nIf your attribute name starts with an underscore ("],["Identifier","C<_>"],["","), then the clearer\nand predicate will as well:\n\n"],["PreProc","  has '_size' => ("],["","\n"],["PreProc","      is         => 'ro',"],["","\n"],["PreProc","      lazy_build => 1,"],["","\n"],["PreProc","  );"],["","\n\nbecomes:\n\n"],["PreProc","  has '_size' => ("],["","\n"],["PreProc","      is        => 'ro',"],["","\n"],["PreProc","      lazy      => 1,"],["","\n"],["PreProc","      builder   => '_build__size',"],["","\n"],["PreProc","      clearer   => '_clear_size',"],["","\n"],["PreProc","      predicate => '_has_size',"],["","\n"],["PreProc","  );"],["","\n\nNote the doubled underscore in the builder name. Internally, Moose\nsimply prepends the attribute name with \"_build_\" to come up with the\nbuilder name.\n\n"],["Statement","=item"],[""," "],["String","* documentation"],["","\n\nAn arbitrary string that can be retrieved later by calling "],["Identifier","C<<"],["","\n"],["Identifier","$attr->documentation >>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->clone(%options) >>"],["","\n\nThis creates a new attribute based on attribute being cloned. You must\nsupply a "],["Identifier","C<name>"],[""," option to provide a new name for the attribute.\n\nThe "],["Identifier","C<%options>"],[""," can only specify options handled by\n"],["Identifier","L<Class::MOP::Attribute>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Value management"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->initialize_instance_slot($meta_instance, $instance, $params) >>"],["","\n\nThis method is used internally to initialize the attribute's slot in\nthe object "],["Identifier","C<$instance>"],["",".\n\nThis overrides the "],["Identifier","L<Class::MOP::Attribute>"],[""," method to handle lazy\nattributes, weak references, and type constraints.\n\n"],["Statement","=item"],[""," "],["Identifier","B<get_value>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<set_value>"],["","\n\n"],["PreProc","  eval { $point->meta->get_attribute('x')->set_value($point, 'forty-two') };"],["","\n"],["PreProc","  if($@) {"],["","\n"],["PreProc","    print \"Oops: $@\\n\";"],["","\n"],["PreProc","  }"],["","\n\n"],["Identifier","I<Attribute (x) does not pass the type constraint (Int) with 'forty-two'>"],["","\n\nBefore setting the value, a check is made on the type constraint of\nthe attribute, if it has one, to see if the value passes it. If the\nvalue fails to pass, the set operation dies.\n\nAny coercion to convert values is done before checking the type constraint.\n\nTo check a value against a type constraint before setting it, fetch the\nattribute instance using "],["Identifier","L<Class::MOP::Class/find_attribute_by_name>"],["",",\nfetch the type_constraint from the attribute using "],["Identifier","L<Moose::Meta::Attribute/type_constraint>"],["","\nand call "],["Identifier","L<Moose::Meta::TypeConstraint/check>"],["",". See "],["Identifier","L<Moose::Cookbook::Basics::Company_Subtypes>"],["","\nfor an example.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Attribute Accessor generation"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->install_accessors >>"],["","\n\nThis method overrides the parent to also install delegation methods.\n\nIf, after installing all methods, the attribute object has no associated\nmethods, it throws an error unless "],["Identifier","C<< is => 'bare' >>"],[""," was passed to the\nattribute constructor.  (Trying to add an attribute that has no associated\nmethods is almost always an error.)\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->remove_accessors >>"],["","\n\nThis method overrides the parent to also remove delegation methods.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->inline_set($instance_var, $value_var) >>"],["","\n\nThis method return a code snippet suitable for inlining the relevant\noperation. It expect strings containing variable names to be used in the\ninlining, like "],["Identifier","C<'$self'>"],[""," or "],["Identifier","C<'$_[1]'>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->install_delegation >>"],["","\n\nThis method adds its delegation methods to the attribute's associated\nclass, if it has any to add.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->remove_delegation >>"],["","\n\nThis method remove its delegation methods from the attribute's\nassociated class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->accessor_metaclass >>"],["","\n\nReturns the accessor metaclass name, which defaults to\n"],["Identifier","L<Moose::Meta::Method::Accessor>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->delegation_metaclass >>"],["","\n\nReturns the delegation metaclass name, which defaults to\n"],["Identifier","L<Moose::Meta::Method::Delegation>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Additional Moose features"],["","\n\nThese methods are not found in the superclass. They support features\nprovided by Moose.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->does($role) >>"],["","\n\nThis indicates whether the "],["Identifier","I<attribute itself>"],[""," does the given\nrole. The role can be given as a full class name, or as a resolvable\ntrait name.\n\nNote that this checks the attribute itself, not its type constraint,\nso it is checking the attribute's metaclass and any traits applied to\nthe attribute.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::Class->interpolate_class_and_new($name, %options) >>"],["","\n\nThis is an alternate constructor that handles the "],["Identifier","C<metaclass>"],[""," and\n"],["Identifier","C<traits>"],[""," options.\n\nEffectively, this method is a factory that finds or creates the\nappropriate class for the given "],["Identifier","C<metaclass>"],[""," and/or "],["Identifier","C<traits>"],["",".\n\nOnce it has the appropriate class, it will call "],["Identifier","C<< $class->new($name,"],["","\n"],["Identifier","%options) >>"],[""," on that class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->clone_and_inherit_options(%options) >>"],["","\n\nThis method supports the "],["Identifier","C<has '+foo'>"],[""," feature. It does various bits\nof processing on the supplied "],["Identifier","C<%options>"],[""," before ultimately calling\nthe "],["Identifier","C<clone>"],[""," method.\n\nOne of its main tasks is to make sure that the "],["Identifier","C<%options>"],[""," provided\ndoes not include the options returned by the\n"],["Identifier","C<illegal_options_for_inheritance>"],[""," method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->illegal_options_for_inheritance >>"],["","\n\nThis returns a blacklist of options that can not be overridden in a\nsubclass's attribute definition.\n\nThis exists to allow a custom metaclass to change or add to the list\nof options which can not be changed.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->type_constraint >>"],["","\n\nReturns the "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object for this attribute,\nif it has one.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_type_constraint >>"],["","\n\nReturns true if this attribute has a type constraint.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->verify_against_type_constraint($value) >>"],["","\n\nGiven a value, this method returns true if the value is valid for the\nattribute's type constraint. If the value is not valid, it throws an\nerror.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->handles >>"],["","\n\nThis returns the value of the "],["Identifier","C<handles>"],[""," option passed to the\nconstructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_handles >>"],["","\n\nReturns true if this attribute performs delegation.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->is_weak_ref >>"],["","\n\nReturns true if this attribute stores its value as a weak reference.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->is_required >>"],["","\n\nReturns true if this attribute is required to have a value.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->is_lazy >>"],["","\n\nReturns true if this attribute is lazy.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->is_lazy_build >>"],["","\n\nReturns true if the "],["Identifier","C<lazy_build>"],[""," option was true when passed to the\nconstructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->should_coerce >>"],["","\n\nReturns true if the "],["Identifier","C<coerce>"],[""," option passed to the constructor was\ntrue.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->should_auto_deref >>"],["","\n\nReturns true if the "],["Identifier","C<auto_deref>"],[""," option passed to the constructor was\ntrue.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->trigger >>"],["","\n\nThis is the subroutine reference that was in the "],["Identifier","C<trigger>"],[""," option\npassed to the constructor, if any.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_trigger >>"],["","\n\nReturns true if this attribute has a trigger set.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->documentation >>"],["","\n\nReturns the value that was in the "],["Identifier","C<documentation>"],[""," option passed to\nthe constructor, if any.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_documentation >>"],["","\n\nReturns true if this attribute has any documentation.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->applied_traits >>"],["","\n\nThis returns an array reference of all the traits which were applied\nto this attribute. If none were applied, this returns "],["Identifier","C<undef>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $attr->has_applied_traits >>"],["","\n\nReturns true if this attribute has any traits applied.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]