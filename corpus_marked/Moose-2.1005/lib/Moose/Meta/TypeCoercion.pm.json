[["","\n"],["Statement","package"],["Type"," Moose::Meta::TypeCoercion"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeCoercion::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Meta::TypeCoercion::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","metaclass;\n\n"],["Statement","use "],["","Moose::Meta::Attribute;\n"],["Statement","use "],["","Moose::Util::TypeConstraints ();\n\n__PACKAGE__->meta->add_attribute("],["String","'type_coercion_map'"],[""," => (\n    "],["String","reader"],["","  => "],["String","'type_coercion_map'"],["",",\n    "],["String","default"],[""," => "],["Keyword","sub "],["","{ [] },\n    Class::MOP::_definition_context(),\n));\n\n__PACKAGE__->meta->add_attribute(\n    Moose::Meta::Attribute->new("],["String","'type_constraint'"],[""," => (\n        "],["String","reader"],["","   => "],["String","'type_constraint'"],["",",\n        "],["String","weak_ref"],[""," => "],["Number","1"],["",",\n        Class::MOP::_definition_context(),\n    ))\n);\n\n"],["Comment","# private accessor"],["","\n__PACKAGE__->meta->add_attribute("],["String","'compiled_type_coercion'"],[""," => (\n    "],["String","accessor"],[""," => "],["String","'_compiled_type_coercion'"],["",",\n    Class::MOP::_definition_context(),\n));\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$self"],["","  = Class::MOP::class_of("],["Identifier","$class"],["",")->new_object("],["Identifier","@_"],["",");\n    "],["Identifier","$self"],["","->compile_type_coercion;\n    "],["Statement","return"],[""," "],["Identifier","$self"],["",";\n}\n\n"],["Keyword","sub "],["Function","compile_type_coercion "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@coercion_map"],[""," = "],["Identifier","@{$self"],["","->type_coercion_map"],["Identifier","}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@coercions"],["",";\n    "],["Repeat","while"],[""," ("],["Identifier","@coercion_map"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$constraint_name"],["",", "],["Identifier","$action"],["",") = "],["Statement","splice"],["","("],["Identifier","@coercion_map"],["",", "],["Number","0"],["",", "],["Number","2"],["",");\n        "],["Statement","my"],[""," "],["Identifier","$type_constraint"],[""," = "],["Operator","ref"],[""," "],["Identifier","$constraint_name"],[""," ? "],["Identifier","$constraint_name"],[""," : Moose::Util::TypeConstraints::find_or_parse_type_constraint("],["Identifier","$constraint_name"],["",");\n\n        "],["Conditional","unless"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$type_constraint"],[""," ) {\n            "],["Statement","require"],[""," Moose;\n            Moose->throw_error("],["String","\"Could not find the type constraint ("],["Identifier","$constraint_name"],["String",") to coerce from\""],["",");\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@coercions"],[""," => [\n            "],["Identifier","$type_constraint"],["","->_compiled_type_constraint,\n            "],["Identifier","$action"],["","\n        ];\n    }\n    "],["Identifier","$self"],["","->_compiled_type_coercion("],["Keyword","sub "],["","{\n        "],["Statement","my"],[""," "],["Identifier","$thing"],[""," = "],["Statement","shift"],["",";\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$coercion"],[""," ("],["Identifier","@coercions"],["",") {\n            "],["Statement","my"],[""," ("],["Identifier","$constraint"],["",", "],["Identifier","$converter"],["",") = "],["Identifier","@$coercion"],["",";\n            "],["Conditional","if"],[""," ("],["Identifier","$constraint"],["","->("],["Identifier","$thing"],["",")) {\n                "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$thing"],["",";\n                "],["Statement","return"],[""," "],["Identifier","$converter"],["","->("],["Identifier","$thing"],["",");\n            }\n        }\n        "],["Statement","return"],[""," "],["Identifier","$thing"],["",";\n    });\n}\n\n"],["Keyword","sub "],["Function","has_coercion_for_type "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$type_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%coercion_map"],[""," = "],["Identifier","@{$self"],["","->type_coercion_map"],["Identifier","}"],["",";\n    "],["Statement","exists"],[""," "],["Identifier","$coercion_map{$type_name}"],[""," ? "],["Number","1"],[""," : "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","add_type_coercions "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","@new_coercion_map"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$coercion_map"],[""," = "],["Identifier","$self"],["","->type_coercion_map;\n    "],["Statement","my"],[""," "],["Identifier","%has_coercion"],[""," = "],["Identifier","@$coercion_map"],["",";\n\n    "],["Repeat","while"],[""," ("],["Identifier","@new_coercion_map"],["",") {\n        "],["Statement","my"],[""," ("],["Identifier","$constraint_name"],["",", "],["Identifier","$action"],["",") = "],["Statement","splice"],["","("],["Identifier","@new_coercion_map"],["",", "],["Number","0"],["",", "],["Number","2"],["",");\n\n        "],["Conditional","if"],[""," ( "],["Statement","exists"],[""," "],["Identifier","$has_coercion{$constraint_name}"],[""," ) {\n            "],["Statement","require"],[""," Moose;\n            Moose->throw_error("],["String","\"A coercion action already exists for '"],["Identifier","$constraint_name"],["String","'\""],["",")\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@{$coercion_map}"],[""," => ("],["Identifier","$constraint_name"],["",", "],["Identifier","$action"],["",");\n    }\n\n    "],["Comment","# and re-compile ..."],["","\n    "],["Identifier","$self"],["","->compile_type_coercion;\n}\n\n"],["Keyword","sub "],["Function","coerce "],["","{ "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->_compiled_type_coercion->("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",") }\n\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The Moose Type Coercion metaclass"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Meta::TypeCoercion - The Moose Type Coercion metaclass\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nA type coercion object is basically a mapping of one or more type\nconstraints and the associated coercions subroutines.\n\nIt's unlikely that you will need to instantiate an object of this\nclass directly, as it's part of the deep internals of Moose.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeCoercion->new(%options) >>"],["","\n\nCreates a new type coercion object, based on the options provided.\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","* type_constraint"],["","\n\nThis is the "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," object for the type that is\nbeing coerced "],["Identifier","I<to>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $coercion->type_coercion_map >>"],["","\n\nThis returns the map of type constraints to coercions as an array\nreference. The values of the array alternate between type names and\nsubroutine references which implement the coercion.\n\nThe value is an array reference because coercions are tried in the\norder they are added.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $coercion->type_constraint >>"],["","\n\nThis returns the "],["Identifier","L<Moose::Meta::TypeConstraint>"],[""," that was passed to the\nconstructor.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $coercion->has_coercion_for_type($type_name) >>"],["","\n\nReturns true if the coercion can coerce the named type.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $coercion->add_type_coercions( $type_name => $sub, ... ) >>"],["","\n\nThis method takes a list of type names and subroutine references. If\nthe coercion already has a mapping for a given type, it throws an\nexception.\n\nCoercions are actually\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $coercion->coerce($value) >>"],["","\n\nThis method takes a value and applies the first valid coercion it\nfinds.\n\nThis means that if the value could belong to more than type in the\ncoercion object, the first coercion added is used.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Meta::TypeCoercion->meta >>"],["","\n\nThis will return a "],["Identifier","L<Class::MOP::Class>"],[""," instance for this class.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]