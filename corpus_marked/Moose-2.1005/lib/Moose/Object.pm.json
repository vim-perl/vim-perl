[["","\n"],["Statement","package"],["Type"," Moose::Object"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Object::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Object::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Carp ();\n"],["Statement","use "],["","Devel::GlobalDestruction ();\n"],["Statement","use "],["","MRO::Compat ();\n"],["Statement","use "],["","Scalar::Util ();\n"],["Statement","use "],["","Try::Tiny ();\n\n"],["Statement","use if"],[""," ( "],["Operator","not"],[""," "],["Statement","our"],[""," "],["Identifier","$__mx_is_compiled"],[""," ), "],["String","'Moose::Meta::Class'"],["",";\n"],["Statement","use if"],[""," ( "],["Operator","not"],[""," "],["Statement","our"],[""," "],["Identifier","$__mx_is_compiled"],[""," ), "],["String","metaclass"],[""," => "],["String","'Moose::Meta::Class'"],["",";\n\n"],["Keyword","sub "],["Function","new "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$real_class"],[""," = Scalar::Util::blessed("],["Identifier","$class"],["",") || "],["Identifier","$class"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$params"],[""," = "],["Identifier","$real_class"],["","->BUILDARGS("],["Identifier","@_"],["",");\n\n    "],["Statement","return"],[""," Class::MOP::Class->initialize("],["Identifier","$real_class"],["",")->new_object("],["Identifier","$params"],["",");\n}\n\n"],["Keyword","sub "],["Function","BUILDARGS "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Statement","shift"],["",";\n    "],["Conditional","if"],[""," ( "],["Statement","scalar"],[""," "],["Identifier","@_"],[""," == "],["Number","1"],[""," ) {\n        "],["Conditional","unless"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," && "],["Operator","ref"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," "],["Operator","eq"],[""," "],["String","'HASH'"],[""," ) {\n            Class::MOP::class_of("],["Identifier","$class"],["",")->throw_error(\n                "],["String","\"Single parameters to new() must be a HASH ref\""],["",",\n                "],["String","data"],[""," => "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," );\n        }\n        "],["Statement","return"],[""," { "],["Identifier","%{"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," "],["Identifier","}"],[""," };\n    }\n    "],["Conditional","elsif"],[""," ( "],["Identifier","@_"],[""," % "],["Number","2"],[""," ) {\n        Carp::carp(\n            "],["String","\"The new() method for "],["Identifier","$class"],["String"," expects a hash reference or a key/value list.\""],["","\n                . "],["String","\" You passed an odd number of arguments\""],[""," );\n        "],["Statement","return"],[""," { "],["Identifier","@_"],["",", "],["Operator","undef"],[""," };\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," {"],["Identifier","@_"],["","};\n    }\n}\n\n"],["Keyword","sub "],["Function","BUILDALL "],["","{\n    "],["Comment","# "],["Todo","NOTE:"],["Comment"," we ask Perl if we even"],["","\n    "],["Comment","# need to do this first, to avoid"],["","\n    "],["Comment","# extra meta level calls"],["","\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->can("],["String","'BUILD'"],["",");\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$params"],["",") = "],["Identifier","@_"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," ("],["Statement","reverse"],[""," Class::MOP::class_of("],["Identifier","$self"],["",")->find_all_methods_by_name("],["String","'BUILD'"],["",")) {\n        "],["Identifier","$method->{"],["String","code"],["Identifier","}"],["","->execute("],["Identifier","$self"],["",", "],["Identifier","$params"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","DEMOLISHALL "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$in_global_destruction"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Comment","# "],["Todo","NOTE:"],["Comment"," we ask Perl if we even"],["","\n    "],["Comment","# need to do this first, to avoid"],["","\n    "],["Comment","# extra meta level calls"],["","\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$self"],["","->can("],["String","'DEMOLISH'"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","@isa"],["",";\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::class_of("],["Identifier","$self"],[""," ) ) {\n        "],["Identifier","@isa"],[""," = "],["Identifier","$meta"],["","->linearized_isa;\n    } "],["Conditional","else"],[""," {\n        "],["Comment","# We cannot count on being able to retrieve a previously made"],["","\n        "],["Comment","# metaclass, _or_ being able to make a new one during global"],["","\n        "],["Comment","# destruction. However, we should still be able to use mro at"],["","\n        "],["Comment","# that time (at least tests suggest so ;)"],["","\n        "],["Statement","my"],[""," "],["Identifier","$class_name"],[""," = "],["Operator","ref"],[""," "],["Identifier","$self"],["",";\n        "],["Identifier","@isa"],[""," = "],["Identifier","@{"],[""," mro::get_linear_isa("],["Identifier","$class_name"],["",") "],["Identifier","}"],["","\n    }\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","@isa"],["",") {\n        "],["Statement","no strict"],[""," "],["String","'refs'"],["",";\n        "],["Statement","my"],[""," "],["Identifier","$demolish"],[""," = "],["Identifier","*{"],["String","\""],["Identifier","${class}"],["String","::DEMOLISH\""],["Identifier","}{"],["String","CODE"],["Identifier","}"],["",";\n        "],["Identifier","$self"],["","->"],["Identifier","$demolish"],["","("],["Identifier","$in_global_destruction"],["",")\n            "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$demolish"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","DESTROY "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","local"],[""," "],["Identifier","$?"],["",";\n\n    Try::Tiny::try {\n        "],["Identifier","$self"],["","->DEMOLISHALL(Devel::GlobalDestruction::in_global_destruction);\n    }\n    Try::Tiny::catch {\n        "],["Statement","die"],[""," "],["Identifier","$_"],["",";\n    };\n\n    "],["Statement","return"],["",";\n}\n\n"],["Comment","# support for UNIVERSAL::DOES ..."],["","\n"],["PreProc","BEGIN "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$does"],[""," = UNIVERSAL->can("],["String","\"DOES\""],["",") ? "],["String","\"SUPER::DOES\""],[""," : "],["String","\"isa\""],["",";\n    "],["Statement","eval"],[""," "],["String","'sub DOES {"],["","\n"],["String","        my ( $self, $class_or_role_name ) = @_;"],["","\n"],["String","        return $self->'"],["","."],["Identifier","$does"],["","."],["String","'($class_or_role_name)"],["","\n"],["String","            || $self->does($class_or_role_name);"],["","\n"],["String","    }'"],["",";\n}\n\n"],["Comment","# new does() methods will be created"],["","\n"],["Comment","# as appropriate see Moose::Meta::Role"],["","\n"],["Keyword","sub "],["Function","does "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$self"],["",", "],["Identifier","$role_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = Scalar::Util::blessed("],["Identifier","$self"],["",") || "],["Identifier","$self"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$class"],["",");\n    ("],["Operator","defined"],[""," "],["Identifier","$role_name"],["",")\n        || "],["Identifier","$meta"],["","->throw_error("],["String","\"You must supply a role name to does()\""],["",");\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->can("],["String","'does_role'"],["",") && "],["Identifier","$meta"],["","->does_role("],["Identifier","$role_name"],["",");\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","dump "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$self"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","require"],[""," Data::Dumper;\n    "],["Statement","local"],[""," "],["Identifier","$"],["Type","Data::Dumper::"],["Identifier","Maxdepth"],[""," = "],["Statement","shift"],[""," "],["Conditional","if"],[""," "],["Identifier","@_"],["",";\n    Data::Dumper::Dumper "],["Identifier","$self"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The base object for Moose"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Object - The base object for Moose\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis class is the default base class for all Moose-using classes. When\nyou "],["Identifier","C<use Moose>"],[""," in this class, your class will inherit from this\nclass.\n\nIt provides a default constructor and destructor, which run all of the\n"],["Identifier","C<BUILD>"],[""," and "],["Identifier","C<DEMOLISH>"],[""," methods in the inheritance hierarchy,\nrespectively.\n\nYou don't actually "],["Identifier","I<need>"],[""," to inherit from this in order to use Moose,\nbut it makes it easier to take advantage of all of Moose's features.\n\n"],["Statement","=head1"],[""," "],["String","METHODS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Object->new(%params|$params) >>"],["","\n\nThis method calls "],["Identifier","C<< $class->BUILDARGS(@_) >>"],["",", and then creates a new\ninstance of the appropriate class. Once the instance is created, it\ncalls "],["Identifier","C<< $instance->BUILD($params) >>"],[""," for each "],["Identifier","C<BUILD>"],[""," method in the\ninheritance hierarchy.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< Moose::Object->BUILDARGS(%params|$params) >>"],["","\n\nThe default implementation of this method accepts a hash or hash\nreference of named parameters. If it receives a single argument that\n"],["Identifier","I<isn't>"],[""," a hash reference it throws an error.\n\nYou can override this method in your class to handle other types of\noptions passed to the constructor.\n\nThis method should always return a hash reference of named options.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $object->does($role_name) >>"],["","\n\nThis returns true if the object does the given role.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $object->DOES($class_or_role_name) >>"],["","\n\nThis is a Moose role-aware implementation of "],["Identifier","L<UNIVERSAL/DOES>"],["",".\n\nThis is effectively the same as writing:\n\n"],["PreProc","  $object->does($name) || $object->isa($name)"],["","\n\nThis method will work with Perl 5.8, which did not implement\n"],["Identifier","C<UNIVERSAL::DOES>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $object->dump($maxdepth) >>"],["","\n\nThis is a handy utility for "],["Identifier","C<Data::Dumper>"],["","ing an object. By default,\nthe maximum depth is 1, to avoid making a mess.\n\n"],["Statement","=item"],[""," "],["Identifier","B<< $object->DESTROY >>"],["","\n\nA default destructor is provided, which calls\n"],["Identifier","C<< $instance->DEMOLISH($in_global_destruction) >>"],[""," for each "],["Identifier","C<DEMOLISH>"],["","\nmethod in the inheritance hierarchy.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]