[["Statement","package"],["Type"," Moose::Util::TypeConstraints::Builtins"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Util::TypeConstraints::Builtins::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Util::TypeConstraints::Builtins::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Class::Load "],["String","qw( is_class_loaded )"],["",";\n"],["Statement","use "],["","List::MoreUtils ();\n"],["Statement","use "],["","Scalar::Util "],["String","qw( blessed looks_like_number reftype )"],["",";\n\n"],["Keyword","sub "],["Function","type "],["","{ "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Util::TypeConstraints::"],["Identifier","type"],[""," }\n"],["Keyword","sub "],["Function","subtype "],["","{ "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Util::TypeConstraints::"],["Identifier","subtype"],[""," }\n"],["Keyword","sub "],["Function","as "],["","{ "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Util::TypeConstraints::"],["Identifier","as"],[""," }\n"],["Keyword","sub "],["Function","where "],["Type","(&)"],[""," { "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Util::TypeConstraints::"],["Identifier","where"],[""," }\n"],["Keyword","sub "],["Function","optimize_as "],["Type","(&)"],[""," { "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Util::TypeConstraints::"],["Identifier","optimize_as"],[""," }\n"],["Keyword","sub "],["Function","inline_as "],["Type","(&)"],[""," { "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Util::TypeConstraints::"],["Identifier","inline_as"],[""," }\n\n"],["Keyword","sub "],["Function","define_builtins "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$registry"],[""," = "],["Statement","shift"],["",";\n\n    type "],["String","'Any'"],["","    "],["Comment","# meta-type including all"],["","\n        => where {"],["Number","1"],["","}\n        => inline_as { "],["String","'1'"],[""," };\n\n    subtype "],["String","'Item'"],["","  "],["Comment","# base type"],["","\n        => as "],["String","'Any'"],["","\n        => inline_as { "],["String","'1'"],[""," };\n\n    subtype "],["String","'Undef'"],["","\n        => as "],["String","'Item'"],["","\n        => where { !"],["Operator","defined"],["","("],["Identifier","$_"],["",") }\n        => inline_as {\n            "],["String","'!defined('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],["","\n        };\n\n    subtype "],["String","'Defined'"],["","\n        => as "],["String","'Item'"],["","\n        => where { "],["Operator","defined"],["","("],["Identifier","$_"],["",") }\n        => inline_as {\n            "],["String","'defined('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],["","\n        };\n\n    subtype "],["String","'Bool'"],["","\n        => as "],["String","'Item'"],["","\n        => where { !"],["Operator","defined"],["","("],["Identifier","$_"],["",") || "],["Identifier","$_"],[""," "],["Operator","eq"],[""," "],["String","\"\""],[""," || "],["String","\""],["Identifier","$_"],["String","\""],[""," "],["Operator","eq"],[""," "],["String","'1'"],[""," || "],["String","\""],["Identifier","$_"],["String","\""],[""," "],["Operator","eq"],[""," "],["String","'0'"],[""," }\n        => inline_as {\n            "],["String","'('"],["","\n                . "],["String","'!defined('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') '"],["","\n                . "],["String","'|| '"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","' eq \"\" '"],["","\n                . "],["String","'|| ('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","'.\"\") eq \"1\" '"],["","\n                . "],["String","'|| ('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","'.\"\") eq \"0\"'"],["","\n            . "],["String","')'"],["","\n        };\n\n    subtype "],["String","'Value'"],["","\n        => as "],["String","'Defined'"],["","\n        => where { !"],["Operator","ref"],["","("],["Identifier","$_"],["",") }\n        => inline_as {\n            "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->parent()->_inline_check("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",")\n            . "],["String","' && !ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],["","\n        };\n\n    subtype "],["String","'Ref'"],["","\n        => as "],["String","'Defined'"],["","\n        => where { "],["Operator","ref"],["","("],["Identifier","$_"],["",") }\n            "],["Comment","# no need to call parent - ref also checks for definedness"],["","\n        => inline_as { "],["String","'ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],[""," };\n\n    subtype "],["String","'Str'"],["","\n        => as "],["String","'Value'"],["","\n        => where { "],["Operator","ref"],["","(\\"],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'SCALAR'"],[""," || "],["Operator","ref"],["","(\\("],["Statement","my"],[""," "],["Identifier","$val"],[""," = "],["Identifier","$_"],["",")) "],["Operator","eq"],[""," "],["String","'SCALAR'"],[""," }\n        => inline_as {\n            "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->parent()->_inline_check("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",")\n            . "],["String","' && ('"],["","\n                . "],["String","'ref("],["Special","\\\\"],["String","'"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"SCALAR\"'"],["","\n                . "],["String","' || ref("],["Special","\\\\"],["String","(my $val = '"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')) eq \"SCALAR\"'"],["","\n            . "],["String","')'"],["","\n        };\n\n    "],["Statement","my"],[""," "],["Identifier","$value_type"],[""," = Moose::Util::TypeConstraints::find_type_constraint("],["String","'Value'"],["",");\n    subtype "],["String","'Num'"],["","\n        => as "],["String","'Str'"],["","\n        => where {\n        "],["Statement","my"],[""," "],["Identifier","$val"],[""," = "],["Identifier","$_"],["",";\n        ("],["Identifier","$val"],[""," =~ "],["Statement","/"],["Special","\\A[+-]?[0-9]+\\z"],["Statement","/"],["",") ||\n        ( "],["Identifier","$val"],[""," =~ "],["Statement","/"],["Special","\\A(?:[+-]?)"],["String","                #matches optional "],["Special","+"],["String","- in the beginning"],["","\n"],["String","        "],["Special","(?=[0-9]"],["String","|"],["Special","\\.[0-9])"],["String","                     #matches previous "],["Special","+"],["String","- only if there is something like 3 or "],["Special","."],["String","3"],["","\n"],["String","        "],["Special","[0-9]*"],["String","                                #matches 0-9 zero or more times"],["","\n"],["String","        "],["Special","(?:\\.[0-9]+)?"],["String","                         #matches optional "],["Special","."],["String","89 or nothing"],["","\n"],["String","            "],["Special","(?:[Ee](?:[+-]?[0-9]+))?"],["String","              #matches E1 or e1 or e-1 or e"],["Special","+"],["String","1 etc"],["","\n"],["String","        "],["Special","\\z"],["Statement","/x"],[""," );\n           }\n        => inline_as {\n            "],["Comment","# the long Str tests are redundant here"],["","\n        "],["Comment","#storing $_[1] in a temporary value,"],["","\n        "],["Comment","#so that $_[1] won't get converted to a string for regex match"],["","\n        "],["Comment","#see t/attributes/numeric_defaults.t for more details"],["","\n        "],["String","'my $val = '"],["","."],["Identifier","$_["],["Number","1"],["Identifier","]"],["","."],["String","';'"],["",".\n        "],["Identifier","$value_type"],["","->_inline_check("],["String","'$val'"],["",")\n        ."],["String","' && ( $val =~ /\\A[+-]?[0-9]+\\z/ || '"],["","\n        . "],["String","'$val =~ /\\A(?:[+-]?)               #matches optional +- in the beginning"],["","\n"],["String","                (?=[0-9]|\\.[0-9])                 #matches previous +- only if there is something like 3 or .3"],["","\n"],["String","                [0-9]*                            #matches 0-9 zero or more times"],["","\n"],["String","                (?:\\.[0-9]+)?                     #matches optional .89 or nothing"],["","\n"],["String","                (?:[Ee](?:[+-]?[0-9]+))?          #matches E1 or e1 or e-1 or e+1 etc"],["","\n"],["String","                \\z/x ); '"],["","\n        };\n\n    subtype "],["String","'Int'"],["","\n        => as "],["String","'Num'"],["","\n        => where { ("],["Statement","my"],[""," "],["Identifier","$val"],[""," = "],["Identifier","$_"],["",") =~ "],["Statement","/"],["Special","\\A"],["String","-"],["Special","?[0-9]+\\z"],["Statement","/"],[""," }\n        => inline_as {\n            "],["Identifier","$value_type"],["","->_inline_check("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",")\n            . "],["String","' && (my $val = '"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') =~ /\\A-?[0-9]+\\z/'"],["","\n        };\n\n    subtype "],["String","'CodeRef'"],["","\n        => as "],["String","'Ref'"],["","\n        => where { "],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'CODE'"],[""," }\n        => inline_as { "],["String","'ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"CODE\"'"],[""," };\n\n    subtype "],["String","'RegexpRef'"],["","\n        => as "],["String","'Ref'"],["","\n        => where( \\"],["Identifier","&_RegexpRef"],[""," )\n        => inline_as {\n            "],["String","'Moose::Util::TypeConstraints::Builtins::_RegexpRef('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],["","\n        };\n\n    subtype "],["String","'GlobRef'"],["","\n        => as "],["String","'Ref'"],["","\n        => where { "],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'GLOB'"],[""," }\n        => inline_as { "],["String","'ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"GLOB\"'"],[""," };\n\n    "],["Comment","# "],["Todo","NOTE:"],["Comment"," scalar filehandles are GLOB refs, but a GLOB ref is not always a"],["","\n    "],["Comment","# filehandle"],["","\n    subtype "],["String","'FileHandle'"],["","\n        => as "],["String","'Ref'"],["","\n        => where {\n            ("],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","\"GLOB\""],[""," && Scalar::Util::openhandle("],["Identifier","$_"],["","))\n         || (blessed("],["Identifier","$_"],["",") && "],["Identifier","$_"],["","->isa("],["String","\"IO::Handle\""],["","));\n        }\n        => inline_as {\n            "],["String","'(ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"GLOB\" '"],["","\n            . "],["String","'&& Scalar::Util::openhandle('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')) '"],["","\n            . "],["String","'|| (Scalar::Util::blessed('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') '"],["","\n            . "],["String","'&& '"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","'->isa(\"IO::Handle\"))'"],["","\n        };\n\n    subtype "],["String","'Object'"],["","\n        => as "],["String","'Ref'"],["","\n        => where { blessed("],["Identifier","$_"],["",") }\n        => inline_as { "],["String","'Scalar::Util::blessed('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],[""," };\n\n    subtype "],["String","'ClassName'"],["","\n        => as "],["String","'Str'"],["","\n        => where { is_class_loaded("],["Identifier","$_"],["",") }\n            "],["Comment","# the long Str tests are redundant here"],["","\n        => inline_as { "],["String","'Class::Load::is_class_loaded('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","')'"],[""," };\n\n    subtype "],["String","'RoleName'"],["","\n        => as "],["String","'ClassName'"],["","\n        => where {\n            (Class::MOP::class_of("],["Identifier","$_"],["",") || "],["Statement","return"],["",")->isa("],["String","'Moose::Meta::Role'"],["",");\n        }\n        => inline_as {\n            "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->parent()->_inline_check("],["Identifier","$_["],["Number","1"],["Identifier","]"],["",")\n            . "],["String","' && do {'"],["","\n                . "],["String","'my $meta = Class::MOP::class_of('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","');'"],["","\n                . "],["String","'$meta && $meta->isa(\"Moose::Meta::Role\");'"],["","\n            . "],["String","'}'"],["","\n        };\n\n    "],["Identifier","$registry"],["","->add_type_constraint(\n        Moose::Meta::TypeConstraint::Parameterizable->new(\n            "],["String","name"],["","               => "],["String","'ScalarRef'"],["",",\n            "],["String","package_defined_in"],[""," => __PACKAGE__,\n            "],["String","parent"],[""," =>\n                Moose::Util::TypeConstraints::find_type_constraint("],["String","'Ref'"],["","),\n            "],["String","constraint"],[""," => "],["Keyword","sub "],["","{ "],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'SCALAR'"],[""," || "],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'REF'"],[""," },\n            "],["String","constraint_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$check"],[""," = "],["Identifier","$type_parameter"],["","->_compiled_type_constraint;\n                "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n                    "],["Statement","return"],[""," "],["Identifier","$check"],["","->( "],["Identifier","${$_}"],[""," );\n                };\n            },\n            "],["String","inlined"],[""," => "],["Keyword","sub "],["","{\n                "],["String","'ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"SCALAR\" '"],["","\n                  . "],["String","'|| ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"REF\"'"],["","\n            },\n            "],["String","inline_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$self"],["","           = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$val"],["","            = "],["Statement","shift"],["",";\n                "],["String","'(ref('"],[""," . "],["Identifier","$val"],[""," . "],["String","') eq \"SCALAR\" || ref('"],[""," . "],["Identifier","$val"],[""," . "],["String","') eq \"REF\") '"],["","\n                  . "],["String","'&& '"],[""," . "],["Identifier","$type_parameter"],["","->_inline_check("],["String","'${('"],[""," . "],["Identifier","$val"],[""," . "],["String","')}'"],["",")\n            },\n        )\n    );\n\n    "],["Identifier","$registry"],["","->add_type_constraint(\n        Moose::Meta::TypeConstraint::Parameterizable->new(\n            "],["String","name"],["","               => "],["String","'ArrayRef'"],["",",\n            "],["String","package_defined_in"],[""," => __PACKAGE__,\n            "],["String","parent"],[""," =>\n                Moose::Util::TypeConstraints::find_type_constraint("],["String","'Ref'"],["","),\n            "],["String","constraint"],[""," => "],["Keyword","sub "],["","{ "],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'ARRAY'"],[""," },\n            "],["String","constraint_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$check"],[""," = "],["Identifier","$type_parameter"],["","->_compiled_type_constraint;\n                "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n                    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$x"],[""," ("],["Identifier","@$_"],["",") {\n                        ( "],["Identifier","$check"],["","->("],["Identifier","$x"],["",") ) || "],["Statement","return"],["",";\n                    }\n                    "],["Number","1"],["",";\n                    }\n            },\n            "],["String","inlined"],["","          => "],["Keyword","sub "],["","{ "],["String","'ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"ARRAY\"'"],[""," },\n            "],["String","inline_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$self"],["","           = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$val"],["","            = "],["Statement","shift"],["",";\n\n                "],["String","'do {'"],["","\n                    . "],["String","'my $check = '"],[""," . "],["Identifier","$val"],[""," . "],["String","';'"],["","\n                    . "],["String","'ref($check) eq \"ARRAY\" '"],["","\n                        . "],["String","'&& &List::MoreUtils::all('"],["","\n                            . "],["String","'sub { '"],[""," . "],["Identifier","$type_parameter"],["","->_inline_check("],["String","'$_'"],["",") . "],["String","' }, '"],["","\n                            . "],["String","'@{$check}'"],["","\n                        . "],["String","')'"],["","\n                . "],["String","'}'"],["",";\n            },\n        )\n    );\n\n    "],["Identifier","$registry"],["","->add_type_constraint(\n        Moose::Meta::TypeConstraint::Parameterizable->new(\n            "],["String","name"],["","               => "],["String","'HashRef'"],["",",\n            "],["String","package_defined_in"],[""," => __PACKAGE__,\n            "],["String","parent"],[""," =>\n                Moose::Util::TypeConstraints::find_type_constraint("],["String","'Ref'"],["","),\n            "],["String","constraint"],[""," => "],["Keyword","sub "],["","{ "],["Operator","ref"],["","("],["Identifier","$_"],["",") "],["Operator","eq"],[""," "],["String","'HASH'"],[""," },\n            "],["String","constraint_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$check"],[""," = "],["Identifier","$type_parameter"],["","->_compiled_type_constraint;\n                "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n                    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$x"],[""," ( "],["Statement","values"],[""," "],["Identifier","%$_"],[""," ) {\n                        ( "],["Identifier","$check"],["","->("],["Identifier","$x"],["",") ) || "],["Statement","return"],["",";\n                    }\n                    "],["Number","1"],["",";\n                    }\n            },\n            "],["String","inlined"],["","          => "],["Keyword","sub "],["","{ "],["String","'ref('"],[""," . "],["Identifier","$_["],["Number","1"],["Identifier","]"],[""," . "],["String","') eq \"HASH\"'"],[""," },\n            "],["String","inline_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$self"],["","           = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$val"],["","            = "],["Statement","shift"],["",";\n\n                "],["String","'do {'"],["","\n                    . "],["String","'my $check = '"],[""," . "],["Identifier","$val"],[""," . "],["String","';'"],["","\n                    . "],["String","'ref($check) eq \"HASH\" '"],["","\n                        . "],["String","'&& &List::MoreUtils::all('"],["","\n                            . "],["String","'sub { '"],[""," . "],["Identifier","$type_parameter"],["","->_inline_check("],["String","'$_'"],["",") . "],["String","' }, '"],["","\n                            . "],["String","'values %{$check}'"],["","\n                        . "],["String","')'"],["","\n                . "],["String","'}'"],["",";\n            },\n        )\n    );\n\n    "],["Identifier","$registry"],["","->add_type_constraint(\n        Moose::Meta::TypeConstraint::Parameterizable->new(\n            "],["String","name"],["","               => "],["String","'Maybe'"],["",",\n            "],["String","package_defined_in"],[""," => __PACKAGE__,\n            "],["String","parent"],[""," =>\n                Moose::Util::TypeConstraints::find_type_constraint("],["String","'Item'"],["","),\n            "],["String","constraint"],["","           => "],["Keyword","sub "],["","{"],["Number","1"],["","},\n            "],["String","constraint_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$check"],[""," = "],["Identifier","$type_parameter"],["","->_compiled_type_constraint;\n                "],["Statement","return"],[""," "],["Keyword","sub "],["","{\n                    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Operator","not"],["","( "],["Operator","defined"],["","("],["Identifier","$_"],["",") ) || "],["Identifier","$check"],["","->("],["Identifier","$_"],["",");\n                    "],["Statement","return"],["",";\n                    }\n            },\n            "],["String","inlined"],["","          => "],["Keyword","sub "],["","{"],["String","'1'"],["","},\n            "],["String","inline_generator"],[""," => "],["Keyword","sub "],["","{\n                "],["Statement","my"],[""," "],["Identifier","$self"],["","           = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$type_parameter"],[""," = "],["Statement","shift"],["",";\n                "],["Statement","my"],[""," "],["Identifier","$val"],["","            = "],["Statement","shift"],["",";\n                "],["String","'!defined('"],[""," . "],["Identifier","$val"],[""," . "],["String","') '"],["","\n                  . "],["String","'|| ('"],[""," . "],["Identifier","$type_parameter"],["","->_inline_check("],["Identifier","$val"],["",") . "],["String","')'"],["","\n            },\n        )\n    );\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=for"],[""," "],["Identifier","pod_coverage_needs_some_pod"],["","\n\n"],["Statement","=cut"],["","\n\n"]]