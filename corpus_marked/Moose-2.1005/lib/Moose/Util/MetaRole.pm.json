[["Statement","package"],["Type"," Moose::Util::MetaRole"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Util::MetaRole::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Util::MetaRole::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n\n"],["Statement","use "],["","Carp "],["String","qw( croak )"],["",";\n"],["Statement","use "],["","List::MoreUtils "],["String","qw( all )"],["",";\n"],["Statement","use "],["","List::Util "],["String","qw( first )"],["",";\n"],["Statement","use "],["","Moose::Deprecated;\n"],["Statement","use "],["","Scalar::Util "],["String","qw( blessed )"],["",";\n\n"],["Keyword","sub "],["Function","apply_metaroles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$for"],[""," = _metathing_for( "],["Identifier","$args{"],["String","for"],["Identifier","}"],[""," );\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$for"],["","->isa("],["String","'Moose::Meta::Role'"],["",") ) {\n        "],["Statement","return"],[""," _make_new_metaclass( "],["Identifier","$for"],["",", "],["Identifier","$args{"],["String","role_metaroles"],["Identifier","}"],["",", "],["String","'role'"],[""," );\n    }\n    "],["Conditional","else"],[""," {\n        "],["Statement","return"],[""," _make_new_metaclass( "],["Identifier","$for"],["",", "],["Identifier","$args{"],["String","class_metaroles"],["Identifier","}"],["",", "],["String","'class'"],[""," );\n    }\n}\n\n"],["Keyword","sub "],["Function","_metathing_for "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$passed"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$found"],["","\n        = blessed "],["Identifier","$passed"],["","\n        ? "],["Identifier","$passed"],["","\n        : Class::MOP::class_of("],["Identifier","$passed"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$found"],["","\n        "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$found"],["","\n            && blessed "],["Identifier","$found"],["","\n            && (   "],["Identifier","$found"],["","->isa("],["String","'Moose::Meta::Role'"],["",")\n                || "],["Identifier","$found"],["","->isa("],["String","'Moose::Meta::Class'"],["",") );\n\n    "],["Statement","local"],[""," "],["Identifier","$"],["Type","Carp::"],["Identifier","CarpLevel"],[""," = "],["Identifier","$"],["Type","Carp::"],["Identifier","CarpLevel"],[""," + "],["Number","1"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$error_start"],["","\n        = "],["String","'When using Moose::Util::MetaRole, you must pass a Moose class name,'"],["","\n        . "],["String","' role name, metaclass object, or metarole object.'"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$found"],[""," && blessed "],["Identifier","$found"],[""," ) {\n        croak "],["Identifier","$error_start"],["","\n            . "],["String","\" You passed "],["Identifier","$passed"],["String",", and we resolved this to a \""],["","\n            . ( blessed "],["Identifier","$found"],[""," )\n            . "],["String","' object.'"],["",";\n    }\n\n    "],["Conditional","if"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$passed"],[""," && !"],["Operator","defined"],[""," "],["Identifier","$found"],[""," ) {\n        croak "],["Identifier","$error_start"],["","\n            . "],["String","\" You passed "],["Identifier","$passed"],["String",", and this did not resolve to a metaclass or metarole.\""],["","\n            . "],["String","' Maybe you need to call Moose->init_meta to initialize the metaclass first?'"],["",";\n    }\n\n    "],["Conditional","if"],[""," ( !"],["Operator","defined"],[""," "],["Identifier","$passed"],[""," ) {\n        croak "],["Identifier","$error_start"],["","\n            . "],["String","\" You passed an undef.\""],["","\n            . "],["String","' Maybe you need to call Moose->init_meta to initialize the metaclass first?'"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","_make_new_metaclass "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$for"],["","     = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$roles"],["","   = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$primary"],[""," = "],["Statement","shift"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$for"],[""," "],["Conditional","unless"],[""," "],["Statement","keys"],[""," "],["Identifier","%{$roles}"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$new_metaclass"],["","\n        = "],["Statement","exists"],[""," "],["Identifier","$roles->{$primary}"],["","\n        ? _make_new_class( "],["Operator","ref"],[""," "],["Identifier","$for"],["",", "],["Identifier","$roles->{$primary}"],[""," )\n        : blessed "],["Identifier","$for"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%classes"],["",";\n\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$key"],[""," ( "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," "],["Operator","ne"],[""," "],["Identifier","$primary"],[""," "],["Statement","}"],[""," "],["Statement","keys"],[""," "],["Identifier","%{$roles}"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","$attr"],[""," = first {"],["Identifier","$_"],["","}\n            "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$for"],["","->meta->find_attribute_by_name("],["Identifier","$_"],["",") "],["Statement","}"],[""," (\n            "],["Identifier","$key"],[""," . "],["String","'_metaclass'"],["",",\n            "],["Identifier","$key"],[""," . "],["String","'_class'"],["","\n        );\n\n        "],["Statement","my"],[""," "],["Identifier","$reader"],[""," = "],["Identifier","$attr"],["","->get_read_method;\n\n        "],["Identifier","$classes{"],[""," "],["Identifier","$attr"],["","->init_arg "],["Identifier","}"],["","\n            = _make_new_class( "],["Identifier","$for"],["","->"],["Identifier","$reader"],["","(), "],["Identifier","$roles->{$key}"],[""," );\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$new_meta"],[""," = "],["Identifier","$new_metaclass"],["","->reinitialize( "],["Identifier","$for"],["",", "],["Identifier","%classes"],[""," );\n\n    "],["Statement","return"],[""," "],["Identifier","$new_meta"],["",";\n}\n\n"],["Keyword","sub "],["Function","apply_base_class_roles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = _metathing_for( "],["Identifier","$args{"],["String","for"],["Identifier","}"],[""," || "],["Identifier","$args{"],["String","for_class"],["Identifier","}"],[""," );\n    croak "],["String","'You can only apply base class roles to a Moose class, not a role.'"],["","\n        "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$new_base"],[""," = _make_new_class(\n        "],["Identifier","$meta"],["","->name,\n        "],["Identifier","$args{"],["String","roles"],["Identifier","}"],["",",\n        [ "],["Identifier","$meta"],["","->superclasses() ],\n    );\n\n    "],["Identifier","$meta"],["","->superclasses("],["Identifier","$new_base"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","$new_base"],[""," "],["Operator","ne"],[""," "],["Identifier","$meta"],["","->name();\n}\n\n"],["Keyword","sub "],["Function","_make_new_class "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$existing_class"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$roles"],["","          = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$superclasses"],["","   = "],["Statement","shift"],[""," || ["],["Identifier","$existing_class"],["","];\n\n    "],["Statement","return"],[""," "],["Identifier","$existing_class"],[""," "],["Conditional","unless"],[""," "],["Identifier","$roles"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$existing_class"],["",");\n\n    "],["Statement","return"],[""," "],["Identifier","$existing_class"],["","\n        "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->can("],["String","'does_role'"],["",") && all  { "],["Identifier","$meta"],["","->does_role("],["Identifier","$_"],["",") }\n                                      "],["Statement","grep"],[""," "],["Statement","{"],[""," !"],["Operator","ref"],[""," "],["Identifier","$_"],[""," "],["Statement","}"],[""," "],["Identifier","@{$roles}"],["",";\n\n    "],["Statement","return"],[""," Moose::Meta::Class->create_anon_class(\n        "],["String","superclasses"],[""," => "],["Identifier","$superclasses"],["",",\n        "],["String","roles"],["","        => "],["Identifier","$roles"],["",",\n        "],["String","cache"],["","        => "],["Number","1"],["",",\n    )->name();\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Apply roles to any metaclass, as well as the object base class"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Util::MetaRole - Apply roles to any metaclass, as well as the object base class\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  package MyApp::Moose;"],["","\n\n"],["PreProc","  use Moose ();"],["","\n"],["PreProc","  use Moose::Exporter;"],["","\n"],["PreProc","  use Moose::Util::MetaRole;"],["","\n\n"],["PreProc","  use MyApp::Role::Meta::Class;"],["","\n"],["PreProc","  use MyApp::Role::Meta::Method::Constructor;"],["","\n"],["PreProc","  use MyApp::Role::Object;"],["","\n\n"],["PreProc","  Moose::Exporter->setup_import_methods( also => 'Moose' );"],["","\n\n"],["PreProc","  sub init_meta {"],["","\n"],["PreProc","      shift;"],["","\n"],["PreProc","      my %args = @_;"],["","\n\n"],["PreProc","      Moose->init_meta(%args);"],["","\n\n"],["PreProc","      Moose::Util::MetaRole::apply_metaroles("],["","\n"],["PreProc","          for             => $args{for_class},"],["","\n"],["PreProc","          class_metaroles => {"],["","\n"],["PreProc","              class => => ['MyApp::Role::Meta::Class'],"],["","\n"],["PreProc","              constructor => ['MyApp::Role::Meta::Method::Constructor'],"],["","\n"],["PreProc","          },"],["","\n"],["PreProc","      );"],["","\n\n"],["PreProc","      Moose::Util::MetaRole::apply_base_class_roles("],["","\n"],["PreProc","          for   => $args{for_class},"],["","\n"],["PreProc","          roles => ['MyApp::Role::Object'],"],["","\n"],["PreProc","      );"],["","\n\n"],["PreProc","      return $args{for_class}->meta();"],["","\n"],["PreProc","  }"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis utility module is designed to help authors of Moose extensions\nwrite extensions that are able to cooperate with other Moose\nextensions. To do this, you must write your extensions as roles, which\ncan then be dynamically applied to the caller's metaclasses.\n\nThis module makes sure to preserve any existing superclasses and roles\nalready set for the meta objects, which means that any number of\nextensions can apply roles in any order.\n\n"],["Statement","=head1"],[""," "],["String","USAGE"],["","\n\nThe easiest way to use this module is through "],["Identifier","L<Moose::Exporter>"],["",", which can\ngenerate the appropriate "],["Identifier","C<init_meta>"],[""," method for you, and make sure it is\ncalled when imported.\n\n"],["Statement","=head1"],[""," "],["String","FUNCTIONS"],["","\n\nThis module provides two functions.\n\n"],["Statement","=head2"],[""," "],["String","apply_metaroles( ... )"],["","\n\nThis function will apply roles to one or more metaclasses for the specified\nclass. It will return a new metaclass object for the class or role passed in\nthe \"for\" parameter.\n\nIt accepts the following parameters:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* for => $name"],["","\n\nThis specifies the class or for which to alter the meta classes. This can be a\npackage name, or an appropriate meta-object (a "],["Identifier","L<Moose::Meta::Class>"],[""," or\n"],["Identifier","L<Moose::Meta::Role>"],["",").\n\n"],["Statement","=item"],[""," "],["String","* class_metaroles => \\%roles"],["","\n\nThis is a hash reference specifying which metaroles will be applied to the\nclass metaclass and its contained metaclasses and helper classes.\n\nEach key should in turn point to an array reference of role names.\n\nIt accepts the following keys:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","class"],["","\n\n"],["Statement","=item"],[""," "],["String","attribute"],["","\n\n"],["Statement","=item"],[""," "],["String","method"],["","\n\n"],["Statement","=item"],[""," "],["String","wrapped_method"],["","\n\n"],["Statement","=item"],[""," "],["String","instance"],["","\n\n"],["Statement","=item"],[""," "],["String","constructor"],["","\n\n"],["Statement","=item"],[""," "],["String","destructor"],["","\n\n"],["Statement","=item"],[""," "],["String","error"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["String","* role_metaroles => \\%roles"],["","\n\nThis is a hash reference specifying which metaroles will be applied to the\nrole metaclass and its contained metaclasses and helper classes.\n\nIt accepts the following keys:\n\n"],["Statement","=over"],[""," "],["Number","8"],["","\n\n"],["Statement","=item"],[""," "],["String","role"],["","\n\n"],["Statement","=item"],[""," "],["String","attribute"],["","\n\n"],["Statement","=item"],[""," "],["String","method"],["","\n\n"],["Statement","=item"],[""," "],["String","required_method"],["","\n\n"],["Statement","=item"],[""," "],["String","conflicting_method"],["","\n\n"],["Statement","=item"],[""," "],["String","application_to_class"],["","\n\n"],["Statement","=item"],[""," "],["String","application_to_role"],["","\n\n"],["Statement","=item"],[""," "],["String","application_to_instance"],["","\n\n"],["Statement","=item"],[""," "],["String","application_role_summation"],["","\n\n"],["Statement","=item"],[""," "],["String","applied_attribute"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","apply_base_class_roles( for => $class, roles => \\@roles )"],["","\n\nThis function will apply the specified roles to the object's base class.\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]