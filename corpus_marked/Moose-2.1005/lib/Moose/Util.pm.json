[["Statement","package"],["Type"," Moose::Util"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Util::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Util::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Class::Load "],["Float","0.07"],[""," "],["String","qw(load_class load_first_existing_class)"],["",";\n"],["Statement","use "],["","Data::OptList;\n"],["Statement","use "],["","Params::Util "],["String","qw( _STRING )"],["",";\n"],["Statement","use "],["","Sub::Exporter;\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","List::Util "],["String","qw(first)"],["",";\n"],["Statement","use "],["","List::MoreUtils "],["String","qw(any all)"],["",";\n"],["Statement","use overload"],[""," ();\n"],["Statement","use "],["","Try::Tiny;\n"],["Statement","use "],["","Class::MOP;\n\n"],["Statement","my"],[""," "],["Identifier","@exports"],[""," = "],["String","qw["],["","\n"],["String","    find_meta"],["","\n"],["String","    does_role"],["","\n"],["String","    search_class_by_role"],["","\n"],["String","    ensure_all_roles"],["","\n"],["String","    apply_all_roles"],["","\n"],["String","    with_traits"],["","\n"],["String","    get_all_init_args"],["","\n"],["String","    get_all_attribute_values"],["","\n"],["String","    resolve_metatrait_alias"],["","\n"],["String","    resolve_metaclass_alias"],["","\n"],["String","    add_method_modifier"],["","\n"],["String","    english_list"],["","\n"],["String","    meta_attribute_alias"],["","\n"],["String","    meta_class_alias"],["","\n"],["String","]"],["",";\n\nSub::Exporter::setup_exporter({\n    "],["String","exports"],[""," => \\"],["Identifier","@exports"],["",",\n    "],["String","groups"],["","  => { "],["String","all"],[""," => \\"],["Identifier","@exports"],[""," }\n});\n\n"],["Comment","## some utils for the utils ..."],["","\n\n"],["Keyword","sub "],["Function","find_meta "],["","{ Class::MOP::class_of("],["Identifier","@_"],["",") }\n\n"],["Comment","## the functions ..."],["","\n\n"],["Keyword","sub "],["Function","does_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class_or_obj"],["",", "],["Identifier","$role"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Conditional","if"],[""," (try { "],["Identifier","$class_or_obj"],["","->isa("],["String","'Moose::Object'"],["",") }) {\n        "],["Statement","return"],[""," "],["Identifier","$class_or_obj"],["","->does("],["Identifier","$role"],["",");\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = find_meta("],["Identifier","$class_or_obj"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$meta"],["",";\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$meta"],["","->can("],["String","'does_role'"],["",");\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->does_role("],["Identifier","$role"],["",");\n    "],["Statement","return"],["",";\n}\n\n"],["Keyword","sub "],["Function","search_class_by_role "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class_or_obj"],["",", "],["Identifier","$role"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = find_meta("],["Identifier","$class_or_obj"],["",");\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$meta"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$role_name"],[""," = blessed "],["Identifier","$role"],[""," ? "],["Identifier","$role"],["","->name : "],["Identifier","$role"],["",";\n\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$class"],[""," ("],["Identifier","$meta"],["","->class_precedence_list) {\n\n        "],["Statement","my"],[""," "],["Identifier","$_meta"],[""," = find_meta("],["Identifier","$class"],["",");\n\n        "],["Statement","next"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$_meta"],["",";\n\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ("],["Identifier","@{"],[""," "],["Identifier","$_meta"],["","->roles || [] "],["Identifier","}"],["",") {\n            "],["Statement","return"],[""," "],["Identifier","$class"],[""," "],["Conditional","if"],[""," "],["Identifier","$role"],["","->name "],["Operator","eq"],[""," "],["Identifier","$role_name"],["",";\n        }\n    }\n\n    "],["Statement","return"],["",";\n}\n\n"],["Comment","# this can possibly behave in unexpected ways because the roles being composed"],["","\n"],["Comment","# before being applied could differ from call to call; I'm not sure if or how"],["","\n"],["Comment","# to document this possible quirk."],["","\n"],["Keyword","sub "],["Function","ensure_all_roles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$applicant"],[""," = "],["Statement","shift"],["",";\n    _apply_all_roles("],["Identifier","$applicant"],["",", "],["Keyword","sub "],["","{ !does_role("],["Identifier","$applicant"],["",", "],["Identifier","$_"],["",") }, "],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","apply_all_roles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$applicant"],[""," = "],["Statement","shift"],["",";\n    _apply_all_roles("],["Identifier","$applicant"],["",", "],["Operator","undef"],["",", "],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","_apply_all_roles "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$applicant"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$role_filter"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","unless"],[""," ("],["Identifier","@_"],["",") {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"Must specify at least one role to apply to "],["Identifier","$applicant"],["String","\""],["",");\n    }\n\n    "],["Comment","# If @_ contains role meta objects, mkopt will think that they're values,"],["","\n    "],["Comment","# because they're references.  In other words (roleobj1, roleobj2,"],["","\n    "],["Comment","# roleobj3) will become [ [ roleobj1, roleobj2 ], [ roleobj3, undef ] ]"],["","\n    "],["Comment","# -- this is no good.  We'll preprocess @_ first to eliminate the potential"],["","\n    "],["Comment","# bug."],["","\n    "],["Comment","# -- rjbs, 2011-04-08"],["","\n    "],["Statement","my"],[""," "],["Identifier","$roles"],[""," = Data::OptList::mkopt( ["],["Identifier","@_"],["","], {\n      "],["String","moniker"],["","   => "],["String","'role'"],["",",\n      "],["String","name_test"],[""," => "],["Keyword","sub "],["","{\n        ! "],["Operator","ref"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," "],["Operator","or"],[""," blessed("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") && "],["Identifier","$_["],["Number","0"],["Identifier","]"],["","->isa("],["String","'Moose::Meta::Role'"],["",")\n      }\n    });\n\n    "],["Statement","my"],[""," "],["Identifier","@role_metas"],["",";\n    "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$role"],[""," ("],["Identifier","@$roles"],["",") {\n        "],["Statement","my"],[""," "],["Identifier","$meta"],["",";\n\n        "],["Conditional","if"],[""," ( blessed "],["Identifier","$role->["],["Number","0"],["Identifier","]"],[""," ) {\n            "],["Identifier","$meta"],[""," = "],["Identifier","$role->["],["Number","0"],["Identifier","]"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            load_class( "],["Identifier","$role->["],["Number","0"],["Identifier","]"],[""," , "],["Identifier","$role->["],["Number","1"],["Identifier","]"],[""," );\n            "],["Identifier","$meta"],[""," = find_meta( "],["Identifier","$role->["],["Number","0"],["Identifier","]"],[""," );\n        }\n\n        "],["Conditional","unless"],[""," ("],["Identifier","$meta"],[""," && "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",") ) {\n            "],["Statement","require"],[""," Moose;\n            Moose->throw_error( "],["String","\"You can only consume roles, \""],["","\n                    . "],["Identifier","$role->["],["Number","0"],["Identifier","]"],["","\n                    . "],["String","\" is not a Moose role\""],[""," );\n        }\n\n        "],["Statement","push"],[""," "],["Identifier","@role_metas"],["",", [ "],["Identifier","$meta"],["",", "],["Identifier","$role->["],["Number","1"],["Identifier","]"],[""," ];\n    }\n\n    "],["Conditional","if"],[""," ( "],["Operator","defined"],[""," "],["Identifier","$role_filter"],[""," ) {\n        "],["Identifier","@role_metas"],[""," = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Statement","local"],[""," "],["Identifier","$_"],[""," = "],["Identifier","$_->["],["Number","0"],["Identifier","]"],["","; "],["Identifier","$role_filter"],["","->() "],["Statement","}"],[""," "],["Identifier","@role_metas"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@role_metas"],["",";\n\n    load_class("],["Identifier","$applicant"],["",")\n        "],["Conditional","unless"],[""," blessed("],["Identifier","$applicant"],["",")\n            || Class::MOP::class_of("],["Identifier","$applicant"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = ( blessed "],["Identifier","$applicant"],[""," ? "],["Identifier","$applicant"],[""," : Moose::Meta::Class->initialize("],["Identifier","$applicant"],["",") );\n\n    "],["Conditional","if"],[""," ( "],["Statement","scalar"],[""," "],["Identifier","@role_metas"],[""," == "],["Number","1"],[""," ) {\n        "],["Statement","my"],[""," ( "],["Identifier","$role"],["",", "],["Identifier","$params"],[""," ) = "],["Identifier","@{"],[""," "],["Identifier","$role_metas["],["Number","0"],["Identifier","]"],[""," "],["Identifier","}"],["",";\n        "],["Identifier","$role"],["","->apply( "],["Identifier","$meta"],["",", ( "],["Operator","defined"],[""," "],["Identifier","$params"],[""," ? "],["Identifier","%$params"],[""," : () ) );\n    }\n    "],["Conditional","else"],[""," {\n        Moose::Meta::Role->combine("],["Identifier","@role_metas"],["",")->apply("],["Identifier","$meta"],["",");\n    }\n}\n\n"],["Keyword","sub "],["Function","with_traits "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","@roles"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Identifier","$class"],[""," "],["Conditional","unless"],[""," "],["Identifier","@roles"],["",";\n    "],["Statement","return"],[""," Moose::Meta::Class->create_anon_class(\n        "],["String","superclasses"],[""," => ["],["Identifier","$class"],["","],\n        "],["String","roles"],["","        => \\"],["Identifier","@roles"],["",",\n        "],["String","cache"],["","        => "],["Number","1"],["",",\n    )->name;\n}\n\n"],["Comment","# instance deconstruction ..."],["","\n\n"],["Keyword","sub "],["Function","get_all_attribute_values "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," +{\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->"],["String","name"],[""," => "],["Identifier","$_"],["","->get_value("],["Identifier","$instance"],["",") "],["Statement","}"],["","\n            "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->has_value("],["Identifier","$instance"],["",") "],["Statement","}"],["","\n                "],["Identifier","$class"],["","->get_all_attributes\n    };\n}\n\n"],["Keyword","sub "],["Function","get_all_init_args "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class"],["",", "],["Identifier","$instance"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," +{\n        "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->"],["String","init_arg"],[""," => "],["Identifier","$_"],["","->get_value("],["Identifier","$instance"],["",") "],["Statement","}"],["","\n            "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->has_value("],["Identifier","$instance"],["",") "],["Statement","}"],["","\n                "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Operator","defined"],["","("],["Identifier","$_"],["","->init_arg) "],["Statement","}"],["","\n                    "],["Identifier","$class"],["","->get_all_attributes\n    };\n}\n\n"],["Keyword","sub "],["Function","resolve_metatrait_alias "],["","{\n    "],["Statement","return"],[""," resolve_metaclass_alias( "],["Identifier","@_"],["",", "],["String","trait"],[""," => "],["Number","1"],[""," );\n}\n\n"],["Keyword","sub "],["Function","_build_alias_package_name "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$type"],["",", "],["Identifier","$name"],["",", "],["Identifier","$trait"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["String","'Moose::Meta::'"],["","\n         . "],["Identifier","$type"],["","\n         . "],["String","'::Custom::'"],["","\n         . ( "],["Identifier","$trait"],[""," ? "],["String","'Trait::'"],[""," : "],["String","''"],[""," )\n         . "],["Identifier","$name"],["",";\n}\n\n{\n    "],["Statement","my"],[""," "],["Identifier","%cache"],["",";\n\n    "],["Keyword","sub "],["Function","resolve_metaclass_alias "],["","{\n        "],["Statement","my"],[""," ( "],["Identifier","$type"],["",", "],["Identifier","$metaclass_name"],["",", "],["Identifier","%options"],[""," ) = "],["Identifier","@_"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$cache_key"],[""," = "],["Identifier","$type"],[""," . "],["String","q{ }"],[""," . ( "],["Identifier","$options{"],["String","trait"],["Identifier","}"],[""," ? "],["String","'-Trait'"],[""," : "],["String","''"],[""," );\n        "],["Statement","return"],[""," "],["Identifier","$cache{$cache_key}{$metaclass_name}"],["","\n            "],["Conditional","if"],[""," "],["Identifier","$cache{$cache_key}{$metaclass_name}"],["",";\n\n        "],["Statement","my"],[""," "],["Identifier","$possible_full_name"],[""," = _build_alias_package_name(\n            "],["Identifier","$type"],["",", "],["Identifier","$metaclass_name"],["",", "],["Identifier","$options{"],["String","trait"],["Identifier","}"],["","\n        );\n\n        "],["Statement","my"],[""," "],["Identifier","$loaded_class"],[""," = load_first_existing_class(\n            "],["Identifier","$possible_full_name"],["",",\n            "],["Identifier","$metaclass_name"],["","\n        );\n\n        "],["Statement","return"],[""," "],["Identifier","$cache{$cache_key}{$metaclass_name}"],["","\n            = "],["Identifier","$loaded_class"],["","->can("],["String","'register_implementation'"],["",")\n            ? "],["Identifier","$loaded_class"],["","->register_implementation\n            : "],["Identifier","$loaded_class"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","add_method_modifier "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$class_or_obj"],["",", "],["Identifier","$modifier_name"],["",", "],["Identifier","$args"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],["","\n        = "],["Identifier","$class_or_obj"],["","->can("],["String","'add_before_method_modifier'"],["",")\n        ? "],["Identifier","$class_or_obj"],["","\n        : find_meta("],["Identifier","$class_or_obj"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$code"],["","                = "],["Statement","pop"],[""," "],["Identifier","@{$args}"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$add_modifier_method"],[""," = "],["String","'add_'"],[""," . "],["Identifier","$modifier_name"],[""," . "],["String","'_method_modifier'"],["",";\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$method_modifier_type"],[""," = "],["Operator","ref"],["","( "],["Identifier","@{$args}["],["Number","0"],["Identifier","]"],[""," ) ) {\n        "],["Conditional","if"],[""," ( "],["Identifier","$method_modifier_type"],[""," "],["Operator","eq"],[""," "],["String","'Regexp'"],[""," ) {\n            "],["Statement","my"],[""," "],["Identifier","@all_methods"],[""," = "],["Identifier","$meta"],["","->get_all_methods;\n            "],["Statement","my"],[""," "],["Identifier","@matched_methods"],["","\n                = "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name =~ "],["Identifier","@{$args}["],["Number","0"],["Identifier","]"],[""," "],["Statement","}"],[""," "],["Identifier","@all_methods"],["",";\n            "],["Identifier","$meta"],["","->"],["Identifier","$add_modifier_method"],["","( "],["Identifier","$_"],["","->name, "],["Identifier","$code"],[""," )\n                "],["Repeat","for"],[""," "],["Identifier","@matched_methods"],["",";\n        }\n        "],["Conditional","elsif"],[""," ("],["Identifier","$method_modifier_type"],[""," "],["Operator","eq"],[""," "],["String","'ARRAY'"],["",") {\n            "],["Identifier","$meta"],["","->"],["Identifier","$add_modifier_method"],["","( "],["Identifier","$_"],["",", "],["Identifier","$code"],[""," ) "],["Repeat","for"],[""," "],["Identifier","@{$args->["],["Number","0"],["Identifier","]}"],["",";\n        }\n        "],["Conditional","else"],[""," {\n            "],["Identifier","$meta"],["","->throw_error(\n                "],["Statement","sprintf"],["","(\n                    "],["String","\"Methods passed to %s must be provided as a list, arrayref or regex, not %s\""],["",",\n                    "],["Identifier","$modifier_name"],["",",\n                    "],["Identifier","$method_modifier_type"],["",",\n                )\n            );\n        }\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$meta"],["","->"],["Identifier","$add_modifier_method"],["","( "],["Identifier","$_"],["",", "],["Identifier","$code"],[""," ) "],["Repeat","for"],[""," "],["Identifier","@{$args}"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","english_list "],["","{\n    "],["Statement","my"],[""," "],["Identifier","@items"],[""," = "],["Statement","sort"],[""," "],["Identifier","@_"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$items["],["Number","0"],["Identifier","]"],[""," "],["Conditional","if"],[""," "],["Identifier","@items"],[""," == "],["Number","1"],["",";\n    "],["Statement","return"],[""," "],["String","\""],["Identifier","$items["],["Number","0"],["Identifier","]"],["String"," and "],["Identifier","$items["],["Number","1"],["Identifier","]"],["String","\""],[""," "],["Conditional","if"],[""," "],["Identifier","@items"],[""," == "],["Number","2"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$tail"],[""," = "],["Statement","pop"],[""," "],["Identifier","@items"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$list"],[""," = "],["Statement","join"],[""," "],["String","', '"],["",", "],["Identifier","@items"],["",";\n    "],["Identifier","$list"],[""," .= "],["String","', and '"],[""," . "],["Identifier","$tail"],["",";\n\n    "],["Statement","return"],[""," "],["Identifier","$list"],["",";\n}\n\n"],["Keyword","sub "],["Function","_caller_info "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$level"],[""," = "],["Identifier","@_"],[""," ? ("],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," + "],["Number","1"],["",") : "],["Number","2"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%info"],["",";\n    "],["Identifier","@info{"],["String","qw(package file line)"],["Identifier","}"],[""," = "],["Statement","caller"],["","("],["Identifier","$level"],["",");\n    "],["Statement","return"],[""," "],["Identifier","%info"],["",";\n}\n\n"],["Keyword","sub "],["Function","_create_alias "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$type"],["",", "],["Identifier","$name"],["",", "],["Identifier","$trait"],["",", "],["Identifier","$for"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$package"],[""," = _build_alias_package_name("],["Identifier","$type"],["",", "],["Identifier","$name"],["",", "],["Identifier","$trait"],["",");\n    Class::MOP::Class->initialize("],["Identifier","$package"],["",")->add_method(\n        "],["String","register_implementation"],[""," => "],["Keyword","sub "],["","{ "],["Identifier","$for"],[""," }\n    );\n}\n\n"],["Keyword","sub "],["Function","meta_attribute_alias "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$to"],["",", "],["Identifier","$from"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$from"],[""," ||= "],["Statement","caller"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::class_of("],["Identifier","$from"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$trait"],[""," = "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n    _create_alias("],["String","'Attribute'"],["",", "],["Identifier","$to"],["",", "],["Identifier","$trait"],["",", "],["Identifier","$from"],["",");\n}\n\n"],["Keyword","sub "],["Function","meta_class_alias "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$to"],["",", "],["Identifier","$from"],["",") = "],["Identifier","@_"],["",";\n    "],["Identifier","$from"],[""," ||= "],["Statement","caller"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::class_of("],["Identifier","$from"],["",");\n    "],["Statement","my"],[""," "],["Identifier","$trait"],[""," = "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n    _create_alias("],["String","'Class'"],["",", "],["Identifier","$to"],["",", "],["Identifier","$trait"],["",", "],["Identifier","$from"],["",");\n}\n\n"],["Comment","# "],["Todo","XXX"],["Comment"," - this should be added to Params::Util"],["","\n"],["Keyword","sub "],["Function","_STRINGLIKE0 "],["Type","($)"],[""," {\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," _STRING( "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," );\n    "],["Conditional","if"],[""," ( blessed "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," ) {\n        "],["Statement","return"],[""," overload::Method( "],["Identifier","$_["],["Number","0"],["Identifier","]"],["",", "],["String","q{\"\"}"],[""," );\n    }\n\n    "],["Statement","return"],[""," "],["Number","1"],[""," "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," && "],["Identifier","$_["],["Number","0"],["Identifier","]"],[""," "],["Operator","eq"],[""," "],["String","q{}"],["",";\n\n    "],["Statement","return"],[""," "],["Number","0"],["",";\n}\n\n"],["Keyword","sub "],["Function","_reconcile_roles_for_metaclass "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class_meta_name"],["",", "],["Identifier","$super_meta_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@role_differences"],[""," = _role_differences(\n        "],["Identifier","$class_meta_name"],["",", "],["Identifier","$super_meta_name"],["",",\n    );\n\n    "],["Comment","# handle the case where we need to fix compatibility between a class and"],["","\n    "],["Comment","# its parent, but all roles in the class are already also done by the"],["","\n    "],["Comment","# parent"],["","\n    "],["Comment","# see t/metaclasses/metaclass_compat_no_fixing_bug.t"],["","\n    "],["Statement","return"],[""," "],["Identifier","$super_meta_name"],["","\n        "],["Conditional","unless"],[""," "],["Identifier","@role_differences"],["",";\n\n    "],["Statement","return"],[""," Moose::Meta::Class->create_anon_class(\n        "],["String","superclasses"],[""," => ["],["Identifier","$super_meta_name"],["","],\n        "],["String","roles"],["","        => ["],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->name "],["Statement","}"],[""," "],["Identifier","@role_differences"],["","],\n        "],["String","cache"],["","        => "],["Number","1"],["",",\n    )->name;\n}\n\n"],["Keyword","sub "],["Function","_role_differences "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$class_meta_name"],["",", "],["Identifier","$super_meta_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","@super_role_metas"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Identifier","$_"],["","->isa("],["String","'Moose::Meta::Role::Composite'"],["",")\n            ? ("],["Identifier","@{"],[""," "],["Identifier","$_"],["","->get_roles "],["Identifier","}"],["",")\n            : ("],["Identifier","$_"],["",")\n    "],["Statement","}"],[""," "],["Identifier","$super_meta_name"],["","->meta->can("],["String","'_roles_with_inheritance'"],["",")\n        ? "],["Identifier","$super_meta_name"],["","->meta->_roles_with_inheritance\n    : "],["Identifier","$super_meta_name"],["","->meta->can("],["String","'roles'"],["",")\n        ? "],["Identifier","@{"],[""," "],["Identifier","$super_meta_name"],["","->meta->roles "],["Identifier","}"],["","\n    :     ();\n    "],["Statement","my"],[""," "],["Identifier","@role_metas"],[""," = "],["Statement","map"],[""," "],["Statement","{"],["","\n        "],["Identifier","$_"],["","->isa("],["String","'Moose::Meta::Role::Composite'"],["",")\n            ? ("],["Identifier","@{"],[""," "],["Identifier","$_"],["","->get_roles "],["Identifier","}"],["",")\n            : ("],["Identifier","$_"],["",")\n    "],["Statement","}"],[""," "],["Identifier","$class_meta_name"],["","->meta->can("],["String","'_roles_with_inheritance'"],["",")\n        ? "],["Identifier","$class_meta_name"],["","->meta->_roles_with_inheritance\n    : "],["Identifier","$class_meta_name"],["","->meta->can("],["String","'roles'"],["",")\n        ? "],["Identifier","@{"],[""," "],["Identifier","$class_meta_name"],["","->meta->roles "],["Identifier","}"],["","\n    :     ();\n    "],["Statement","my"],[""," "],["Identifier","@differences"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$role_meta"],[""," ("],["Identifier","@role_metas"],["",") {\n        "],["Statement","push"],[""," "],["Identifier","@differences"],["",", "],["Identifier","$role_meta"],["","\n            "],["Conditional","unless"],[""," any { "],["Identifier","$_"],["","->name "],["Operator","eq"],[""," "],["Identifier","$role_meta"],["","->name } "],["Identifier","@super_role_metas"],["",";\n    }\n    "],["Statement","return"],[""," "],["Identifier","@differences"],["",";\n}\n\n"],["Keyword","sub "],["Function","_classes_differ_by_roles_only "],["","{\n    "],["Statement","my"],[""," ( "],["Identifier","$self_meta_name"],["",", "],["Identifier","$super_meta_name"],[""," ) = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$common_base_name"],["","\n        = _find_common_base( "],["Identifier","$self_meta_name"],["",", "],["Identifier","$super_meta_name"],[""," );\n\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$common_base_name"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@super_meta_name_ancestor_names"],["","\n        = _get_ancestors_until( "],["Identifier","$super_meta_name"],["",", "],["Identifier","$common_base_name"],[""," );\n    "],["Statement","my"],[""," "],["Identifier","@class_meta_name_ancestor_names"],["","\n        = _get_ancestors_until( "],["Identifier","$self_meta_name"],["",", "],["Identifier","$common_base_name"],[""," );\n\n    "],["Statement","return"],["","\n        "],["Conditional","unless"],[""," all { _is_role_only_subclass("],["Identifier","$_"],["",") }\n        "],["Identifier","@super_meta_name_ancestor_names"],["",",\n        "],["Identifier","@class_meta_name_ancestor_names"],["",";\n\n    "],["Statement","return"],[""," "],["Number","1"],["",";\n}\n\n"],["Keyword","sub "],["Function","_find_common_base "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$meta1"],["",", "],["Identifier","$meta2"],["",") = "],["Statement","map"],[""," "],["Statement","{"],[""," Class::MOP::class_of("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","@_"],["",";\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Operator","defined"],[""," "],["Identifier","$meta1"],[""," && "],["Operator","defined"],[""," "],["Identifier","$meta2"],["",";\n\n    "],["Comment","# "],["Todo","FIXME"],["Comment","? This doesn't account for multiple inheritance (not sure"],["","\n    "],["Comment","# if it needs to though). For example, if somewhere in $meta1's"],["","\n    "],["Comment","# history it inherits from both ClassA and ClassB, and $meta2"],["","\n    "],["Comment","# inherits from ClassB & ClassA, does it matter? And what crazy"],["","\n    "],["Comment","# fool would do that anyway?"],["","\n\n    "],["Statement","my"],[""," "],["Identifier","%meta1_parents"],[""," = "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],[""," => "],["Number","1"],[""," "],["Statement","}"],[""," "],["Identifier","$meta1"],["","->linearized_isa;\n\n    "],["Statement","return"],[""," first { "],["Identifier","$meta1_parents{$_}"],[""," } "],["Identifier","$meta2"],["","->linearized_isa;\n}\n\n"],["Keyword","sub "],["Function","_get_ancestors_until "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$start_name"],["",", "],["Identifier","$until_name"],["",") = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","@ancestor_names"],["",";\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$ancestor_name"],[""," (Class::MOP::class_of("],["Identifier","$start_name"],["",")->linearized_isa) {\n        "],["Statement","last"],[""," "],["Conditional","if"],[""," "],["Identifier","$ancestor_name"],[""," "],["Operator","eq"],[""," "],["Identifier","$until_name"],["",";\n        "],["Statement","push"],[""," "],["Identifier","@ancestor_names"],["",", "],["Identifier","$ancestor_name"],["",";\n    }\n    "],["Statement","return"],[""," "],["Identifier","@ancestor_names"],["",";\n}\n\n"],["Keyword","sub "],["Function","_is_role_only_subclass "],["","{\n    "],["Statement","my"],[""," ("],["Identifier","$meta_name"],["",") = "],["Identifier","@_"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$meta_name"],["",");\n    "],["Statement","my"],[""," "],["Identifier","@parent_names"],[""," = "],["Identifier","$meta"],["","->superclasses;\n\n    "],["Comment","# "],["Todo","XXX:"],["Comment"," don't feel like messing with multiple inheritance here... what would"],["","\n    "],["Comment","# that even do?"],["","\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@parent_names"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," ("],["Identifier","$parent_name"],["",") = "],["Identifier","@parent_names"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$parent_meta"],[""," = Class::MOP::Class->initialize("],["Identifier","$parent_name"],["",");\n\n    "],["Comment","# only get the roles attached to this particular class, don't look at"],["","\n    "],["Comment","# superclasses"],["","\n    "],["Statement","my"],[""," "],["Identifier","@roles"],[""," = "],["Identifier","$meta"],["","->can("],["String","'calculate_all_roles'"],["",")\n                    ? "],["Identifier","$meta"],["","->calculate_all_roles\n                    : ();\n\n    "],["Comment","# it's obviously not a role-only subclass if it doesn't do any roles"],["","\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","@roles"],["",";\n\n    "],["Comment","# loop over all methods that are a part of the current class"],["","\n    "],["Comment","# (not inherited)"],["","\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$method"],[""," ( "],["Identifier","$meta"],["","->_get_local_methods ) {\n        "],["Comment","# always ignore meta"],["","\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method::Meta'"],["",");\n        "],["Comment","# we'll deal with attributes below"],["","\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$method"],["","->can("],["String","'associated_attribute'"],["",");\n        "],["Comment","# if the method comes from a role we consumed, ignore it"],["","\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$meta"],["","->can("],["String","'does_role'"],["",")\n             && "],["Identifier","$meta"],["","->does_role("],["Identifier","$method"],["","->original_package_name);\n        "],["Comment","# "],["Todo","FIXME"],["Comment"," - this really isn't right. Just because a modifier is"],["","\n        "],["Comment","# defined in a role doesn't mean it isn't _also_ defined in the"],["","\n        "],["Comment","# subclass."],["","\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," "],["Identifier","$method"],["","->isa("],["String","'Class::MOP::Method::Wrapped'"],["",")\n             && (\n                 (!"],["Statement","scalar"],["","("],["Identifier","$method"],["","->around_modifiers)\n               || any { "],["Identifier","$_"],["","->has_around_method_modifiers("],["Identifier","$method"],["","->name) } "],["Identifier","@roles"],["",")\n              && (!"],["Statement","scalar"],["","("],["Identifier","$method"],["","->before_modifiers)\n               || any { "],["Identifier","$_"],["","->has_before_method_modifiers("],["Identifier","$method"],["","->name) } "],["Identifier","@roles"],["",")\n              && (!"],["Statement","scalar"],["","("],["Identifier","$method"],["","->after_modifiers)\n               || any { "],["Identifier","$_"],["","->has_after_method_modifiers("],["Identifier","$method"],["","->name) } "],["Identifier","@roles"],["",")\n                );\n\n        "],["Statement","return"],[""," "],["Number","0"],["",";\n    }\n\n    "],["Comment","# loop over all attributes that are a part of the current class"],["","\n    "],["Comment","# (not inherited)"],["","\n    "],["Comment","# "],["Todo","FIXME"],["Comment"," - this really isn't right. Just because an attribute is"],["","\n    "],["Comment","# defined in a role doesn't mean it isn't _also_ defined in the"],["","\n    "],["Comment","# subclass."],["","\n    "],["Repeat","for"],[""," "],["Statement","my"],[""," "],["Identifier","$attr"],[""," ("],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$meta"],["","->get_attribute("],["Identifier","$_"],["",") "],["Statement","}"],[""," "],["Identifier","$meta"],["","->get_attribute_list) {\n        "],["Statement","next"],[""," "],["Conditional","if"],[""," any { "],["Identifier","$_"],["","->has_attribute("],["Identifier","$attr"],["","->name) } "],["Identifier","@roles"],["",";\n\n        "],["Statement","return"],[""," "],["Number","0"],["",";\n    }\n\n    "],["Statement","return"],[""," "],["Number","1"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: Utilities for working with Moose classes"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Util - Utilities for working with Moose classes\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  use Moose::Util qw/find_meta does_role search_class_by_role/;"],["","\n\n"],["PreProc","  my $meta = find_meta($object) || die \"No metaclass found\";"],["","\n\n"],["PreProc","  if (does_role($object, $role)) {"],["","\n"],["PreProc","    print \"The object can do $role!\\n\";"],["","\n"],["PreProc","  }"],["","\n\n"],["PreProc","  my $class = search_class_by_role($object, 'FooRole');"],["","\n"],["PreProc","  print \"Nearest class with 'FooRole' is $class\\n\";"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThis module provides a set of utility functions. Many of these\nfunctions are intended for use in Moose itself or MooseX modules, but\nsome of them may be useful for use in your own code.\n\n"],["Statement","=head1"],[""," "],["String","EXPORTED FUNCTIONS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<find_meta($class_or_obj)>"],["","\n\nThis method takes a class name or object and attempts to find a\nmetaclass for the class, if one exists. It will "],["Identifier","B<not>"],[""," create one if it\ndoes not yet exist.\n\n"],["Statement","=item"],[""," "],["Identifier","B<does_role($class_or_obj, $role_or_obj)>"],["","\n\nReturns true if "],["Identifier","C<$class_or_obj>"],[""," does the given "],["Identifier","C<$role_or_obj>"],["",". The role can\nbe provided as a name or a "],["Identifier","L<Moose::Meta::Role>"],[""," object.\n\nThe class must already have a metaclass for this to work. If it doesn't, this\nfunction simply returns false.\n\n"],["Statement","=item"],[""," "],["Identifier","B<search_class_by_role($class_or_obj, $role_or_obj)>"],["","\n\nReturns the first class in the class's precedence list that does\n"],["Identifier","C<$role_or_obj>"],["",", if any. The role can be either a name or a\n"],["Identifier","L<Moose::Meta::Role>"],[""," object.\n\nThe class must already have a metaclass for this to work.\n\n"],["Statement","=item"],[""," "],["Identifier","B<apply_all_roles($applicant, @roles)>"],["","\n\nThis function applies one or more roles to the given "],["Identifier","C<$applicant>"],[""," The\napplicant can be a role name, class name, or object.\n\nThe "],["Identifier","C<$applicant>"],[""," must already have a metaclass object.\n\nThe list of "],["Identifier","C<@roles>"],[""," should a list of names or "],["Identifier","L<Moose::Meta::Role>"],[""," objects,\neach of which can be followed by an optional hash reference of options\n("],["Identifier","C<-excludes>"],[""," and "],["Identifier","C<-alias>"],["",").\n\n"],["Statement","=item"],[""," "],["Identifier","B<ensure_all_roles($applicant, @roles)>"],["","\n\nThis function is similar to "],["Identifier","C<apply_all_roles>"],["",", but only applies roles that\n"],["Identifier","C<$applicant>"],[""," does not already consume.\n\n"],["Statement","=item"],[""," "],["Identifier","B<with_traits($class_name, @role_names)>"],["","\n\nThis function creates a new class from "],["Identifier","C<$class_name>"],[""," with each of\n"],["Identifier","C<@role_names>"],[""," applied. It returns the name of the new class.\n\n"],["Statement","=item"],[""," "],["Identifier","B<get_all_attribute_values($meta, $instance)>"],["","\n\nReturns a hash reference containing all of the "],["Identifier","C<$instance>"],["","'s\nattributes. The keys are attribute names.\n\n"],["Statement","=item"],[""," "],["Identifier","B<get_all_init_args($meta, $instance)>"],["","\n\nReturns a hash reference containing all of the "],["Identifier","C<init_arg>"],[""," values for\nthe instance's attributes. The values are the associated attribute\nvalues. If an attribute does not have a defined "],["Identifier","C<init_arg>"],["",", it is\nskipped.\n\nThis could be useful in cloning an object.\n\n"],["Statement","=item"],[""," "],["Identifier","B<resolve_metaclass_alias($category, $name, %options)>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<resolve_metatrait_alias($category, $name, %options)>"],["","\n\nResolves a short name to a full class name. Short names are often used\nwhen specifying the "],["Identifier","C<metaclass>"],[""," or "],["Identifier","C<traits>"],[""," option for an attribute:\n\n"],["PreProc","    has foo => ("],["","\n"],["PreProc","        metaclass => \"Bar\","],["","\n"],["PreProc","    );"],["","\n\nThe name resolution mechanism is covered in\n"],["Identifier","L<Moose/Metaclass and Trait Name Resolution>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<meta_class_alias($to[, $from])>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<meta_attribute_alias($to[, $from])>"],["","\n\nCreate an alias from the class "],["Identifier","C<$from>"],[""," (or the current package, if\n"],["Identifier","C<$from>"],[""," is unspecified), so that\n"],["Identifier","L<Moose/Metaclass and Trait Name Resolution>"],[""," works properly.\n\n"],["Statement","=item"],[""," "],["Identifier","B<english_list(@items)>"],["","\n\nGiven a list of scalars, turns them into a proper list in English\n(\"one and two\", \"one, two, three, and four\"). This is used to help us\nmake nicer error messages.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","TODO"],["","\n\nHere is a list of possible functions to write\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","discovering original method from modified method"],["","\n\n"],["Statement","=item"],[""," "],["String","search for origin class of a method or attribute"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]