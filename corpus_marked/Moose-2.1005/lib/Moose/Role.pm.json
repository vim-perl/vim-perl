[["Statement","package"],["Type"," Moose::Role"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::Role::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::Role::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","Carp         "],["String","'croak'"],["",";\n"],["Statement","use "],["","Class::Load  "],["String","'is_class_loaded'"],["",";\n\n"],["Statement","use "],["","Sub::Exporter;\n\n"],["Statement","use "],["","Moose       ();\n"],["Statement","use "],["","Moose::Util ();\n\n"],["Statement","use "],["","Moose::Exporter;\n"],["Statement","use "],["","Moose::Meta::Role;\n"],["Statement","use "],["","Moose::Util::TypeConstraints;\n\n"],["Keyword","sub "],["Function","extends "],["","{\n    croak "],["String","\"Roles do not support 'extends' (you can use 'with' to specialize a role)\""],["",";\n}\n\n"],["Keyword","sub "],["Function","with "],["","{\n    Moose::Util::apply_all_roles( "],["Statement","shift"],["",", "],["Identifier","@_"],[""," );\n}\n\n"],["Keyword","sub "],["Function","requires "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    croak "],["String","\"Must specify at least one method\""],[""," "],["Conditional","unless"],[""," "],["Identifier","@_"],["",";\n    "],["Identifier","$meta"],["","->add_required_methods("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","excludes "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    croak "],["String","\"Must specify at least one role\""],[""," "],["Conditional","unless"],[""," "],["Identifier","@_"],["",";\n    "],["Identifier","$meta"],["","->add_excluded_roles("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","has "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Statement","shift"],["",";\n    croak "],["String","'Usage: has \\'name\\' => ( key => value, ... )'"],[""," "],["Conditional","if"],[""," "],["Identifier","@_"],[""," == "],["Number","1"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%context"],[""," = Moose::Util::_caller_info;\n    "],["Identifier","$context{"],["String","context"],["Identifier","}"],[""," = "],["String","'has declaration'"],["",";\n    "],["Identifier","$context{"],["String","type"],["Identifier","}"],[""," = "],["String","'role'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = ( "],["String","definition_context"],[""," => \\"],["Identifier","%context"],["",", "],["Identifier","@_"],[""," );\n    "],["Statement","my"],[""," "],["Identifier","$attrs"],[""," = ( "],["Operator","ref"],["","("],["Identifier","$name"],["",") "],["Operator","eq"],[""," "],["String","'ARRAY'"],[""," ) ? "],["Identifier","$name"],[""," : [ ("],["Identifier","$name"],["",") ];\n    "],["Identifier","$meta"],["","->add_attribute( "],["Identifier","$_"],["",", "],["Identifier","%options"],[""," ) "],["Repeat","for"],[""," "],["Identifier","@$attrs"],["",";\n}\n\n"],["Keyword","sub "],["Function","_add_method_modifier "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$type"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Operator","ref"],["","("],["Identifier","$_["],["Number","0"],["Identifier","]"],["",") "],["Operator","eq"],[""," "],["String","'Regexp'"],[""," ) {\n        croak "],["String","\"Roles do not currently support regex \""],["","\n            . "],["String","\" references for "],["Identifier","$type"],["String"," method modifiers\""],["",";\n    }\n\n    Moose::Util::add_method_modifier("],["Identifier","$meta"],["",", "],["Identifier","$type"],["",", \\"],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","before "],["","{ _add_method_modifier("],["String","'before'"],["",", "],["Identifier","@_"],["",") }\n\n"],["Keyword","sub "],["Function","after  "],["","{ _add_method_modifier("],["String","'after'"],["",",  "],["Identifier","@_"],["",") }\n\n"],["Keyword","sub "],["Function","around "],["","{ _add_method_modifier("],["String","'around'"],["",", "],["Identifier","@_"],["",") }\n\n"],["Comment","# see Moose.pm for discussion"],["","\n"],["Keyword","sub "],["Function","super "],["","{\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$"],["Type","Moose::"],["Identifier","SUPER_BODY"],["",";\n    "],["Identifier","$"],["Type","Moose::"],["Identifier","SUPER_BODY"],["","->("],["Identifier","@"],["Type","Moose::"],["Identifier","SUPER_ARGS"],["",");\n}\n\n"],["Keyword","sub "],["Function","override "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$name"],["",", "],["Identifier","$code"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Identifier","$meta"],["","->add_override_method_modifier( "],["Identifier","$name"],["",", "],["Identifier","$code"],[""," );\n}\n\n"],["Keyword","sub "],["Function","inner "],["","{\n    croak "],["String","\"Roles cannot support 'inner'\""],["",";\n}\n\n"],["Keyword","sub "],["Function","augment "],["","{\n    croak "],["String","\"Roles cannot support 'augment'\""],["",";\n}\n\nMoose::Exporter->setup_import_methods(\n    "],["String","with_meta"],[""," => [\n        "],["String","qw( with requires excludes has before after around override )"],["","\n    ],\n    "],["String","as_is"],[""," => [\n        "],["String","qw( extends super inner augment )"],["",",\n        \\"],["Identifier","&"],["Type","Carp::"],["Identifier","confess"],["",",\n        \\"],["Identifier","&"],["Type","Scalar::Util::"],["Identifier","blessed"],["",",\n    ],\n);\n\n"],["Keyword","sub "],["Function","init_meta "],["","{\n    "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$role"],[""," = "],["Identifier","$args{"],["String","for_class"],["Identifier","}"],["",";\n\n    "],["Conditional","unless"],[""," ("],["Identifier","$role"],["",") {\n        "],["Statement","require"],[""," Moose;\n        Moose->throw_error("],["String","\"Cannot call init_meta without specifying a for_class\""],["",");\n    }\n\n    "],["Statement","my"],[""," "],["Identifier","$metaclass"],[""," = "],["Identifier","$args{"],["String","metaclass"],["Identifier","}"],[""," || "],["String","\"Moose::Meta::Role\""],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta_name"],[""," = "],["Statement","exists"],[""," "],["Identifier","$args{"],["String","meta_name"],["Identifier","}"],[""," ? "],["Identifier","$args{"],["String","meta_name"],["Identifier","}"],[""," : "],["String","'meta'"],["",";\n\n    Moose->throw_error("],["String","\"The Metaclass "],["Identifier","$metaclass"],["String"," must be loaded. (Perhaps you forgot to 'use "],["Identifier","$metaclass"],["String","'?)\""],["",")\n        "],["Conditional","unless"],[""," is_class_loaded("],["Identifier","$metaclass"],["",");\n\n    Moose->throw_error("],["String","\"The Metaclass "],["Identifier","$metaclass"],["String"," must be a subclass of Moose::Meta::Role.\""],["",")\n        "],["Conditional","unless"],[""," "],["Identifier","$metaclass"],["","->isa("],["String","'Moose::Meta::Role'"],["",");\n\n    "],["Comment","# make a subtype for each Moose role"],["","\n    role_type "],["Identifier","$role"],[""," "],["Conditional","unless"],[""," find_type_constraint("],["Identifier","$role"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],["",";\n    "],["Conditional","if"],[""," ( "],["Identifier","$meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$role"],["",") ) {\n        "],["Conditional","unless"],[""," ( "],["Identifier","$meta"],["","->isa("],["String","\"Moose::Meta::Role\""],["",") ) {\n            "],["Statement","my"],[""," "],["Identifier","$error_message"],[""," = "],["String","\""],["Identifier","$role"],["String"," already has a metaclass, but it does not inherit "],["Identifier","$metaclass"],["String"," ("],["Identifier","$meta"],["String",").\""],["",";\n            "],["Conditional","if"],[""," ( "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Class'"],["",") ) {\n                Moose->throw_error("],["Identifier","$error_message"],[""," . "],["String","' You cannot make the same thing a role and a class. Remove either Moose or Moose::Role.'"],["",");\n            } "],["Conditional","else"],[""," {\n                Moose->throw_error("],["Identifier","$error_message"],["",");\n            }\n        }\n    }\n    "],["Conditional","else"],[""," {\n        "],["Identifier","$meta"],[""," = "],["Identifier","$metaclass"],["","->initialize("],["Identifier","$role"],["",");\n    }\n\n    "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$meta_name"],["",") {\n        "],["Comment","# also check for inherited non moose 'meta' method?"],["","\n        "],["Statement","my"],[""," "],["Identifier","$existing"],[""," = "],["Identifier","$meta"],["","->get_method("],["Identifier","$meta_name"],["",");\n        "],["Conditional","if"],[""," ("],["Identifier","$existing"],[""," && !"],["Identifier","$existing"],["","->isa("],["String","'Class::MOP::Method::Meta'"],["",")) {\n            Carp::cluck "],["String","\"Moose::Role is overwriting an existing method named \""],["","\n                      . "],["String","\""],["Identifier","$meta_name"],["String"," in role "],["Identifier","$role"],["String"," with a method \""],["","\n                      . "],["String","\"which returns the class's metaclass. If this is \""],["","\n                      . "],["String","\"actually what you want, you should remove the \""],["","\n                      . "],["String","\"existing method, otherwise, you should rename or \""],["","\n                      . "],["String","\"disable this generated method using the \""],["","\n                      . "],["String","\"'-meta_name' option to 'use Moose::Role'.\""],["",";\n        }\n        "],["Identifier","$meta"],["","->_add_meta_method("],["Identifier","$meta_name"],["",");\n    }\n\n    "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n}\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: The Moose Role"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose::Role - The Moose Role\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  package Eq;"],["","\n"],["PreProc","  use Moose::Role; # automatically turns on strict and warnings"],["","\n\n"],["PreProc","  requires 'equal';"],["","\n\n"],["PreProc","  sub no_equal {"],["","\n"],["PreProc","      my ($self, $other) = @_;"],["","\n"],["PreProc","      !$self->equal($other);"],["","\n"],["PreProc","  }"],["","\n\n"],["PreProc","  # ... then in your classes"],["","\n\n"],["PreProc","  package Currency;"],["","\n"],["PreProc","  use Moose; # automatically turns on strict and warnings"],["","\n\n"],["PreProc","  with 'Eq';"],["","\n\n"],["PreProc","  sub equal {"],["","\n"],["PreProc","      my ($self, $other) = @_;"],["","\n"],["PreProc","      $self->as_float == $other->as_float;"],["","\n"],["PreProc","  }"],["","\n\n"],["PreProc","  # ... and also"],["","\n\n"],["PreProc","  package Comparator;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  has compare_to => ("],["","\n"],["PreProc","      is      => 'ro',"],["","\n"],["PreProc","      does    => 'Eq',"],["","\n"],["PreProc","      handles => 'Eq',"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  # ... which allows"],["","\n\n"],["PreProc","  my $currency1 = Currency->new(...);"],["","\n"],["PreProc","  my $currency2 = Currency->new(...);"],["","\n"],["PreProc","  Comparator->new(compare_to => $currency1)->equal($currency2);"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nThe concept of roles is documented in "],["Identifier","L<Moose::Manual::Roles>"],["",". This document\nserves as API documentation.\n\n"],["Statement","=head1"],[""," "],["String","EXPORTED FUNCTIONS"],["","\n\nMoose::Role currently supports all of the functions that "],["Identifier","L<Moose>"],[""," exports, but\ndiffers slightly in how some items are handled (see "],["Identifier","L</CAVEATS>"],[""," below for\ndetails).\n\nMoose::Role also offers two role-specific keyword exports:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<requires (@method_names)>"],["","\n\nRoles can require that certain methods are implemented by any class which\n"],["Identifier","C<does>"],[""," the role.\n\nNote that attribute accessors also count as methods for the purposes\nof satisfying the requirements of a role.\n\n"],["Statement","=item"],[""," "],["Identifier","B<excludes (@role_names)>"],["","\n\nRoles can "],["Identifier","C<exclude>"],[""," other roles, in effect saying \"I can never be combined\nwith these "],["Identifier","C<@role_names>"],["","\". This is a feature which should not be used\nlightly.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["Identifier","B<unimport>"],["","\n\nMoose::Role offers a way to remove the keywords it exports, through the\n"],["Identifier","C<unimport>"],[""," method. You simply have to say "],["Identifier","C<no Moose::Role>"],[""," at the bottom of\nyour code for this to work.\n\n"],["Statement","=head1"],[""," "],["String","METACLASS"],["","\n\nWhen you use Moose::Role, you can specify traits which will be applied to your\nrole metaclass:\n\n"],["PreProc","    use Moose::Role -traits => 'My::Trait';"],["","\n\nThis is very similar to the attribute traits feature. When you do\nthis, your class's "],["Identifier","C<meta>"],[""," object will have the specified traits\napplied to it. See "],["Identifier","L<Moose/Metaclass and Trait Name Resolution>"],[""," for more\ndetails.\n\n"],["Statement","=head1"],[""," "],["String","APPLYING ROLES"],["","\n\nIn addition to being applied to a class using the 'with' syntax (see\n"],["Identifier","L<Moose::Manual::Roles>"],["",") and using the "],["Identifier","L<Moose::Util>"],[""," 'apply_all_roles'\nmethod, roles may also be applied to an instance of a class using\n"],["Identifier","L<Moose::Util>"],[""," 'apply_all_roles' or the role's metaclass:\n\n"],["PreProc","   MyApp::Test::SomeRole->meta->apply( $instance );"],["","\n\nDoing this creates a new, mutable, anonymous subclass, applies the role to that,\nand reblesses. In a debugger, for example, you will see class names of the\nform "],["Identifier","C< Moose::Meta::Class::__ANON__::SERIAL::6 >"],["",", which means that doing a\n'ref' on your instance may not return what you expect. See "],["Identifier","L<Moose::Object>"],[""," for\n'DOES'.\n\nAdditional params may be added to the new instance by providing\n'rebless_params'. See "],["Identifier","L<Moose::Meta::Role::Application::ToInstance>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","CAVEATS"],["","\n\nRole support has only a few caveats:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","*"],["","\n\nRoles cannot use the "],["Identifier","C<extends>"],[""," keyword; it will throw an exception for now.\nThe same is true of the "],["Identifier","C<augment>"],[""," and "],["Identifier","C<inner>"],[""," keywords (not sure those\nreally make sense for roles). All other Moose keywords will be "],["Identifier","I<deferred>"],["","\nso that they can be applied to the consuming class.\n\n"],["Statement","=item"],[""," "],["String","*"],["","\n\nRole composition does its best to "],["Identifier","B<not>"],[""," be order-sensitive when it comes to\nconflict resolution and requirements detection. However, it is order-sensitive\nwhen it comes to method modifiers. All before/around/after modifiers are\nincluded whenever a role is composed into a class, and then applied in the order\nin which the roles are used. This also means that there is no conflict for\nbefore/around/after modifiers.\n\nIn most cases, this will be a non-issue; however, it is something to keep in\nmind when using method modifiers in a role. You should never assume any\nordering.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nSee "],["Identifier","L<Moose/BUGS>"],[""," for details on reporting bugs.\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]