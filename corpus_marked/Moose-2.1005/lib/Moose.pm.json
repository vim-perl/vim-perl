[["Statement","package"],["Type"," Moose"],["",";\n"],["PreProc","BEGIN "],["","{\n  "],["Identifier","$"],["Type","Moose::"],["Identifier","AUTHORITY"],[""," = "],["String","'cpan:STEVAN'"],["",";\n}\n{\n  "],["Identifier","$"],["Type","Moose::"],["Identifier","VERSION"],[""," = "],["String","'2.1005'"],["",";\n}\n"],["Statement","use strict"],["",";\n"],["Statement","use warnings"],["",";\n\n"],["Statement","use "],["Float","5.008"],["",";\n\n"],["Statement","use "],["","Scalar::Util "],["String","'blessed'"],["",";\n"],["Statement","use "],["","Carp         "],["String","'carp'"],["",", "],["String","'confess'"],["",";\n"],["Statement","use "],["","Class::Load  "],["String","'is_class_loaded'"],["",";\n\n"],["Statement","use "],["","Moose::Deprecated;\n"],["Statement","use "],["","Moose::Exporter;\n\n"],["Statement","use "],["","Class::MOP;\n\n"],["PreProc","BEGIN "],["","{\n    "],["Statement","die"],[""," "],["String","\"Class::MOP version "],["Identifier","$"],["Type","Moose::"],["Identifier","VERSION"],["String"," required--this is version "],["Identifier","$"],["Type","Class::MOP::"],["Identifier","VERSION"],["String","\""],["","\n        "],["Conditional","if"],[""," "],["Identifier","$"],["Type","Moose::"],["Identifier","VERSION"],[""," && "],["Identifier","$"],["Type","Class::MOP::"],["Identifier","VERSION"],[""," "],["Operator","ne"],[""," "],["Identifier","$"],["Type","Moose::"],["Identifier","VERSION"],["",";\n}\n\n"],["Statement","use "],["","Moose::Meta::Class;\n"],["Statement","use "],["","Moose::Meta::TypeConstraint;\n"],["Statement","use "],["","Moose::Meta::TypeCoercion;\n"],["Statement","use "],["","Moose::Meta::Attribute;\n"],["Statement","use "],["","Moose::Meta::Instance;\n\n"],["Statement","use "],["","Moose::Object;\n\n"],["Statement","use "],["","Moose::Meta::Role;\n"],["Statement","use "],["","Moose::Meta::Role::Composite;\n"],["Statement","use "],["","Moose::Meta::Role::Application;\n"],["Statement","use "],["","Moose::Meta::Role::Application::RoleSummation;\n"],["Statement","use "],["","Moose::Meta::Role::Application::ToClass;\n"],["Statement","use "],["","Moose::Meta::Role::Application::ToRole;\n"],["Statement","use "],["","Moose::Meta::Role::Application::ToInstance;\n\n"],["Statement","use "],["","Moose::Util::TypeConstraints;\n"],["Statement","use "],["","Moose::Util ();\n\n"],["Statement","use "],["","Moose::Meta::Attribute::Native;\n\n"],["Keyword","sub "],["Function","throw_error "],["","{\n    "],["Comment","# "],["Todo","FIXME"],["Comment"," This"],["","\n    "],["Statement","shift"],["",";\n    "],["Statement","goto"],[""," \\"],["Identifier","&confess"],["","\n}\n\n"],["Keyword","sub "],["Function","extends "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n\n    Moose->throw_error("],["String","\"Must derive at least one class\""],["",") "],["Conditional","unless"],[""," "],["Identifier","@_"],["",";\n\n    "],["Comment","# this checks the metaclass to make sure"],["","\n    "],["Comment","# it is correct, sometimes it can get out"],["","\n    "],["Comment","# of sync when the classes are being built"],["","\n    "],["Identifier","$meta"],["","->superclasses("],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","with "],["","{\n    Moose::Util::apply_all_roles("],["Statement","shift"],["",", "],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","has "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$name"],[""," = "],["Statement","shift"],["",";\n\n    Moose->throw_error("],["String","'Usage: has \\'name\\' => ( key => value, ... )'"],["",")\n        "],["Conditional","if"],[""," "],["Identifier","@_"],[""," % "],["Number","2"],[""," == "],["Number","1"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","%context"],[""," = Moose::Util::_caller_info;\n    "],["Identifier","$context{"],["String","context"],["Identifier","}"],[""," = "],["String","'has declaration'"],["",";\n    "],["Identifier","$context{"],["String","type"],["Identifier","}"],[""," = "],["String","'class'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%options"],[""," = ( "],["String","definition_context"],[""," => \\"],["Identifier","%context"],["",", "],["Identifier","@_"],[""," );\n    "],["Statement","my"],[""," "],["Identifier","$attrs"],[""," = ( "],["Operator","ref"],["","("],["Identifier","$name"],["",") "],["Operator","eq"],[""," "],["String","'ARRAY'"],[""," ) ? "],["Identifier","$name"],[""," : [ ("],["Identifier","$name"],["",") ];\n    "],["Identifier","$meta"],["","->add_attribute( "],["Identifier","$_"],["",", "],["Identifier","%options"],[""," ) "],["Repeat","for"],[""," "],["Identifier","@$attrs"],["",";\n}\n\n"],["Keyword","sub "],["Function","before "],["","{\n    Moose::Util::add_method_modifier("],["Statement","shift"],["",", "],["String","'before'"],["",", \\"],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","after "],["","{\n    Moose::Util::add_method_modifier("],["Statement","shift"],["",", "],["String","'after'"],["",", \\"],["Identifier","@_"],["",");\n}\n\n"],["Keyword","sub "],["Function","around "],["","{\n    Moose::Util::add_method_modifier("],["Statement","shift"],["",", "],["String","'around'"],["",", \\"],["Identifier","@_"],["",");\n}\n\n"],["Statement","our"],[""," "],["Identifier","$SUPER_PACKAGE"],["",";\n"],["Statement","our"],[""," "],["Identifier","$SUPER_BODY"],["",";\n"],["Statement","our"],[""," "],["Identifier","@SUPER_ARGS"],["",";\n\n"],["Keyword","sub "],["Function","super "],["","{\n    "],["Conditional","if"],[""," ("],["Identifier","@_"],["",") {\n        carp "],["String","'Arguments passed to super() are ignored'"],["",";\n    }\n\n    "],["Comment","# This check avoids a recursion loop - see"],["","\n    "],["Comment","# t/bugs/super_recursion.t"],["","\n    "],["Statement","return"],[""," "],["Conditional","if"],[""," "],["Operator","defined"],[""," "],["Identifier","$SUPER_PACKAGE"],[""," && "],["Identifier","$SUPER_PACKAGE"],[""," "],["Operator","ne"],[""," "],["Statement","caller"],["","();\n    "],["Statement","return"],[""," "],["Conditional","unless"],[""," "],["Identifier","$SUPER_BODY"],["","; "],["Identifier","$SUPER_BODY"],["","->("],["Identifier","@SUPER_ARGS"],["",");\n}\n\n"],["Keyword","sub "],["Function","override "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$name"],["",", "],["Identifier","$method"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Identifier","$meta"],["","->add_override_method_modifier( "],["Identifier","$name"],[""," => "],["Identifier","$method"],[""," );\n}\n\n"],["Keyword","sub "],["Function","inner "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$pkg"],[""," = "],["Statement","caller"],["","();\n    "],["Statement","our"],[""," ( "],["Identifier","%INNER_BODY"],["",", "],["Identifier","%INNER_ARGS"],[""," );\n\n    "],["Conditional","if"],[""," ( "],["Statement","my"],[""," "],["Identifier","$body"],[""," = "],["Identifier","$INNER_BODY{$pkg}"],[""," ) {\n        "],["Statement","my"],[""," "],["Identifier","@args"],[""," = "],["Identifier","@{"],[""," "],["Identifier","$INNER_ARGS{$pkg}"],[""," "],["Identifier","}"],["",";\n        "],["Statement","local"],[""," "],["Identifier","$INNER_ARGS{$pkg}"],["",";\n        "],["Statement","local"],[""," "],["Identifier","$INNER_BODY{$pkg}"],["",";\n        "],["Statement","return"],[""," "],["Identifier","$body"],["","->("],["Identifier","@args"],["",");\n    } "],["Conditional","else"],[""," {\n        "],["Statement","return"],["",";\n    }\n}\n\n"],["Keyword","sub "],["Function","augment "],["","{\n    "],["Statement","my"],[""," "],["Identifier","$meta"],[""," = "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," ( "],["Identifier","$name"],["",", "],["Identifier","$method"],[""," ) = "],["Identifier","@_"],["",";\n    "],["Identifier","$meta"],["","->add_augment_method_modifier( "],["Identifier","$name"],[""," => "],["Identifier","$method"],[""," );\n}\n\nMoose::Exporter->setup_import_methods(\n    "],["String","with_meta"],[""," => [\n        "],["String","qw( extends with has before after around override augment )"],["","\n    ],\n    "],["String","as_is"],[""," => [\n        "],["String","qw( super inner )"],["",",\n        \\"],["Identifier","&"],["Type","Carp::"],["Identifier","confess"],["",",\n        \\"],["Identifier","&"],["Type","Scalar::Util::"],["Identifier","blessed"],["",",\n    ],\n);\n\n"],["Keyword","sub "],["Function","init_meta "],["","{\n    "],["Statement","shift"],["",";\n    "],["Statement","my"],[""," "],["Identifier","%args"],[""," = "],["Identifier","@_"],["",";\n\n    "],["Statement","my"],[""," "],["Identifier","$class"],[""," = "],["Identifier","$args{"],["String","for_class"],["Identifier","}"],["","\n        "],["Operator","or"],[""," Moose->throw_error("],["String","\"Cannot call init_meta without specifying a for_class\""],["",");\n    "],["Statement","my"],[""," "],["Identifier","$base_class"],[""," = "],["Identifier","$args{"],["String","base_class"],["Identifier","}"],[""," || "],["String","'Moose::Object'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$metaclass"],["","  = "],["Identifier","$args{"],["String","metaclass"],["Identifier","}"],["","  || "],["String","'Moose::Meta::Class'"],["",";\n    "],["Statement","my"],[""," "],["Identifier","$meta_name"],["","  = "],["Statement","exists"],[""," "],["Identifier","$args{"],["String","meta_name"],["Identifier","}"],[""," ? "],["Identifier","$args{"],["String","meta_name"],["Identifier","}"],[""," : "],["String","'meta'"],["",";\n\n    Moose->throw_error("],["String","\"The Metaclass "],["Identifier","$metaclass"],["String"," must be loaded. (Perhaps you forgot to 'use "],["Identifier","$metaclass"],["String","'?)\""],["",")\n        "],["Conditional","unless"],[""," is_class_loaded("],["Identifier","$metaclass"],["",");\n\n    Moose->throw_error("],["String","\"The Metaclass "],["Identifier","$metaclass"],["String"," must be a subclass of Moose::Meta::Class.\""],["",")\n        "],["Conditional","unless"],[""," "],["Identifier","$metaclass"],["","->isa("],["String","'Moose::Meta::Class'"],["",");\n\n    "],["Comment","# make a subtype for each Moose class"],["","\n    class_type("],["Identifier","$class"],["",")\n        "],["Conditional","unless"],[""," find_type_constraint("],["Identifier","$class"],["",");\n\n    "],["Statement","my"],[""," "],["Identifier","$meta"],["",";\n\n    "],["Conditional","if"],[""," ( "],["Identifier","$meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$class"],["",") ) {\n        "],["Conditional","unless"],[""," ( "],["Identifier","$meta"],["","->isa("],["String","\"Moose::Meta::Class\""],["",") ) {\n            "],["Statement","my"],[""," "],["Identifier","$error_message"],[""," = "],["String","\""],["Identifier","$class"],["String"," already has a metaclass, but it does not inherit "],["Identifier","$metaclass"],["String"," ("],["Identifier","$meta"],["String",").\""],["",";\n            "],["Conditional","if"],[""," ( "],["Identifier","$meta"],["","->isa("],["String","'Moose::Meta::Role'"],["",") ) {\n                Moose->throw_error("],["Identifier","$error_message"],[""," . "],["String","' You cannot make the same thing a role and a class. Remove either Moose or Moose::Role.'"],["",");\n            } "],["Conditional","else"],[""," {\n                Moose->throw_error("],["Identifier","$error_message"],["",");\n            }\n        }\n    } "],["Conditional","else"],[""," {\n        "],["Comment","# no metaclass"],["","\n\n        "],["Comment","# now we check whether our ancestors have metaclass, and if so borrow that"],["","\n        "],["Statement","my"],[""," ( "],["Operator","undef"],["",", "],["Identifier","@isa"],[""," ) = "],["Identifier","@{"],[""," mro::get_linear_isa("],["Identifier","$class"],["",") "],["Identifier","}"],["",";\n\n        "],["Repeat","foreach"],[""," "],["Statement","my"],[""," "],["Identifier","$ancestor"],[""," ( "],["Identifier","@isa"],[""," ) {\n            "],["Statement","my"],[""," "],["Identifier","$ancestor_meta"],[""," = Class::MOP::get_metaclass_by_name("],["Identifier","$ancestor"],["",") || "],["Statement","next"],["",";\n\n            "],["Statement","my"],[""," "],["Identifier","$ancestor_meta_class"],[""," = "],["Identifier","$ancestor_meta"],["","->_real_ref_name;\n\n            "],["Comment","# if we have an ancestor metaclass that inherits $metaclass, we use"],["","\n            "],["Comment","# that. This is like _fix_metaclass_incompatibility, but we can do it now."],["","\n\n            "],["Comment","# the case of having an ancestry is not very common, but arises in"],["","\n            "],["Comment","# e.g. Reaction"],["","\n            "],["Conditional","unless"],[""," ( "],["Identifier","$metaclass"],["","->isa( "],["Identifier","$ancestor_meta_class"],[""," ) ) {\n                "],["Conditional","if"],[""," ( "],["Identifier","$ancestor_meta_class"],["","->isa("],["Identifier","$metaclass"],["",") ) {\n                    "],["Identifier","$metaclass"],[""," = "],["Identifier","$ancestor_meta_class"],["",";\n                }\n            }\n        }\n\n        "],["Identifier","$meta"],[""," = "],["Identifier","$metaclass"],["","->initialize("],["Identifier","$class"],["",");\n    }\n\n    "],["Conditional","if"],[""," ("],["Operator","defined"],[""," "],["Identifier","$meta_name"],["",") {\n        "],["Comment","# also check for inherited non moose 'meta' method?"],["","\n        "],["Statement","my"],[""," "],["Identifier","$existing"],[""," = "],["Identifier","$meta"],["","->get_method("],["Identifier","$meta_name"],["",");\n        "],["Conditional","if"],[""," ("],["Identifier","$existing"],[""," && !"],["Identifier","$existing"],["","->isa("],["String","'Class::MOP::Method::Meta'"],["",")) {\n            Carp::cluck "],["String","\"Moose is overwriting an existing method named \""],["","\n                      . "],["String","\""],["Identifier","$meta_name"],["String"," in class "],["Identifier","$class"],["String"," with a method \""],["","\n                      . "],["String","\"which returns the class's metaclass. If this is \""],["","\n                      . "],["String","\"actually what you want, you should remove the \""],["","\n                      . "],["String","\"existing method, otherwise, you should rename or \""],["","\n                      . "],["String","\"disable this generated method using the \""],["","\n                      . "],["String","\"'-meta_name' option to 'use Moose'.\""],["",";\n        }\n        "],["Identifier","$meta"],["","->_add_meta_method("],["Identifier","$meta_name"],["",");\n    }\n\n    "],["Comment","# make sure they inherit from Moose::Object"],["","\n    "],["Identifier","$meta"],["","->superclasses("],["Identifier","$base_class"],["",")\n      "],["Conditional","unless"],[""," "],["Identifier","$meta"],["","->superclasses();\n\n    "],["Statement","return"],[""," "],["Identifier","$meta"],["",";\n}\n\n"],["Comment","# This may be used in some older MooseX extensions."],["","\n"],["Keyword","sub "],["Function","_get_caller "],["","{\n    "],["Statement","goto"],[""," "],["Identifier","&"],["Type","Moose::Exporter::"],["Identifier","_get_caller"],["",";\n}\n\n"],["Comment","## make 'em all immutable"],["","\n\n"],["Identifier","$_"],["","->make_immutable(\n    "],["String","inline_constructor"],[""," => "],["Number","1"],["",",\n    "],["String","constructor_name"],["","   => "],["String","\"_new\""],["",",\n    "],["Comment","# these are Class::MOP accessors, so they need inlining"],["","\n    "],["String","inline_accessors"],[""," => "],["Number","1"],["","\n    ) "],["Repeat","for"],[""," "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->is_mutable "],["Statement","}"],["","\n    "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->meta "],["Statement","}"],["","\n    "],["String","qw("],["","\n"],["String","    Moose::Meta::Attribute"],["","\n"],["String","    Moose::Meta::Class"],["","\n"],["String","    Moose::Meta::Instance"],["","\n\n"],["String","    Moose::Meta::TypeCoercion"],["","\n"],["String","    Moose::Meta::TypeCoercion::Union"],["","\n\n"],["String","    Moose::Meta::Method"],["","\n"],["String","    Moose::Meta::Method::Constructor"],["","\n"],["String","    Moose::Meta::Method::Destructor"],["","\n"],["String","    Moose::Meta::Method::Overridden"],["","\n"],["String","    Moose::Meta::Method::Augmented"],["","\n\n"],["String","    Moose::Meta::Role"],["","\n"],["String","    Moose::Meta::Role::Attribute"],["","\n"],["String","    Moose::Meta::Role::Method"],["","\n"],["String","    Moose::Meta::Role::Method::Required"],["","\n"],["String","    Moose::Meta::Role::Method::Conflicting"],["","\n\n"],["String","    Moose::Meta::Role::Composite"],["","\n\n"],["String","    Moose::Meta::Role::Application"],["","\n"],["String","    Moose::Meta::Role::Application::RoleSummation"],["","\n"],["String","    Moose::Meta::Role::Application::ToClass"],["","\n"],["String","    Moose::Meta::Role::Application::ToRole"],["","\n"],["String","    Moose::Meta::Role::Application::ToInstance"],["","\n"],["String",")"],["",";\n\n"],["Identifier","$_"],["","->make_immutable(\n    "],["String","inline_constructor"],[""," => "],["Number","0"],["",",\n    "],["String","constructor_name"],["","   => "],["Operator","undef"],["",",\n    "],["Comment","# these are Class::MOP accessors, so they need inlining"],["","\n    "],["String","inline_accessors"],[""," => "],["Number","1"],["","\n    ) "],["Repeat","for"],[""," "],["Statement","grep"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->is_mutable "],["Statement","}"],["","\n    "],["Statement","map"],[""," "],["Statement","{"],[""," "],["Identifier","$_"],["","->meta "],["Statement","}"],["","\n    "],["String","qw("],["","\n"],["String","    Moose::Meta::Method::Accessor"],["","\n"],["String","    Moose::Meta::Method::Delegation"],["","\n"],["String","    Moose::Meta::Mixin::AttributeCore"],["","\n"],["String",")"],["",";\n\n"],["Number","1"],["",";\n\n"],["Comment","# ABSTRACT: A postmodern object system for Perl 5"],["","\n\n"],["Comment","__END__"],["","\n\n"],["Statement","=pod"],["","\n\n"],["Statement","=head1"],[""," "],["String","NAME"],["","\n\nMoose - A postmodern object system for Perl 5\n\n"],["Statement","=head1"],[""," "],["String","VERSION"],["","\n\nversion 2.1005\n\n"],["Statement","=head1"],[""," "],["String","SYNOPSIS"],["","\n\n"],["PreProc","  package Point;"],["","\n"],["PreProc","  use Moose; # automatically turns on strict and warnings"],["","\n\n"],["PreProc","  has 'x' => (is => 'rw', isa => 'Int');"],["","\n"],["PreProc","  has 'y' => (is => 'rw', isa => 'Int');"],["","\n\n"],["PreProc","  sub clear {"],["","\n"],["PreProc","      my $self = shift;"],["","\n"],["PreProc","      $self->x(0);"],["","\n"],["PreProc","      $self->y(0);"],["","\n"],["PreProc","  }"],["","\n\n"],["PreProc","  package Point3D;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  extends 'Point';"],["","\n\n"],["PreProc","  has 'z' => (is => 'rw', isa => 'Int');"],["","\n\n"],["PreProc","  after 'clear' => sub {"],["","\n"],["PreProc","      my $self = shift;"],["","\n"],["PreProc","      $self->z(0);"],["","\n"],["PreProc","  };"],["","\n\n"],["Statement","=head1"],[""," "],["String","DESCRIPTION"],["","\n\nMoose is an extension of the Perl 5 object system.\n\nThe main goal of Moose is to make Perl 5 Object Oriented programming\neasier, more consistent, and less tedious. With Moose you can think\nmore about what you want to do and less about the mechanics of OOP.\n\nAdditionally, Moose is built on top of "],["Identifier","L<Class::MOP>"],["",", which is a\nmetaclass system for Perl 5. This means that Moose not only makes\nbuilding normal Perl 5 objects better, but it provides the power of\nmetaclass programming as well.\n\n"],["Statement","=head2"],[""," "],["String","New to Moose?"],["","\n\nIf you're new to Moose, the best place to start is the\n"],["Identifier","L<Moose::Manual>"],[""," docs, followed by the "],["Identifier","L<Moose::Cookbook>"],["",". The intro\nwill show you what Moose is, and how it makes Perl 5 OO better.\n\nThe cookbook recipes on Moose basics will get you up to speed with\nmany of Moose's features quickly. Once you have an idea of what Moose\ncan do, you can use the API documentation to get more detail on\nfeatures which interest you.\n\n"],["Statement","=head2"],[""," "],["String","Moose Extensions"],["","\n\nThe "],["Identifier","C<MooseX::>"],[""," namespace is the official place to find Moose extensions.\nThese extensions can be found on the CPAN.  The easiest way to find them\nis to search for them ("],["Identifier","L<http://search.cpan.org/search?query=MooseX::>"],["","),\nor to examine "],["Identifier","L<Task::Moose>"],[""," which aims to keep an up-to-date, easily\ninstallable list of Moose extensions.\n\n"],["Statement","=head1"],[""," "],["String","TRANSLATIONS"],["","\n\nMuch of the Moose documentation has been translated into other languages.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","Japanese"],["","\n\nJapanese docs can be found at\n"],["Identifier","L<http://perldoc.perlassociation.org/pod/Moose-Doc-JA/index.html>"],["",". The\nsource POD files can be found in GitHub:\n"],["Identifier","L<http://github.com/jpa/Moose-Doc-JA>"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUILDING CLASSES WITH MOOSE"],["","\n\nMoose makes every attempt to provide as much convenience as possible during\nclass construction/definition, but still stay out of your way if you want it\nto. Here are a few items to note when building classes with Moose.\n\nWhen you "],["Identifier","C<use Moose>"],["",", Moose will set the class's parent class to\n"],["Identifier","L<Moose::Object>"],["",", "],["Identifier","I<unless>"],[""," the class using Moose already has a parent\nclass. In addition, specifying a parent with "],["Identifier","C<extends>"],[""," will change the parent\nclass.\n\nMoose will also manage all attributes (including inherited ones) that are\ndefined with "],["Identifier","C<has>"],["",". And (assuming you call "],["Identifier","C<new>"],["",", which is inherited from\n"],["Identifier","L<Moose::Object>"],["",") this includes properly initializing all instance slots,\nsetting defaults where appropriate, and performing any type constraint checking\nor coercion.\n\n"],["Statement","=head1"],[""," "],["String","PROVIDED METHODS"],["","\n\nMoose provides a number of methods to all your classes, mostly through the\ninheritance of "],["Identifier","L<Moose::Object>"],["",". There is however, one exception.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<meta>"],["","\n\nThis is a method which provides access to the current class's metaclass.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","EXPORTED FUNCTIONS"],["","\n\nMoose will export a number of functions into the class's namespace which\nmay then be used to set up the class. These functions all work directly\non the current class.\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<extends (@superclasses)>"],["","\n\nThis function will set the "],["Identifier","superclass(es)"],[""," for the current class. If the parent\nclasses are not yet loaded, then "],["Identifier","C<extends>"],[""," tries to load them.\n\nThis approach is recommended instead of "],["Identifier","C<use base>"],["",", because "],["Identifier","C<use base>"],["","\nactually "],["Identifier","C<push>"],["","es onto the class's "],["Identifier","C<@ISA>"],["",", whereas "],["Identifier","C<extends>"],[""," will\nreplace it. This is important to ensure that classes which do not have\nsuperclasses still properly inherit from "],["Identifier","L<Moose::Object>"],["",".\n\nEach superclass can be followed by a hash reference with options. Currently,\nonly "],["Identifier","L<-version|Class::MOP/Class Loading Options>"],[""," is recognized:\n\n"],["PreProc","    extends 'My::Parent'      => { -version => 0.01 },"],["","\n"],["PreProc","            'My::OtherParent' => { -version => 0.03 };"],["","\n\nAn exception will be thrown if the version requirements are not\nsatisfied.\n\n"],["Statement","=item"],[""," "],["Identifier","B<with (@roles)>"],["","\n\nThis will apply a given set of "],["Identifier","C<@roles>"],[""," to the local class.\n\nLike with "],["Identifier","C<extends>"],["",", each specified role can be followed by a hash\nreference with a "],["Identifier","L<-version|Class::MOP/Class Loading Options>"],[""," option:\n\n"],["PreProc","    with 'My::Role'      => { -version => 0.32 },"],["","\n"],["PreProc","         'My::Otherrole' => { -version => 0.23 };"],["","\n\nThe specified version requirements must be satisfied, otherwise an\nexception will be thrown.\n\nIf your role takes options or arguments, they can be passed along in the\nhash reference as well.\n\n"],["Statement","=item"],[""," "],["Identifier","B<has $name|@$names =E<"],["Constant","gt"],["Identifier","> %options>"],["","\n\nThis will install an attribute of a given "],["Identifier","C<$name>"],[""," into the current class. If\nthe first parameter is an array reference, it will create an attribute for\nevery "],["Identifier","C<$name>"],[""," in the list. The "],["Identifier","C<%options>"],[""," will be passed to the constructor\nfor "],["Identifier","L<Moose::Meta::Attribute>"],[""," (which inherits from "],["Identifier","L<Class::MOP::Attribute>"],["","),\nso the full documentation for the valid options can be found there. These are\nthe most commonly used options:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<is =E<"],["Constant","gt"],["Identifier","> 'rw'|'ro'>"],["","\n\nThe "],["Identifier","I<is>"],[""," option accepts either "],["Identifier","I<rw>"],[""," (for read/write) or "],["Identifier","I<ro>"],[""," (for read\nonly). These will create either a read/write accessor or a read-only\naccessor respectively, using the same name as the "],["Identifier","C<$name>"],[""," of the attribute.\n\nIf you need more control over how your accessors are named, you can\nuse the "],["Identifier","L<reader|Class::MOP::Attribute/reader>"],["",",\n"],["Identifier","L<writer|Class::MOP::Attribute/writer>"],[""," and\n"],["Identifier","L<accessor|Class::MOP::Attribute/accessor>"],[""," options inherited from\n"],["Identifier","L<Class::MOP::Attribute>"],["",", however if you use those, you won't need the\n"],["Identifier","I<is>"],[""," option.\n\n"],["Statement","=item"],[""," "],["Identifier","I<isa =E<"],["Constant","gt"],["Identifier","> $type_name>"],["","\n\nThe "],["Identifier","I<isa>"],[""," option uses Moose's type constraint facilities to set up runtime\ntype checking for this attribute. Moose will perform the checks during class\nconstruction, and within any accessors. The "],["Identifier","C<$type_name>"],[""," argument must be a\nstring. The string may be either a class name or a type defined using\nMoose's type definition features. (Refer to "],["Identifier","L<Moose::Util::TypeConstraints>"],["","\nfor information on how to define a new type, and how to retrieve type meta-data).\n\n"],["Statement","=item"],[""," "],["Identifier","I<coerce =E<"],["Constant","gt"],["Identifier","> (1|0)>"],["","\n\nThis will attempt to use coercion with the supplied type constraint to change\nthe value passed into any accessors or constructors. You "],["Identifier","B<must>"],[""," supply a type\nconstraint, and that type constraint "],["Identifier","B<must>"],[""," define a coercion. See\n"],["Identifier","L<Moose::Cookbook::Basics::HTTP_SubtypesAndCoercion>"],[""," for an example.\n\n"],["Statement","=item"],[""," "],["Identifier","I<does =E<"],["Constant","gt"],["Identifier","> $role_name>"],["","\n\nThis will accept the name of a role which the value stored in this attribute\nis expected to have consumed.\n\n"],["Statement","=item"],[""," "],["Identifier","I<required =E<"],["Constant","gt"],["Identifier","> (1|0)>"],["","\n\nThis marks the attribute as being required. This means a value must be\nsupplied during class construction, "],["Identifier","I<or>"],[""," the attribute must be lazy\nand have either a default or a builder. Note that c<required> does not\nsay anything about the attribute's value, which can be "],["Identifier","C<undef>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","I<weak_ref =E<"],["Constant","gt"],["Identifier","> (1|0)>"],["","\n\nThis will tell the class to store the value of this attribute as a weakened\nreference. If an attribute is a weakened reference, it "],["Identifier","B<cannot>"],[""," also be\ncoerced. Note that when a weak ref expires, the attribute's value becomes\nundefined, and is still considered to be set for purposes of predicate,\ndefault, etc.\n\n"],["Statement","=item"],[""," "],["Identifier","I<lazy =E<"],["Constant","gt"],["Identifier","> (1|0)>"],["","\n\nThis will tell the class to not create this slot until absolutely necessary.\nIf an attribute is marked as lazy it "],["Identifier","B<must>"],[""," have a default or builder\nsupplied.\n\n"],["Statement","=item"],[""," "],["Identifier","I<trigger =E<"],["Constant","gt"],["Identifier","> $code>"],["","\n\nThe "],["Identifier","I<trigger>"],[""," option is a CODE reference which will be called after\nthe value of the attribute is set. The CODE ref is passed the\ninstance itself, the updated value, and the original value if the\nattribute was already set.\n\nYou "],["Identifier","B<can>"],[""," have a trigger on a read-only attribute.\n\n"],["Identifier","B<NOTE:>"],[""," Triggers will only fire when you "],["Identifier","B<assign>"],[""," to the attribute,\neither in the constructor, or using the writer. Default and built values will\n"],["Identifier","B<not>"],[""," cause the trigger to be fired.\n\n"],["Statement","=item"],[""," "],["Identifier","I<handles =E<"],["Constant","gt"],["Identifier","> ARRAY | HASH | REGEXP | ROLE | ROLETYPE | DUCKTYPE | CODE>"],["","\n\nThe "],["Identifier","I<handles>"],[""," option provides Moose classes with automated delegation features.\nThis is a pretty complex and powerful option. It accepts many different option\nformats, each with its own benefits and drawbacks.\n\n"],["Identifier","B<NOTE:>"],[""," The class being delegated to does not need to be a Moose based class,\nwhich is why this feature is especially useful when wrapping non-Moose classes.\n\nAll "],["Identifier","I<handles>"],[""," option formats share the following traits:\n\nYou cannot override a locally defined method with a delegated method; an\nexception will be thrown if you try. That is to say, if you define "],["Identifier","C<foo>"],[""," in\nyour class, you cannot override it with a delegated "],["Identifier","C<foo>"],["",". This is almost never\nsomething you would want to do, and if it is, you should do it by hand and not\nuse Moose.\n\nYou cannot override any of the methods found in Moose::Object, or the "],["Identifier","C<BUILD>"],["","\nand "],["Identifier","C<DEMOLISH>"],[""," methods. These will not throw an exception, but will silently\nmove on to the next method in the list. My reasoning for this is that you would\nalmost never want to do this, since it usually breaks your class. As with\noverriding locally defined methods, if you do want to do this, you should do it\nmanually, not with Moose.\n\nYou do not "],["Identifier","I<need>"],[""," to have a reader (or accessor) for the attribute in order\nto delegate to it. Moose will create a means of accessing the value for you,\nhowever this will be several times "],["Identifier","B<less>"],[""," efficient then if you had given\nthe attribute a reader (or accessor) to use.\n\nBelow is the documentation for each option format:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","C<ARRAY>"],["","\n\nThis is the most common usage for "],["Identifier","I<handles>"],["",". You basically pass a list of\nmethod names to be delegated, and Moose will install a delegation method\nfor each one.\n\n"],["Statement","=item"],[""," "],["Identifier","C<HASH>"],["","\n\nThis is the second most common usage for "],["Identifier","I<handles>"],["",". Instead of a list of\nmethod names, you pass a HASH ref where each key is the method name you\nwant installed locally, and its value is the name of the original method\nin the class being delegated to.\n\nThis can be very useful for recursive classes like trees. Here is a\nquick example (soon to be expanded into a Moose::Cookbook recipe):\n\n"],["PreProc","  package Tree;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  has 'node' => (is => 'rw', isa => 'Any');"],["","\n\n"],["PreProc","  has 'children' => ("],["","\n"],["PreProc","      is      => 'ro',"],["","\n"],["PreProc","      isa     => 'ArrayRef',"],["","\n"],["PreProc","      default => sub { [] }"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  has 'parent' => ("],["","\n"],["PreProc","      is          => 'rw',"],["","\n"],["PreProc","      isa         => 'Tree',"],["","\n"],["PreProc","      weak_ref    => 1,"],["","\n"],["PreProc","      handles     => {"],["","\n"],["PreProc","          parent_node => 'node',"],["","\n"],["PreProc","          siblings    => 'children',"],["","\n"],["PreProc","      }"],["","\n"],["PreProc","  );"],["","\n\nIn this example, the Tree package gets "],["Identifier","C<parent_node>"],[""," and "],["Identifier","C<siblings>"],[""," methods,\nwhich delegate to the "],["Identifier","C<node>"],[""," and "],["Identifier","C<children>"],[""," methods (respectively) of the Tree\ninstance stored in the "],["Identifier","C<parent>"],[""," slot.\n\nYou may also use an array reference to curry arguments to the original method.\n\n"],["PreProc","  has 'thing' => ("],["","\n"],["PreProc","      ..."],["","\n"],["PreProc","      handles => { set_foo => [ set => 'foo' ] },"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  # $self->set_foo(...) calls $self->thing->set('foo', ...)"],["","\n\nThe first element of the array reference is the original method name, and the\nrest is a list of curried arguments.\n\n"],["Statement","=item"],[""," "],["Identifier","C<REGEXP>"],["","\n\nThe regexp option works very similar to the ARRAY option, except that it builds\nthe list of methods for you. It starts by collecting all possible methods of the\nclass being delegated to, then filters that list using the regexp supplied here.\n\n"],["Identifier","B<NOTE:>"],[""," An "],["Identifier","I<isa>"],[""," option is required when using the regexp option format. This\nis so that we can determine (at compile time) the method list from the class.\nWithout an "],["Identifier","I<isa>"],[""," this is just not possible.\n\n"],["Statement","=item"],[""," "],["Identifier","C<ROLE>"],["String"," or "],["Identifier","C<ROLETYPE>"],["","\n\nWith the role option, you specify the name of a role or a\n"],["Identifier","L<role type|Moose::Meta::TypeConstraint::Role>"],[""," whose \"interface\" then becomes\nthe list of methods to handle. The \"interface\" can be defined as; the methods\nof the role and any required methods of the role. It should be noted that this\ndoes "],["Identifier","B<not>"],[""," include any method modifiers or generated attribute methods (which\nis consistent with role composition).\n\n"],["Statement","=item"],[""," "],["Identifier","C<DUCKTYPE>"],["","\n\nWith the duck type option, you pass a duck type object whose \"interface\" then\nbecomes the list of methods to handle. The \"interface\" can be defined as the\nlist of methods passed to "],["Identifier","C<duck_type>"],[""," to create a duck type object. For more\ninformation on "],["Identifier","C<duck_type>"],[""," please check\n"],["Identifier","L<Moose::Util::TypeConstraints>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","C<CODE>"],["","\n\nThis is the option to use when you really want to do something funky. You should\nonly use it if you really know what you are doing, as it involves manual\nmetaclass twiddling.\n\nThis takes a code reference, which should expect two arguments. The first is the\nattribute meta-object this "],["Identifier","I<handles>"],[""," is attached to. The second is the\nmetaclass of the class being delegated to. It expects you to return a hash (not\na HASH ref) of the methods you want mapped.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<traits =E<"],["Constant","gt"],["Identifier","> [ @role_names ]>"],["","\n\nThis tells Moose to take the list of "],["Identifier","C<@role_names>"],[""," and apply them to the\nattribute meta-object. Custom attribute metaclass traits are useful for\nextending the capabilities of the "],["Identifier","I<has>"],[""," keyword: they are the simplest way to\nextend the MOP, but they are still a fairly advanced topic and too much to\ncover here.\n\nSee "],["Identifier","L<Metaclass and Trait Name Resolution>"],[""," for details on how a trait name is\nresolved to a role name.\n\nAlso see "],["Identifier","L<Moose::Cookbook::Meta::Labeled_AttributeTrait>"],[""," for a metaclass\ntrait example.\n\n"],["Statement","=item"],[""," "],["Identifier","I<builder>"],["String"," => Str"],["","\n\nThe value of this key is the name of the method that will be called to obtain\nthe value used to initialize the attribute. See the "],["Identifier","L<builder option docs in"],["","\n"],["Identifier","Class::MOP::Attribute|Class::MOP::Attribute/builder>"],[""," and/or\n"],["Identifier","L<Moose::Cookbook::Basics::BinaryTree_BuilderAndLazyBuild>"],[""," for more\ninformation.\n\n"],["Statement","=item"],[""," "],["Identifier","I<default>"],["String"," => SCALAR | CODE"],["","\n\nThe value of this key is the default value which will initialize the attribute.\n\n"],["Todo","NOTE:"],[""," If the value is a simple scalar (string or number), then it can\nbe just passed as is.  However, if you wish to initialize it with a\nHASH or ARRAY ref, then you need to wrap that inside a CODE reference.\nSee the "],["Identifier","L<default option docs in"],["","\n"],["Identifier","Class::MOP::Attribute|Class::MOP::Attribute/default>"],[""," for more\ninformation.\n\n"],["Statement","=item"],[""," "],["Identifier","I<clearer>"],["String"," => Str"],["","\n\nCreates a method allowing you to clear the value. See the "],["Identifier","L<clearer option"],["","\n"],["Identifier","docs in Class::MOP::Attribute|Class::MOP::Attribute/clearer>"],[""," for more\ninformation.\n\n"],["Statement","=item"],[""," "],["Identifier","I<predicate>"],["String"," => Str"],["","\n\nCreates a method to perform a basic test to see if a value has been set in the\nattribute. See the "],["Identifier","L<predicate option docs in"],["","\n"],["Identifier","Class::MOP::Attribute|Class::MOP::Attribute/predicate>"],[""," for more information.\n\nNote that the predicate will return true even for a "],["Identifier","C<weak_ref>"],[""," attribute\nwhose value has expired.\n\n"],["Statement","=item"],[""," "],["Identifier","I<documentation>"],["String"," => $string"],["","\n\nAn arbitrary string that can be retrieved later by calling "],["Identifier","C<<"],["","\n"],["Identifier","$attr->documentation >>"],["",".\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<has +$name =E<"],["Constant","gt"],["Identifier","> %options>"],["","\n\nThis is variation on the normal attribute creator "],["Identifier","C<has>"],[""," which allows you to\nclone and extend an attribute from a superclass or from a role. Here is an\nexample of the superclass usage:\n\n"],["PreProc","  package Foo;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  has 'message' => ("],["","\n"],["PreProc","      is      => 'rw',"],["","\n"],["PreProc","      isa     => 'Str',"],["","\n"],["PreProc","      default => 'Hello, I am a Foo'"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  package My::Foo;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  extends 'Foo';"],["","\n\n"],["PreProc","  has '+message' => (default => 'Hello I am My::Foo');"],["","\n\nWhat is happening here is that "],["Identifier","B<My::Foo>"],[""," is cloning the "],["Identifier","C<message>"],[""," attribute\nfrom its parent class "],["Identifier","B<Foo>"],["",", retaining the "],["Identifier","C<is =E<"],["Constant","gt"],["Identifier","> 'rw'>"],[""," and "],["Identifier","C<isa =E<"],["Constant","gt"],["Identifier",">"],["","\n"],["Identifier","'Str'>"],[""," characteristics, but changing the value in "],["Identifier","C<default>"],["",".\n\nHere is another example, but within the context of a role:\n\n"],["PreProc","  package Foo::Role;"],["","\n"],["PreProc","  use Moose::Role;"],["","\n\n"],["PreProc","  has 'message' => ("],["","\n"],["PreProc","      is      => 'rw',"],["","\n"],["PreProc","      isa     => 'Str',"],["","\n"],["PreProc","      default => 'Hello, I am a Foo'"],["","\n"],["PreProc","  );"],["","\n\n"],["PreProc","  package My::Foo;"],["","\n"],["PreProc","  use Moose;"],["","\n\n"],["PreProc","  with 'Foo::Role';"],["","\n\n"],["PreProc","  has '+message' => (default => 'Hello I am My::Foo');"],["","\n\nIn this case, we are basically taking the attribute which the role supplied\nand altering it within the bounds of this feature.\n\nNote that you can only extend an attribute from either a superclass or a role,\nyou cannot extend an attribute in a role that composes over an attribute from\nanother role.\n\nAside from where the attributes come from (one from superclass, the other\nfrom a role), this feature works exactly the same. This feature is restricted\nsomewhat, so as to try and force at least "],["Identifier","I<some>"],[""," sanity into it. Most options work the same, but there are some exceptions:\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<reader>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<writer>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<accessor>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<clearer>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","I<predicate>"],["","\n\nThese options can be added, but cannot override a superclass definition.\n\n"],["Statement","=item"],[""," "],["Identifier","I<traits>"],["","\n\nYou are allowed to "],["Identifier","B<add>"],[""," additional traits to the "],["Identifier","C<traits>"],[""," definition.\nThese traits will be composed into the attribute, but preexisting traits\n"],["Identifier","B<are not>"],[""," overridden, or removed.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<before $name|@names|\\@names|qr/.../ =E<"],["Constant","gt"],["Identifier","> sub { ... }>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<after $name|@names|\\@names|qr/.../ =E<"],["Constant","gt"],["Identifier","> sub { ... }>"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","B<around $name|@names|\\@names|qr/.../ =E<"],["Constant","gt"],["Identifier","> sub { ... }>"],["","\n\nThese three items are syntactic sugar for the before, after, and around method\nmodifier features that "],["Identifier","L<Class::MOP>"],[""," provides. More information on these may be\nfound in "],["Identifier","L<Moose::Manual::MethodModifiers>"],[""," and the\n"],["Identifier","L<Class::MOP::Class documentation|Class::MOP::Class/\"Method Modifiers\">"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<override ($name, &sub)>"],["","\n\nAn "],["Identifier","C<override>"],[""," method is a way of explicitly saying \"I am overriding this\nmethod from my superclass\". You can call "],["Identifier","C<super>"],[""," within this method, and\nit will work as expected. The same thing "],["Identifier","I<can>"],[""," be accomplished with a normal\nmethod call and the "],["Identifier","C<SUPER::>"],[""," pseudo-package; it is really your choice.\n\n"],["Statement","=item"],[""," "],["Identifier","B<super>"],["","\n\nThe keyword "],["Identifier","C<super>"],[""," is a no-op when called outside of an "],["Identifier","C<override>"],[""," method. In\nthe context of an "],["Identifier","C<override>"],[""," method, it will call the next most appropriate\nsuperclass method with the same arguments as the original method.\n\n"],["Statement","=item"],[""," "],["Identifier","B<augment ($name, &sub)>"],["","\n\nAn "],["Identifier","C<augment>"],[""," method, is a way of explicitly saying \"I am augmenting this\nmethod from my superclass\". Once again, the details of how "],["Identifier","C<inner>"],[""," and\n"],["Identifier","C<augment>"],[""," work is best described in the\n"],["Identifier","L<Moose::Cookbook::Basics::Document_AugmentAndInner>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<inner>"],["","\n\nThe keyword "],["Identifier","C<inner>"],["",", much like "],["Identifier","C<super>"],["",", is a no-op outside of the context of\nan "],["Identifier","C<augment>"],[""," method. You can think of "],["Identifier","C<inner>"],[""," as being the inverse of\n"],["Identifier","C<super>"],["","; the details of how "],["Identifier","C<inner>"],[""," and "],["Identifier","C<augment>"],[""," work is best described in\nthe "],["Identifier","L<Moose::Cookbook::Basics::Document_AugmentAndInner>"],["",".\n\n"],["Statement","=item"],[""," "],["Identifier","B<blessed>"],["","\n\nThis is the "],["Identifier","C<Scalar::Util::blessed>"],[""," function. It is highly recommended that\nthis is used instead of "],["Identifier","C<ref>"],[""," anywhere you need to test for an object's class\nname.\n\n"],["Statement","=item"],[""," "],["Identifier","B<confess>"],["","\n\nThis is the "],["Identifier","C<Carp::confess>"],[""," function, and exported here for historical\nreasons.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","METACLASS"],["","\n\nWhen you use Moose, you can specify traits which will be applied to your\nmetaclass:\n\n"],["PreProc","    use Moose -traits => 'My::Trait';"],["","\n\nThis is very similar to the attribute traits feature. When you do\nthis, your class's "],["Identifier","C<meta>"],[""," object will have the specified traits\napplied to it. See "],["Identifier","L<Metaclass and Trait Name Resolution>"],[""," for more\ndetails.\n\n"],["Statement","=head2"],[""," "],["String","Metaclass and Trait Name Resolution"],["","\n\nBy default, when given a trait name, Moose simply tries to load a\nclass of the same name. If such a class does not exist, it then looks\nfor a class matching\n"],["Identifier","B<Moose::Meta::$type::Custom::Trait::$trait_name>"],["",". The "],["Identifier","C<$type>"],["","\nvariable here will be one of "],["Identifier","B<Attribute>"],[""," or "],["Identifier","B<Class>"],["",", depending on\nwhat the trait is being applied to.\n\nIf a class with this long name exists, Moose checks to see if it has\nthe method "],["Identifier","C<register_implementation>"],["",". This method is expected to\nreturn the "],["Identifier","I<real>"],[""," class name of the trait. If there is no\n"],["Identifier","C<register_implementation>"],[""," method, it will fall back to using\n"],["Identifier","B<Moose::Meta::$type::Custom::Trait::$trait>"],[""," as the trait name.\n\nThe lookup method for metaclasses is the same, except that it looks\nfor a class matching "],["Identifier","B<Moose::Meta::$type::Custom::$metaclass_name>"],["",".\n\nIf all this is confusing, take a look at\n"],["Identifier","L<Moose::Cookbook::Meta::Labeled_AttributeTrait>"],["",", which demonstrates how to\ncreate an attribute trait.\n\n"],["Statement","=head1"],[""," "],["String","UNIMPORTING FUNCTIONS"],["","\n\n"],["Statement","=head2"],[""," "],["Identifier","B<unimport>"],["","\n\nMoose offers a way to remove the keywords it exports, through the "],["Identifier","C<unimport>"],["","\nmethod. You simply have to say "],["Identifier","C<no Moose>"],[""," at the bottom of your code for this\nto work. Here is an example:\n\n"],["PreProc","    package Person;"],["","\n"],["PreProc","    use Moose;"],["","\n\n"],["PreProc","    has 'first_name' => (is => 'rw', isa => 'Str');"],["","\n"],["PreProc","    has 'last_name'  => (is => 'rw', isa => 'Str');"],["","\n\n"],["PreProc","    sub full_name {"],["","\n"],["PreProc","        my $self = shift;"],["","\n"],["PreProc","        $self->first_name . ' ' . $self->last_name"],["","\n"],["PreProc","    }"],["","\n\n"],["PreProc","    no Moose; # keywords are removed from the Person package"],["","\n\n"],["Statement","=head1"],[""," "],["String","EXTENDING AND EMBEDDING MOOSE"],["","\n\nTo learn more about extending Moose, we recommend checking out the\n\"Extending\" recipes in the "],["Identifier","L<Moose::Cookbook>"],["",", starting with\n"],["Identifier","L<Moose::Cookbook::Extending::ExtensionOverview>"],["",", which provides an overview of\nall the different ways you might extend Moose. "],["Identifier","L<Moose::Exporter>"],[""," and\n"],["Identifier","L<Moose::Util::MetaRole>"],[""," are the modules which provide the majority of the\nextension functionality, so reading their documentation should also be helpful.\n\n"],["Statement","=head2"],[""," "],["String","The MooseX:: namespace"],["","\n\nGenerally if you're writing an extension "],["Identifier","I<for>"],[""," Moose itself you'll want\nto put your extension in the "],["Identifier","C<MooseX::>"],[""," namespace. This namespace is\nspecifically for extensions that make Moose better or different in some\nfundamental way. It is traditionally "],["Identifier","B<not>"],[""," for a package that just happens\nto use Moose. This namespace follows from the examples of the "],["Identifier","C<LWPx::>"],["","\nand "],["Identifier","C<DBIx::>"],[""," namespaces that perform the same function for "],["Identifier","C<LWP>"],[""," and "],["Identifier","C<DBI>"],["","\nrespectively.\n\n"],["Statement","=head1"],[""," "],["String","METACLASS COMPATIBILITY AND MOOSE"],["","\n\nMetaclass compatibility is a thorny subject. You should start by\nreading the \"About Metaclass compatibility\" section in the\n"],["Identifier","C<Class::MOP>"],[""," docs.\n\nMoose will attempt to resolve a few cases of metaclass incompatibility\nwhen you set the superclasses for a class, in addition to the cases that\n"],["Identifier","C<Class::MOP>"],[""," handles.\n\nMoose tries to determine if the metaclasses only \"differ by roles\". This\nmeans that the parent and child's metaclass share a common ancestor in\ntheir respective hierarchies, and that the subclasses under the common\nancestor are only different because of role applications. This case is\nactually fairly common when you mix and match various "],["Identifier","C<MooseX::*>"],["","\nmodules, many of which apply roles to the metaclass.\n\nIf the parent and child do differ by roles, Moose replaces the\nmetaclass in the child with a newly created metaclass. This metaclass\nis a subclass of the parent's metaclass which does all of the roles that\nthe child's metaclass did before being replaced. Effectively, this\nmeans the new metaclass does all of the roles done by both the\nparent's and child's original metaclasses.\n\nUltimately, this is all transparent to you except in the case of an\nunresolvable conflict.\n\n"],["Statement","=head1"],[""," "],["String","CAVEATS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","*"],["","\n\nIt should be noted that "],["Identifier","C<super>"],[""," and "],["Identifier","C<inner>"],[""," "],["Identifier","B<cannot>"],[""," be used in the same\nmethod. However, they may be combined within the same class hierarchy; see\n"],["Identifier","F<t/basics/override_augment_inner_super.t>"],[""," for an example.\n\nThe reason for this is that "],["Identifier","C<super>"],[""," is only valid within a method\nwith the "],["Identifier","C<override>"],[""," modifier, and "],["Identifier","C<inner>"],[""," will never be valid within an\n"],["Identifier","C<override>"],[""," method. In fact, "],["Identifier","C<augment>"],[""," will skip over any "],["Identifier","C<override>"],[""," methods\nwhen searching for its appropriate "],["Identifier","C<inner>"],["",".\n\nThis might seem like a restriction, but I am of the opinion that keeping these\ntwo features separate (yet interoperable) actually makes them easy to use, since\ntheir behavior is then easier to predict. Time will tell whether I am right or\nnot (UPDATE: so far so good).\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","GETTING HELP"],["","\n\nWe offer both a mailing list and a very active IRC channel.\n\nThe mailing list is "],["Identifier","L<mailto:moose@perl.org>"],["",". You must be subscribed to send\na message. To subscribe, send an empty message to\n"],["Identifier","L<mailto:moose-subscribe@perl.org>"],["","\n\nYou can also visit us at "],["Identifier","C<#moose>"],[""," on "],["Identifier","L<irc://irc.perl.org/#moose>"],["","\nThis channel is quite active, and questions at all levels (on Moose-related\ntopics ;) are welcome.\n\n"],["Statement","=head1"],[""," "],["String","WHAT DOES MOOSE STAND FOR?"],["","\n\nMoose doesn't stand for one thing in particular, however, if you want, here\nare a few of our favorites. Feel free to contribute more!\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","* Make Other Object Systems Envious"],["","\n\n"],["Statement","=item"],[""," "],["String","* Makes Object Orientation So Easy"],["","\n\n"],["Statement","=item"],[""," "],["String","* Makes Object Orientation Spiffy- Er (sorry ingy)"],["","\n\n"],["Statement","=item"],[""," "],["String","* Most Other Object Systems Emasculate"],["","\n\n"],["Statement","=item"],[""," "],["String","* Moose Often Ovulate Sorta Early"],["","\n\n"],["Statement","=item"],[""," "],["String","* Moose Offers Often Super Extensions"],["","\n\n"],["Statement","=item"],[""," "],["String","* Meta Object Obligates Salivary Excitation"],["","\n\n"],["Statement","=item"],[""," "],["String","* Meta Object Orientation Syntax Extensions"],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","ACKNOWLEDGEMENTS"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","I blame Sam Vilain for introducing me to the insanity that is meta-models."],["","\n\n"],["Statement","=item"],[""," "],["String","I blame Audrey Tang for then encouraging my meta-model habit in #perl6."],["","\n\n"],["Statement","=item"],[""," "],["String","Without Yuval \"nothingmuch\" Kogman this module would not be possible,"],["","\n"],["String","and it certainly wouldn't have this name ;P"],["","\n\n"],["Statement","=item"],[""," "],["String","The basis of the TypeContraints module was Rob Kinyon's idea"],["","\n"],["String","originally, I just ran with it."],["","\n\n"],["Statement","=item"],[""," "],["String","Thanks to mst & chansen and the whole #moose posse for all the"],["","\n"],["String","early ideas/feature-requests/encouragement/bug-finding."],["","\n\n"],["Statement","=item"],[""," "],["String","Thanks to David \"Theory\" Wheeler for meta-discussions and spelling fixes."],["","\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","SEE ALSO"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","L<http://www.iinteractive.com/moose>"],["","\n\nThis is the official web home of Moose. It contains links to our public git\nrepository, as well as links to a number of talks and articles on Moose and\nMoose related technologies.\n\n"],["Statement","=item"],[""," "],["String","the "],["Identifier","L<Moose manual|Moose::Manual>"],["","\n\nThis is an introduction to Moose which covers most of the basics.\n\n"],["Statement","=item"],[""," "],["String","Modern Perl, by chromatic"],["","\n\nThis is an introduction to modern Perl programming, which includes a section on\nMoose. It is available in print and as a free download from\n"],["Identifier","L<http://onyxneon.com/books/modern_perl/>"],["",".\n\n"],["Statement","=item"],[""," "],["String","The Moose is flying, a tutorial by Randal Schwartz"],["","\n\nPart 1 - "],["Identifier","L<http://www.stonehenge.com/merlyn/LinuxMag/col94.html>"],["","\n\nPart 2 - "],["Identifier","L<http://www.stonehenge.com/merlyn/LinuxMag/col95.html>"],["","\n\n"],["Statement","=item"],[""," "],["String","Several Moose extension modules in the "],["Identifier","C<MooseX::>"],["String"," namespace."],["","\n\nSee "],["Identifier","L<http://search.cpan.org/search?query=MooseX::>"],[""," for extensions.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Books"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["String","The Art of the MetaObject Protocol"],["","\n\nI mention this in the "],["Identifier","L<Class::MOP>"],[""," docs too, as this book was critical in\nthe development of both modules and is highly recommended.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head2"],[""," "],["String","Papers"],["","\n\n"],["Statement","=over"],[""," "],["Number","4"],["","\n\n"],["Statement","=item"],[""," "],["Identifier","L<http://www.cs.utah.edu/plt/publications/oopsla04-gff.pdf>"],["","\n\nThis paper (suggested by lbr on #moose) was what lead to the implementation\nof the "],["Identifier","C<super>"],["","/"],["Identifier","C<override>"],[""," and "],["Identifier","C<inner>"],["","/"],["Identifier","C<augment>"],[""," features. If you really\nwant to understand them, I suggest you read this.\n\n"],["Statement","=back"],["","\n\n"],["Statement","=head1"],[""," "],["String","BUGS"],["","\n\nAll complex software has bugs lurking in it, and this module is no\nexception.\n\nPlease report any bugs to "],["Identifier","C<bug-moose@rt.cpan.org>"],["",", or through the web\ninterface at "],["Identifier","L<http://rt.cpan.org>"],["",".\n\nYou can also discuss feature requests or possible bugs on the Moose mailing\nlist (moose"],["Identifier","@perl"],["",".org) or on IRC at "],["Identifier","L<irc://irc.perl.org/#moose>"],["",".\n\n"],["Statement","=head1"],[""," "],["String","FEATURE REQUESTS"],["","\n\nWe are very strict about what features we add to the Moose core, especially\nthe user-visible features. Instead we have made sure that the underlying\nmeta-system of Moose is as extensible as possible so that you can add your\nown features easily.\n\nThat said, occasionally there is a feature needed in the meta-system\nto support your planned extension, in which case you should either\nemail the mailing list (moose"],["Identifier","@perl"],["",".org) or join us on IRC at\n"],["Identifier","L<irc://irc.perl.org/#moose>"],[""," to discuss. The\n"],["Identifier","L<Moose::Manual::Contributing>"],[""," has more detail about how and when you\ncan contribute.\n\n"],["Statement","=head1"],[""," "],["String","CABAL"],["","\n\nThere are only a few people with the rights to release a new version\nof Moose. The Moose Cabal are the people to go to with questions regarding\nthe wider purview of Moose. They help maintain not just the code\nbut the community as well.\n\nStevan (stevan) Little "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","stevan"],["Identifier","@iinteractive"],["",".com"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\nJesse (doy) Luehrs "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","doy at tozt dot net"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\nYuval (nothingmuch) Kogman\n\nShawn (sartak) Moore "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","sartak"],["Identifier","@bestpractical"],["",".com"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\nHans Dieter (confound) Pearcey "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","hdp"],["Identifier","@pobox"],["",".com"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\nChris (perigrin) Prather\n\nFlorian Ragwitz "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","rafl"],["Identifier","@debian"],["",".org"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\nDave (autarch) Rolsky "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","autarch"],["Identifier","@urth"],["",".org"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\nKaren (ether) Etheridge "],["Identifier","E<"],["Constant","lt"],["Identifier",">"],["","ether"],["Identifier","@cpan"],["",".org"],["Identifier","E<"],["Constant","gt"],["Identifier",">"],["","\n\n"],["Statement","=head1"],[""," "],["String","CONTRIBUTORS"],["","\n\nMoose is a community project, and as such, involves the work of many, many\nmembers of the community beyond just the members in the cabal. In particular:\n\nDave (autarch) Rolsky wrote most of the documentation in "],["Identifier","L<Moose::Manual>"],["",".\n\nJohn (jgoulah) Goulah wrote "],["Identifier","L<Moose::Cookbook::Snack::Keywords>"],["",".\n\nJess (castaway) Robinson wrote "],["Identifier","L<Moose::Cookbook::Snack::Types>"],["",".\n\nAran (bluefeet) Clary Deltac wrote\n"],["Identifier","L<Moose::Cookbook::Basics::Genome_OverloadingSubtypesAndCoercion>"],["",".\n\nAnders (Debolaz) Nor Berle contributed "],["Identifier","L<Test::Moose>"],[""," and "],["Identifier","L<Moose::Util>"],["",".\n\nAlso, the code in "],["Identifier","L<Moose::Meta::Attribute::Native>"],[""," is based on code from the\n"],["Identifier","L<MooseX::AttributeHelpers>"],[""," distribution, which had contributions from:\n\nChris (perigrin) Prather\n\nCory (gphat) Watson\n\nEvan Carroll\n\nFlorian (rafl) Ragwitz\n\nJason May\n\nJay Hannah\n\nJesse (doy) Luehrs\n\nPaul (frodwith) Driver\n\nRobert (rlb3) Boone\n\nRobert Buels\n\nRobert (phaylon) Sedlacek\n\nShawn (Sartak) Moore\n\nStevan Little\n\nTom (dec) Lanyon\n\nYuval Kogman\n\nFinally, these people also contributed various tests, bug fixes,\ndocumentation, and features to the Moose codebase:\n\nAankhen\n\nAdam (Alias) Kennedy\n\nChristian (chansen) Hansen\n\nCory (gphat) Watson\n\nDylan Hardison (doc fixes)\n\nEric (ewilhelm) Wilhelm\n\nEvan Carroll\n\nGuillermo (groditi) Roditi\n\nJason May\n\nJay Hannah\n\nJonathan (jrockway) Rockway\n\nMatt (mst) Trout\n\nNathan (kolibrie) Gray\n\nPaul (frodwith) Driver\n\nPiotr (dexter) Roszatycki\n\nRobert Buels\n\nRobert (phaylon) Sedlacek\n\nRobert (rlb3) Boone\n\nSam (mugwump) Vilain\n\nScott (konobi) McWhirter\n\nShlomi (rindolf) Fish\n\nTom (dec) Lanyon\n\nWallace (wreis) Reis\n\n... and many other #moose folks\n\n"],["Statement","=head1"],[""," "],["String","AUTHOR"],["","\n\nMoose is maintained by the Moose Cabal, along with the help of many contributors. See "],["Identifier","L<Moose/CABAL>"],[""," and "],["Identifier","L<Moose/CONTRIBUTORS>"],[""," for details.\n\n"],["Statement","=head1"],[""," "],["String","COPYRIGHT AND LICENSE"],["","\n\nThis software is copyright (c) 2013 by Infinity Interactive, Inc..\n\nThis is free software; you can redistribute it and/or modify it under\nthe same terms as the Perl 5 programming language system itself.\n\n"],["Statement","=cut"],["","\n"]]